
A4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b64  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001d10  08001d10  00002d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db0  08001db0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001db0  08001db0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001db0  08001db0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001db0  08001db0  00002db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001db4  08001db4  00002db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001db8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08001dc4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001dc4  00003034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c4d  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001198  00000000  00000000  00007c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00008e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044f  00000000  00000000  00009418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271c3  00000000  00000000  00009867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000643e  00000000  00000000  00030a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee955  00000000  00000000  00036e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001257bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000159c  00000000  00000000  00125800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00126d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001cf8 	.word	0x08001cf8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001cf8 	.word	0x08001cf8

080001ec <SysTick_Init>:
#include "delay.h"

// --------------------------------------------------- delay.c w/o #includes ---
// configure SysTick timer for use with delay_us().
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     	// enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	@ (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000248:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000000 	.word	0x20000000
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <LCD_init>:
  */

#include "lcd.h"

// ------------------------------------------------------ excerpt from lcd.c ---
void LCD_init( void )  {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	  //Port clock initialize
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOAEN);
 800027a:	4b43      	ldr	r3, [pc, #268]	@ (8000388 <LCD_init+0x114>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	4a42      	ldr	r2, [pc, #264]	@ (8000388 <LCD_init+0x114>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  //LCD pin initialize - Push Pull, no PU/PD, high speed
	  LCD_PORT->MODER   &= ~(LCD_MODER);
 8000286:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000290:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000294:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000298:	6013      	str	r3, [r2, #0]
	  LCD_PORT->MODER   |=  (LCD_MODER_0);
 800029a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a4:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80002a8:	f043 0315 	orr.w	r3, r3, #21
 80002ac:	6013      	str	r3, [r2, #0]
	  LCD_PORT->OTYPER  &= ~(LCD_OTYPER);
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80002bc:	6053      	str	r3, [r2, #4]
	  LCD_PORT->PUPDR   &= ~(LCD_PUPDR);
 80002be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80002cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80002d0:	60d3      	str	r3, [r2, #12]
	  LCD_PORT->OSPEEDR |=  (LCD_OSPEEDR);
 80002d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002dc:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80002e0:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80002e4:	6093      	str	r3, [r2, #8]
	delay_us( 80000 );                    	// power-up wait 80 ms
 80002e6:	4829      	ldr	r0, [pc, #164]	@ (800038c <LCD_init+0x118>)
 80002e8:	f7ff ff96 	bl	8000218 <delay_us>
	LCD_PORT->ODR   &= ~(LCD_RS);			// clear RS bit
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f6:	f023 0310 	bic.w	r3, r3, #16
 80002fa:	6153      	str	r3, [r2, #20]
	for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 80002fc:	2300      	movs	r3, #0
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	e009      	b.n	8000316 <LCD_init+0xa2>
      LCD_4b_command( 0x30 );// HI 4b of 8b cmd, low nibble = X
 8000302:	2030      	movs	r0, #48	@ 0x30
 8000304:	f000 f85e 	bl	80003c4 <LCD_4b_command>
      delay_us( 5000 );
 8000308:	f241 3088 	movw	r0, #5000	@ 0x1388
 800030c:	f7ff ff84 	bl	8000218 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b02      	cmp	r3, #2
 800031a:	ddf2      	ble.n	8000302 <LCD_init+0x8e>
   }
   LCD_4b_command( 0x20 ); // fcn set #4: 4b cmd set 4b mode - next 0x28:2-line
 800031c:	2020      	movs	r0, #32
 800031e:	f000 f851 	bl	80003c4 <LCD_4b_command>
   delay_us(3000);
 8000322:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000326:	f7ff ff77 	bl	8000218 <delay_us>
   LCD_command( 0x28 );	// fcn set 4b mode and 2x28 line
 800032a:	2028      	movs	r0, #40	@ 0x28
 800032c:	f000 f86b 	bl	8000406 <LCD_command>
   delay_us( 300 );
 8000330:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000334:	f7ff ff70 	bl	8000218 <delay_us>
   LCD_command( 0x10 );	//Set cursor
 8000338:	2010      	movs	r0, #16
 800033a:	f000 f864 	bl	8000406 <LCD_command>
   delay_us( 300 );
 800033e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000342:	f7ff ff69 	bl	8000218 <delay_us>
   LCD_command( 0x0F ); // display, cursor, blink on
 8000346:	200f      	movs	r0, #15
 8000348:	f000 f85d 	bl	8000406 <LCD_command>
   delay_us( 300 );
 800034c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000350:	f7ff ff62 	bl	8000218 <delay_us>
   LCD_command(0x06);	//Entry mode
 8000354:	2006      	movs	r0, #6
 8000356:	f000 f856 	bl	8000406 <LCD_command>
   delay_us( 300 );
 800035a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800035e:	f7ff ff5b 	bl	8000218 <delay_us>
   LCD_command(0x01); 	//clear display
 8000362:	2001      	movs	r0, #1
 8000364:	f000 f84f 	bl	8000406 <LCD_command>
   delay_us( 300 );
 8000368:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800036c:	f7ff ff54 	bl	8000218 <delay_us>
   LCD_command(0x80);	// set cursor home
 8000370:	2080      	movs	r0, #128	@ 0x80
 8000372:	f000 f848 	bl	8000406 <LCD_command>
   delay_us( 300 );
 8000376:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800037a:	f7ff ff4d 	bl	8000218 <delay_us>

}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	00013880 	.word	0x00013880

08000390 <LCD_pulse_ENA>:

void LCD_pulse_ENA( void )  {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
// ENAble line sends command on falling edge
// set to restore default then clear to trigger
   LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 8000394:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6153      	str	r3, [r2, #20]
   delay_us( 25 );                         // TDDR > 320 ns
 80003a4:	2019      	movs	r0, #25
 80003a6:	f7ff ff37 	bl	8000218 <delay_us>
   LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 80003aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003b4:	f023 0320 	bic.w	r3, r3, #32
 80003b8:	6153      	str	r3, [r2, #20]
   delay_us( 20 );                         // low values flakey, see A3:p.1
 80003ba:	2014      	movs	r0, #20
 80003bc:	f7ff ff2c 	bl	8000218 <delay_us>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <LCD_4b_command>:

void LCD_4b_command( uint8_t command )  {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
// LCD command using high nibble only - used for 'wake-up' 0x30 commands
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 80003ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003d8:	f023 030f 	bic.w	r3, r3, #15
 80003dc:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command >> 4 );   // DATA = command
 80003de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	0912      	lsrs	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6153      	str	r3, [r2, #20]
   delay_us( 15 );
 80003f4:	200f      	movs	r0, #15
 80003f6:	f7ff ff0f 	bl	8000218 <delay_us>
   LCD_pulse_ENA( );
 80003fa:	f7ff ffc9 	bl	8000390 <LCD_pulse_ENA>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <LCD_command>:

void LCD_command( uint8_t command )  {
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
// send command to LCD in 4-bit instruction mode
// HIGH nibble then LOW nibble, timing sensitive
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000410:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( (command>>4) & LCD_DATA_BITS ); // HIGH shifted low
 8000420:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	b2db      	uxtb	r3, r3
 800042c:	f003 030f 	and.w	r3, r3, #15
 8000430:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000434:	4313      	orrs	r3, r2
 8000436:	614b      	str	r3, [r1, #20]
   delay_us( 15 );
 8000438:	200f      	movs	r0, #15
 800043a:	f7ff feed 	bl	8000218 <delay_us>
   LCD_pulse_ENA( );                                    // latch HIGH NIBBLE
 800043e:	f7ff ffa7 	bl	8000390 <LCD_pulse_ENA>

   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000442:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800044c:	f023 030f 	bic.w	r3, r3, #15
 8000450:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command & LCD_DATA_BITS );      // LOW nibble
 8000452:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 030f 	and.w	r3, r3, #15
 800045e:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000462:	4313      	orrs	r3, r2
 8000464:	614b      	str	r3, [r1, #20]
   delay_us( 15 );
 8000466:	200f      	movs	r0, #15
 8000468:	f7ff fed6 	bl	8000218 <delay_us>
   LCD_pulse_ENA( );                                    // latch LOW NIBBLE
 800046c:	f7ff ff90 	bl	8000390 <LCD_pulse_ENA>
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <LCD_write_char>:

void LCD_write_char( uint8_t letter )  {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
// calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
   LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 8000482:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800048c:	f043 0310 	orr.w	r3, r3, #16
 8000490:	6153      	str	r3, [r2, #20]
   delay_us( 15 );
 8000492:	200f      	movs	r0, #15
 8000494:	f7ff fec0 	bl	8000218 <delay_us>
   LCD_command( letter );             // character to print
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ffb3 	bl	8000406 <LCD_command>
   LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 80004a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004aa:	f023 0310 	bic.w	r3, r3, #16
 80004ae:	6153      	str	r3, [r2, #20]
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LCD_set_cursor>:

void LCD_set_cursor( uint8_t position[2])	{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
//	calls LCD_command to change cursor position
	//position formatted as [row,col] (zero indexed)
	//sets ddram address for cursor set
	LCD_PORT->ODR   &= ~(LCD_RS);
 80004c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004ca:	f023 0310 	bic.w	r3, r3, #16
 80004ce:	6153      	str	r3, [r2, #20]
	uint8_t ddRamAdd =  (40 * position[1]);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3301      	adds	r3, #1
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	4413      	add	r3, r2
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	72fb      	strb	r3, [r7, #11]
	ddRamAdd |= (0x80);
 80004e0:	7afb      	ldrb	r3, [r7, #11]
 80004e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004e6:	72fb      	strb	r3, [r7, #11]
	LCD_command(ddRamAdd);
 80004e8:	7afb      	ldrb	r3, [r7, #11]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff8b 	bl	8000406 <LCD_command>
	delay_us( 500 );
 80004f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f4:	f7ff fe90 	bl	8000218 <delay_us>
	for (int col = 0; col < position[0]; col++){
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e009      	b.n	8000512 <LCD_set_cursor+0x5a>
		LCD_command( 0x14 );
 80004fe:	2014      	movs	r0, #20
 8000500:	f7ff ff81 	bl	8000406 <LCD_command>
		delay_us( 300 );
 8000504:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000508:	f7ff fe86 	bl	8000218 <delay_us>
	for (int col = 0; col < position[0]; col++){
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4293      	cmp	r3, r2
 800051c:	dbef      	blt.n	80004fe <LCD_set_cursor+0x46>
		}
	//set address as RS_Low, data as [0x80 | address]
	//address defined as 0x00-0x0F, 0x40-0x4F
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <LCD_write_string>:

void LCD_write_string( uint8_t 	writeData[])	{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
//	calls LCD_write_char in row long for loop
	for (uint8_t indexCol = 0; indexCol < 16; indexCol++ ){
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]
 8000534:	e00c      	b.n	8000550 <LCD_write_string+0x28>
			LCD_write_char(writeData[indexCol]);
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff9a 	bl	8000478 <LCD_write_char>
			delay_us(60);
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f7ff fe67 	bl	8000218 <delay_us>
	for (uint8_t indexCol = 0; indexCol < 16; indexCol++ ){
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	3301      	adds	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	2b0f      	cmp	r3, #15
 8000554:	d9ef      	bls.n	8000536 <LCD_write_string+0xe>
		}
	}
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <main>:

uint32_t usReaction = 0;
uint8_t myflag = 0;

int main(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b095      	sub	sp, #84	@ 0x54
 8000564:	af00      	add	r7, sp, #0
	//Initialize clock and delay/LCD configs
	HAL_Init();
 8000566:	f000 fbd6 	bl	8000d16 <HAL_Init>
	SystemClock_Config();
 800056a:	f000 faf9 	bl	8000b60 <SystemClock_Config>
	SysTick_Init();
 800056e:	f7ff fe3d 	bl	80001ec <SysTick_Init>
	Led_Config();
 8000572:	f000 fabf 	bl	8000af4 <Led_Config>
	Button_Config();
 8000576:	f000 fa9f 	bl	8000ab8 <Button_Config>
	LCD_init();
 800057a:	f7ff fe7b 	bl	8000274 <LCD_init>
	setup_RNG();
 800057e:	f000 f9e5 	bl	800094c <setup_RNG>
	setup_TIM2(0xFFFFFFFF);
 8000582:	f04f 30ff 	mov.w	r0, #4294967295
 8000586:	f000 fa3f 	bl	8000a08 <setup_TIM2>
	//-------------------------- LCD VARIABLES -----
	//Key Points/openings on LCD
	uint8_t origin[2] = {0,0};
 800058a:	2300      	movs	r3, #0
 800058c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	uint8_t line2[2] = {0,1};
 8000590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000594:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	uint8_t openingLine1[16] = "EE 329 A4 REACT ";
 8000598:	4b52      	ldr	r3, [pc, #328]	@ (80006e4 <main+0x184>)
 800059a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800059e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t openingLine2[16] = "PUSH SW TO TRIG ";
 80005a4:	4b50      	ldr	r3, [pc, #320]	@ (80006e8 <main+0x188>)
 80005a6:	f107 0420 	add.w	r4, r7, #32
 80005aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t openingLine3[16] = "     Ready?     ";
 80005b0:	4b4e      	ldr	r3, [pc, #312]	@ (80006ec <main+0x18c>)
 80005b2:	f107 0410 	add.w	r4, r7, #16
 80005b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t openingLine4[16] = "  Too Fast Dude ";
 80005bc:	4b4c      	ldr	r3, [pc, #304]	@ (80006f0 <main+0x190>)
 80005be:	463c      	mov	r4, r7
 80005c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t timeTaken = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48


	//----------------------- MAIN EXECUTION -----
	while (1){
//Opening Sequence
	myflag = 0;
 80005ca:	4b4a      	ldr	r3, [pc, #296]	@ (80006f4 <main+0x194>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
	breakFlag = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	LED_PORT->BRR |= (GPIO_PIN_14);
 80005d6:	4b48      	ldr	r3, [pc, #288]	@ (80006f8 <main+0x198>)
 80005d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005da:	4a47      	ldr	r2, [pc, #284]	@ (80006f8 <main+0x198>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e0:	6293      	str	r3, [r2, #40]	@ 0x28
	LCD_set_cursor(origin);
 80005e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff66 	bl	80004b8 <LCD_set_cursor>
	LCD_write_string(openingLine1);
 80005ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff99 	bl	8000528 <LCD_write_string>
	LCD_set_cursor(line2);
 80005f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff5c 	bl	80004b8 <LCD_set_cursor>
	LCD_write_string(openingLine2);
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff8f 	bl	8000528 <LCD_write_string>
//Button Pushed, get ready
	Button_Press();
 800060a:	f000 fa35 	bl	8000a78 <Button_Press>
	LCD_set_cursor(line2);
 800060e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff50 	bl	80004b8 <LCD_set_cursor>
	LCD_write_string(openingLine3);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff83 	bl	8000528 <LCD_write_string>
//Set random timer
	set_TIM2 (((RNG->DR)% 0x1312D00) + 0x7A1200); //Set timer for random 0-8Seconds
 8000622:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <main+0x19c>)
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	4b36      	ldr	r3, [pc, #216]	@ (8000700 <main+0x1a0>)
 8000628:	fba3 1302 	umull	r1, r3, r3, r2
 800062c:	0ddb      	lsrs	r3, r3, #23
 800062e:	4935      	ldr	r1, [pc, #212]	@ (8000704 <main+0x1a4>)
 8000630:	fb01 f303 	mul.w	r3, r1, r3
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	f503 03f4 	add.w	r3, r3, #7995392	@ 0x7a0000
 800063a:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f9aa 	bl	8000998 <set_TIM2>
	while (myflag == 0){
 8000644:	e019      	b.n	800067a <main+0x11a>
	    if(!BUTTON_PRESS){		//if pressed too early
 8000646:	4b30      	ldr	r3, [pc, #192]	@ (8000708 <main+0x1a8>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d013      	beq.n	800067a <main+0x11a>
	        breakFlag = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	        LCD_set_cursor(line2);
 8000658:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff2b 	bl	80004b8 <LCD_set_cursor>
 	        LCD_write_string(openingLine4);
 8000662:	463b      	mov	r3, r7
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff5f 	bl	8000528 <LCD_write_string>
	        while(!BUTTON_PRESS);	//once released break and skip rest of code
 800066a:	bf00      	nop
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <main+0x1a8>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f9      	bne.n	800066c <main+0x10c>
	        break;
 8000678:	e003      	b.n	8000682 <main+0x122>
	while (myflag == 0){
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <main+0x194>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0e1      	beq.n	8000646 <main+0xe6>
	    }
	}
	if(!breakFlag){ //end sequence only if button wasn't early
 8000682:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000686:	2b00      	cmp	r3, #0
 8000688:	d128      	bne.n	80006dc <main+0x17c>
//Random Time Finished
	LED_PORT->BSRR |= (GPIO_PIN_14); //Light On
 800068a:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <main+0x198>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a1a      	ldr	r2, [pc, #104]	@ (80006f8 <main+0x198>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000694:	6193      	str	r3, [r2, #24]
	usReaction = 0;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <main+0x1ac>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
	set_TIM2 (999); //Set timer for counting
 800069c:	f240 30e7 	movw	r0, #999	@ 0x3e7
 80006a0:	f000 f97a 	bl	8000998 <set_TIM2>
	while (BUTTON_PRESS) if(usReaction > 10000000) break; //wait for 10S or keypress
 80006a4:	e004      	b.n	80006b0 <main+0x150>
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <main+0x1ac>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <main+0x1b0>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d806      	bhi.n	80006be <main+0x15e>
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <main+0x1a8>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f4      	beq.n	80006a6 <main+0x146>
 80006bc:	e000      	b.n	80006c0 <main+0x160>
 80006be:	bf00      	nop
	timeTaken = usReaction;	//log reaction time
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <main+0x1ac>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	while (!BUTTON_PRESS); //wait for button release
 80006c6:	bf00      	nop
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <main+0x1a8>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f9      	bne.n	80006c8 <main+0x168>
	Write_Time(timeTaken);
 80006d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f81c 	bl	8000714 <Write_Time>
	}
//Wait for button to replay
	Button_Press();
 80006dc:	f000 f9cc 	bl	8000a78 <Button_Press>
	myflag = 0;
 80006e0:	e773      	b.n	80005ca <main+0x6a>
 80006e2:	bf00      	nop
 80006e4:	08001d10 	.word	0x08001d10
 80006e8:	08001d20 	.word	0x08001d20
 80006ec:	08001d30 	.word	0x08001d30
 80006f0:	08001d40 	.word	0x08001d40
 80006f4:	2000002c 	.word	0x2000002c
 80006f8:	48000400 	.word	0x48000400
 80006fc:	50060800 	.word	0x50060800
 8000700:	6b5fca6b 	.word	0x6b5fca6b
 8000704:	01312d00 	.word	0x01312d00
 8000708:	48000800 	.word	0x48000800
 800070c:	20000028 	.word	0x20000028
 8000710:	00989680 	.word	0x00989680

08000714 <Write_Time>:
	}
}

//---------------------------------------------------------------------------
void Write_Time(int timeTaken){
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b093      	sub	sp, #76	@ 0x4c
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	//Takes in time to press button in uS and parses it to data, then writes
	//results onto LCD screen
	//Parse total time into small times
		uint8_t Sec = timeTaken/1000000;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a6b      	ldr	r2, [pc, #428]	@ (80008cc <Write_Time+0x1b8>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	1492      	asrs	r2, r2, #18
 8000726:	17db      	asrs	r3, r3, #31
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		uint8_t MSecHun = timeTaken/100000 - 10*Sec;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a67      	ldr	r2, [pc, #412]	@ (80008d0 <Write_Time+0x1bc>)
 8000732:	fb82 1203 	smull	r1, r2, r2, r3
 8000736:	1352      	asrs	r2, r2, #13
 8000738:	17db      	asrs	r3, r3, #31
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	b2da      	uxtb	r2, r3
 800073e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000742:	4619      	mov	r1, r3
 8000744:	0149      	lsls	r1, r1, #5
 8000746:	1ac9      	subs	r1, r1, r3
 8000748:	0089      	lsls	r1, r1, #2
 800074a:	1acb      	subs	r3, r1, r3
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4413      	add	r3, r2
 8000752:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		uint8_t MSecTen = timeTaken/10000 - 100*Sec - 10*MSecHun;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a5e      	ldr	r2, [pc, #376]	@ (80008d4 <Write_Time+0x1c0>)
 800075a:	fb82 1203 	smull	r1, r2, r2, r3
 800075e:	1312      	asrs	r2, r2, #12
 8000760:	17db      	asrs	r3, r3, #31
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800076a:	4619      	mov	r1, r3
 800076c:	0149      	lsls	r1, r1, #5
 800076e:	1ac9      	subs	r1, r1, r3
 8000770:	0089      	lsls	r1, r1, #2
 8000772:	1acb      	subs	r3, r1, r3
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b2d9      	uxtb	r1, r3
 8000778:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800077c:	4618      	mov	r0, r3
 800077e:	0080      	lsls	r0, r0, #2
 8000780:	4418      	add	r0, r3
 8000782:	00c0      	lsls	r0, r0, #3
 8000784:	1ac3      	subs	r3, r0, r3
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	b2db      	uxtb	r3, r3
 800078a:	440b      	add	r3, r1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		uint8_t MSecOne = timeTaken/1000 - 1000*Sec - 100*MSecHun - 10*MSecTen;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a50      	ldr	r2, [pc, #320]	@ (80008d8 <Write_Time+0x1c4>)
 8000798:	fb82 1203 	smull	r1, r2, r2, r3
 800079c:	1192      	asrs	r2, r2, #6
 800079e:	17db      	asrs	r3, r3, #31
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80007a8:	4619      	mov	r1, r3
 80007aa:	0089      	lsls	r1, r1, #2
 80007ac:	4419      	add	r1, r3
 80007ae:	00c9      	lsls	r1, r1, #3
 80007b0:	1acb      	subs	r3, r1, r3
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80007ba:	4618      	mov	r0, r3
 80007bc:	0040      	lsls	r0, r0, #1
 80007be:	4403      	add	r3, r0
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	440b      	add	r3, r1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80007d0:	4619      	mov	r1, r3
 80007d2:	0149      	lsls	r1, r1, #5
 80007d4:	1ac9      	subs	r1, r1, r3
 80007d6:	0089      	lsls	r1, r1, #2
 80007d8:	1acb      	subs	r3, r1, r3
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4413      	add	r3, r2
 80007e0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	//Write Screen
		uint8_t line2[2] = {0,1};
 80007e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		uint8_t endLine1[16] = "TIME = N.MMM s  ";
 80007ec:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <Write_Time+0x1c8>)
 80007ee:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80007f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LCD_set_cursor(line2);
 80007f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe5b 	bl	80004b8 <LCD_set_cursor>
		LCD_write_string(endLine1);
 8000802:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe8e 	bl	8000528 <LCD_write_string>
	//Write Data
		uint8_t clockSec[2] = {7,1};
 800080c:	f240 1307 	movw	r3, #263	@ 0x107
 8000810:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint8_t clockMSecHun[2] = {9,1};
 8000812:	f240 1309 	movw	r3, #265	@ 0x109
 8000816:	853b      	strh	r3, [r7, #40]	@ 0x28
		uint8_t clockMSecTen[2] = {10,1};
 8000818:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 800081c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint8_t clockMSecOne[2] = {11,1};
 800081e:	f240 130b 	movw	r3, #267	@ 0x10b
 8000822:	843b      	strh	r3, [r7, #32]
		uint8_t clockEnd[2] = {15,1};
 8000824:	f240 130f 	movw	r3, #271	@ 0x10f
 8000828:	83bb      	strh	r3, [r7, #28]
		LCD_set_cursor(clockSec);
 800082a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fe42 	bl	80004b8 <LCD_set_cursor>
		LCD_write_char(Sec + 0x30);
 8000834:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000838:	3330      	adds	r3, #48	@ 0x30
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fe1b 	bl	8000478 <LCD_write_char>
		LCD_set_cursor(clockMSecHun);
 8000842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe36 	bl	80004b8 <LCD_set_cursor>
		LCD_write_char(MSecHun + 0x30);
 800084c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000850:	3330      	adds	r3, #48	@ 0x30
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe0f 	bl	8000478 <LCD_write_char>
		LCD_set_cursor(clockMSecTen);
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe2a 	bl	80004b8 <LCD_set_cursor>
		LCD_write_char(MSecTen + 0x30);
 8000864:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000868:	3330      	adds	r3, #48	@ 0x30
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe03 	bl	8000478 <LCD_write_char>
		LCD_set_cursor(clockMSecOne);
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe1e 	bl	80004b8 <LCD_set_cursor>
		LCD_write_char(MSecOne + 0x30);
 800087c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000880:	3330      	adds	r3, #48	@ 0x30
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fdf7 	bl	8000478 <LCD_write_char>
		LCD_set_cursor(clockEnd);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe12 	bl	80004b8 <LCD_set_cursor>
		LCD_write_char(' ');
 8000894:	2020      	movs	r0, #32
 8000896:	f7ff fdef 	bl	8000478 <LCD_write_char>
		uint8_t endLine2[16] = "  Too Slow Dude ";
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <Write_Time+0x1cc>)
 800089c:	f107 040c 	add.w	r4, r7, #12
 80008a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if(Sec>=10){
 80008a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80008aa:	2b09      	cmp	r3, #9
 80008ac:	d909      	bls.n	80008c2 <Write_Time+0x1ae>
		     LCD_set_cursor(line2);
 80008ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe00 	bl	80004b8 <LCD_set_cursor>
		     LCD_write_string(endLine2);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe33 	bl	8000528 <LCD_write_string>
		}

}
 80008c2:	bf00      	nop
 80008c4:	374c      	adds	r7, #76	@ 0x4c
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	bf00      	nop
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	14f8b589 	.word	0x14f8b589
 80008d4:	68db8bad 	.word	0x68db8bad
 80008d8:	10624dd3 	.word	0x10624dd3
 80008dc:	08001d50 	.word	0x08001d50
 80008e0:	08001d60 	.word	0x08001d60

080008e4 <TIM2_IRQHandler>:

//-------------------------- ISR -----------------------------------------

void TIM2_IRQHandler(void) {
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
   if (TIM2->SR & TIM_SR_CC1IF) {      // triggered by CCR1 event ...
 80008e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d007      	beq.n	8000906 <TIM2_IRQHandler+0x22>
      TIM2->SR &= ~(TIM_SR_CC1IF);     // manage the flag
 80008f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000900:	f023 0302 	bic.w	r3, r3, #2
 8000904:	6113      	str	r3, [r2, #16]
      //myflag = 1;     // Flip GPIO each 400 ticks
      //usReaction = usReaction + 250;
      //TIM2->EGR |= TIM_EGR_UG;
   }

   if (TIM2->SR & TIM_SR_UIF) {        // triggered by ARR event ...
 8000906:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800090a:	691b      	ldr	r3, [r3, #16]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d012      	beq.n	800093a <TIM2_IRQHandler+0x56>
	   TIM2->SR &= ~(TIM_SR_UIF);       // manage the flag
 8000914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6113      	str	r3, [r2, #16]
	   usReaction = usReaction + 250;	//incriment count
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <TIM2_IRQHandler+0x60>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	33fa      	adds	r3, #250	@ 0xfa
 800092a:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <TIM2_IRQHandler+0x60>)
 800092c:	6013      	str	r3, [r2, #0]
	   myflag = 1;					//set flag for main
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <TIM2_IRQHandler+0x64>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
	   myflag = 1;
 8000934:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <TIM2_IRQHandler+0x64>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
   }
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	20000028 	.word	0x20000028
 8000948:	2000002c 	.word	0x2000002c

0800094c <setup_RNG>:

//---------------------------------------------------------------------------
void setup_RNG(void) {
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
   RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;   // enable clock for RNG
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <setup_RNG+0x44>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <setup_RNG+0x44>)
 8000956:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800095a:	64d3      	str	r3, [r2, #76]	@ 0x4c
   RCC->CRRCR |= (RCC_CRRCR_HSI48ON);
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <setup_RNG+0x44>)
 800095e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <setup_RNG+0x44>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
   RNG->CR |= (RNG_CR_RNGEN | RNG_CR_IE);
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <setup_RNG+0x48>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <setup_RNG+0x48>)
 8000972:	f043 030c 	orr.w	r3, r3, #12
 8000976:	6013      	str	r3, [r2, #0]
   RNG->SR |= (RNG_SR_DRDY);       	// enable RNG
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <setup_RNG+0x48>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <setup_RNG+0x48>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6053      	str	r3, [r2, #4]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	50060800 	.word	0x50060800

08000998 <set_TIM2>:

void set_TIM2( int period ) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <set_TIM2+0x68>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a4:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <set_TIM2+0x68>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6593      	str	r3, [r2, #88]	@ 0x58
   TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 80009ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b6:	f043 0303 	orr.w	r3, r3, #3
 80009ba:	60d3      	str	r3, [r2, #12]
   TIM2->ARR = period;                   			// ticks for ARR Period
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
   TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 80009c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ce:	f023 0303 	bic.w	r3, r3, #3
 80009d2:	6113      	str	r3, [r2, #16]
   NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 80009d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <set_TIM2+0x6c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <set_TIM2+0x6c>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009de:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80009e0:	b662      	cpsie	i
}
 80009e2:	bf00      	nop
   __enable_irq();                                 // global IRQ enable
   TIM2->CR1 |= TIM_CR1_CEN;						// start TIM2 CR1
 80009e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]

}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <setup_TIM2>:

void setup_TIM2( int period ) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <setup_TIM2+0x68>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a14:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <setup_TIM2+0x68>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6593      	str	r3, [r2, #88]	@ 0x58
   TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 8000a1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a26:	f043 0303 	orr.w	r3, r3, #3
 8000a2a:	60d3      	str	r3, [r2, #12]
   TIM2->ARR = period;
 8000a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
		   //PERIOD;           		                  // ARR = T = counts @4MHz
   //TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
   TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 8000a34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	6113      	str	r3, [r2, #16]
   NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <setup_TIM2+0x6c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <setup_TIM2+0x6c>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a50:	b662      	cpsie	i
}
 8000a52:	bf00      	nop
   __enable_irq();                                 // global IRQ enable
   TIM2->CR1 |= TIM_CR1_CEN;						// start TIM2 CR1
 8000a54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]

}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <Button_Press>:
}
*/

//--------------------------- GPIO -----------------------------------------

void Button_Press(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	while (BUTTON_PRESS)delay_us(100);
 8000a7c:	e002      	b.n	8000a84 <Button_Press+0xc>
 8000a7e:	2064      	movs	r0, #100	@ 0x64
 8000a80:	f7ff fbca 	bl	8000218 <delay_us>
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <Button_Press+0x3c>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f6      	beq.n	8000a7e <Button_Press+0x6>
	delay_us(100);
 8000a90:	2064      	movs	r0, #100	@ 0x64
 8000a92:	f7ff fbc1 	bl	8000218 <delay_us>
	while (!BUTTON_PRESS)delay_us(100);
 8000a96:	e002      	b.n	8000a9e <Button_Press+0x26>
 8000a98:	2064      	movs	r0, #100	@ 0x64
 8000a9a:	f7ff fbbd 	bl	8000218 <delay_us>
 8000a9e:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <Button_Press+0x3c>)
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f6      	bne.n	8000a98 <Button_Press+0x20>
	delay_us(100);
 8000aaa:	2064      	movs	r0, #100	@ 0x64
 8000aac:	f7ff fbb4 	bl	8000218 <delay_us>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	48000800 	.word	0x48000800

08000ab8 <Button_Config>:

void Button_Config(void)
{		// configure GPIO pin PC13 for:
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	  	// Button pin initialize - Input, on board PU
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 8000abc:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <Button_Config+0x34>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <Button_Config+0x34>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	BUTTON_PORT->MODER   &= ~(GPIO_MODER_MODE13);
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <Button_Config+0x38>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <Button_Config+0x38>)
 8000ace:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000ad2:	6013      	str	r3, [r2, #0]
	BUTTON_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD13);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <Button_Config+0x38>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <Button_Config+0x38>)
 8000ada:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000800 	.word	0x48000800

08000af4 <Led_Config>:

void Led_Config(void)
{		// configure GPIO pin PB14 for:
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	  	// output mode, push-pull, no pull up or pull down, high speed
  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <Led_Config+0x64>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	4a16      	ldr	r2, [pc, #88]	@ (8000b58 <Led_Config+0x64>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  LED_PORT->MODER   &= ~(GPIO_MODER_MODE14);
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <Led_Config+0x68>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <Led_Config+0x68>)
 8000b0a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000b0e:	6013      	str	r3, [r2, #0]
  LED_PORT->MODER   |=  (GPIO_MODER_MODE14_0);
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <Led_Config+0x68>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <Led_Config+0x68>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	6013      	str	r3, [r2, #0]
  LED_PORT->OTYPER  &= ~(GPIO_OTYPER_OT14);
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <Led_Config+0x68>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <Led_Config+0x68>)
 8000b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000b26:	6053      	str	r3, [r2, #4]
  LED_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD14);
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <Led_Config+0x68>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <Led_Config+0x68>)
 8000b2e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000b32:	60d3      	str	r3, [r2, #12]
  LED_PORT->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <Led_Config+0x68>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <Led_Config+0x68>)
 8000b3a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000b3e:	6093      	str	r3, [r2, #8]
  LED_PORT->BRR |= (GPIO_PIN_14);
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <Led_Config+0x68>)
 8000b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b44:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <Led_Config+0x68>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400

08000b60 <SystemClock_Config>:

//--------------------------------- SYSTEM -----------------------------------
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b096      	sub	sp, #88	@ 0x58
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2244      	movs	r2, #68	@ 0x44
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f896 	bl	8001ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b86:	f000 fa2f 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b90:	f000 f82c 	bl	8000bec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b94:	2310      	movs	r3, #16
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ba0:	2360      	movs	r3, #96	@ 0x60
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa71 	bl	8001094 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 f818 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fe77 	bl	80018c8 <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000be0:	f000 f804 	bl	8000bec <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3758      	adds	r7, #88	@ 0x58
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Error_Handler>:

void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop

  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f893 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f000 ffdd 	bl	8001cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf6:	f7ff fc33 	bl	8000560 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cfc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	08001db8 	.word	0x08001db8
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	20000034 	.word	0x20000034

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>

08000d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f91f 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f80e 	bl	8000d48 <HAL_InitTick>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	e001      	b.n	8000d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d38:	f7ff ff5e 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d54:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_InitTick+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f91d 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d809      	bhi.n	8000d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f8f5 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_InitTick+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e004      	b.n	8000da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000030 	.word	0x20000030

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000030 	.word	0x20000030

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff6:	d130      	bne.n	800105a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001004:	d038      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001014:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2232      	movs	r2, #50	@ 0x32
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102c:	e002      	b.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001040:	d102      	bne.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f2      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001054:	d110      	bne.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e00f      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001066:	d007      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001070:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001076:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83

08001094 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 bc08 	b.w	80018b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a8:	4b96      	ldr	r3, [pc, #600]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b2:	4b94      	ldr	r3, [pc, #592]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80e4 	beq.w	8001292 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0x4c>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	f040 808b 	bne.w	80011ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	f040 8087 	bne.w	80011ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e0:	4b88      	ldr	r3, [pc, #544]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_OscConfig+0x64>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e3df      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4b81      	ldr	r3, [pc, #516]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <HAL_RCC_OscConfig+0x7e>
 8001108:	4b7e      	ldr	r3, [pc, #504]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001110:	e005      	b.n	800111e <HAL_RCC_OscConfig+0x8a>
 8001112:	4b7c      	ldr	r3, [pc, #496]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800111e:	4293      	cmp	r3, r2
 8001120:	d223      	bcs.n	800116a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd5a 	bl	8001be0 <RCC_SetFlashLatencyFromMSIRange>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e3c0      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001136:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a72      	ldr	r2, [pc, #456]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	496d      	ldr	r1, [pc, #436]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	4968      	ldr	r1, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	e025      	b.n	80011b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116a:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a65      	ldr	r2, [pc, #404]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4960      	ldr	r1, [pc, #384]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001188:	4b5e      	ldr	r3, [pc, #376]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	495b      	ldr	r1, [pc, #364]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fd1a 	bl	8001be0 <RCC_SetFlashLatencyFromMSIRange>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e380      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b6:	f000 fc87 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	4950      	ldr	r1, [pc, #320]	@ (8001308 <HAL_RCC_OscConfig+0x274>)
 80011c8:	5ccb      	ldrb	r3, [r1, r3]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001310 <HAL_RCC_OscConfig+0x27c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fdb4 	bl	8000d48 <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d052      	beq.n	8001290 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	e364      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d032      	beq.n	800125c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a42      	ldr	r2, [pc, #264]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001202:	f7ff fdf1 	bl	8000de8 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800120a:	f7ff fded 	bl	8000de8 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e34d      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121c:	4b39      	ldr	r3, [pc, #228]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001228:	4b36      	ldr	r3, [pc, #216]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a35      	ldr	r2, [pc, #212]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4930      	ldr	r1, [pc, #192]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001246:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	492b      	ldr	r1, [pc, #172]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
 800125a:	e01a      	b.n	8001292 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001268:	f7ff fdbe 	bl	8000de8 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001270:	f7ff fdba 	bl	8000de8 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e31a      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1dc>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d073      	beq.n	8001386 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_OscConfig+0x21c>
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d063      	beq.n	8001384 <HAL_RCC_OscConfig+0x2f0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d15f      	bne.n	8001384 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e2f7      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x24c>
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e025      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e8:	d114      	bne.n	8001314 <HAL_RCC_OscConfig+0x280>
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a02      	ldr	r2, [pc, #8]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e013      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 8001304:	40021000 	.word	0x40021000
 8001308:	08001d70 	.word	0x08001d70
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	4ba0      	ldr	r3, [pc, #640]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a9f      	ldr	r2, [pc, #636]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b9d      	ldr	r3, [pc, #628]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a9c      	ldr	r2, [pc, #624]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fd58 	bl	8000de8 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fd54 	bl	8000de8 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e2b4      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	4b92      	ldr	r3, [pc, #584]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x2a8>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fd44 	bl	8000de8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fd40 	bl	8000de8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e2a0      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	4b88      	ldr	r3, [pc, #544]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x2d0>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d060      	beq.n	8001454 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x310>
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d119      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d116      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x328>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e27d      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b76      	ldr	r3, [pc, #472]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4973      	ldr	r1, [pc, #460]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	e040      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d023      	beq.n	8001422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013da:	4b6f      	ldr	r3, [pc, #444]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6e      	ldr	r2, [pc, #440]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fcff 	bl	8000de8 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fcfb 	bl	8000de8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e25b      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	495f      	ldr	r1, [pc, #380]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a5c      	ldr	r2, [pc, #368]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fcdb 	bl	8000de8 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fcd7 	bl	8000de8 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e237      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d03c      	beq.n	80014da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fcb6 	bl	8000de8 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fcb2 	bl	8000de8 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e212      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ef      	beq.n	8001480 <HAL_RCC_OscConfig+0x3ec>
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc99 	bl	8000de8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc95 	bl	8000de8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1f5      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ef      	bne.n	80014ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a6 	beq.w	8001634 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	@ 0x58
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001510:	2301      	movs	r3, #1
 8001512:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d118      	bne.n	8001552 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152c:	f7ff fc5c 	bl	8000de8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff fc58 	bl	8000de8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1b8      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x4d8>
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156a:	e029      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d115      	bne.n	80015a0 <HAL_RCC_OscConfig+0x50c>
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157a:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158a:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001594:	e014      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	4a9c      	ldr	r2, [pc, #624]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b0:	4b99      	ldr	r3, [pc, #612]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a98      	ldr	r2, [pc, #608]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d016      	beq.n	80015f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc0e 	bl	8000de8 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fc0a 	bl	8000de8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e168      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e6:	4b8c      	ldr	r3, [pc, #560]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ed      	beq.n	80015d0 <HAL_RCC_OscConfig+0x53c>
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbf7 	bl	8000de8 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fbf3 	bl	8000de8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e151      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001614:	4b80      	ldr	r3, [pc, #512]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b7b      	ldr	r3, [pc, #492]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	4a7a      	ldr	r2, [pc, #488]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001632:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d03c      	beq.n	80016ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01c      	beq.n	8001682 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001648:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 800164a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800164e:	4a72      	ldr	r2, [pc, #456]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fbc6 	bl	8000de8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001660:	f7ff fbc2 	bl	8000de8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e122      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001672:	4b69      	ldr	r3, [pc, #420]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ef      	beq.n	8001660 <HAL_RCC_OscConfig+0x5cc>
 8001680:	e01b      	b.n	80016ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001682:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001688:	4a63      	ldr	r2, [pc, #396]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fba9 	bl	8000de8 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800169a:	f7ff fba5 	bl	8000de8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e105      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80016ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ef      	bne.n	800169a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80f9 	beq.w	80018b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	f040 80cf 	bne.w	800186c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016ce:	4b52      	ldr	r3, [pc, #328]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0203 	and.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	429a      	cmp	r2, r3
 80016e0:	d12c      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	3b01      	subs	r3, #1
 80016ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d123      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d11b      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d113      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d109      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d071      	beq.n	8001820 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d068      	beq.n	8001814 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001742:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0ac      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800175e:	4b2e      	ldr	r3, [pc, #184]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2d      	ldr	r2, [pc, #180]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001768:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800176a:	f7ff fb3d 	bl	8000de8 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fb39 	bl	8000de8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e099      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b21      	ldr	r3, [pc, #132]	@ (800181c <HAL_RCC_OscConfig+0x788>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017a0:	3a01      	subs	r2, #1
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017aa:	0212      	lsls	r2, r2, #8
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017b2:	0852      	lsrs	r2, r2, #1
 80017b4:	3a01      	subs	r2, #1
 80017b6:	0552      	lsls	r2, r2, #21
 80017b8:	4311      	orrs	r1, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017be:	0852      	lsrs	r2, r2, #1
 80017c0:	3a01      	subs	r2, #1
 80017c2:	0652      	lsls	r2, r2, #25
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017ca:	06d2      	lsls	r2, r2, #27
 80017cc:	430a      	orrs	r2, r1
 80017ce:	4912      	ldr	r1, [pc, #72]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80017da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 80017e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ec:	f7ff fafc 	bl	8000de8 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff faf8 	bl	8000de8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e058      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <HAL_RCC_OscConfig+0x784>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001812:	e050      	b.n	80018b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e04f      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
 8001818:	40021000 	.word	0x40021000
 800181c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d144      	bne.n	80018b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a23      	ldr	r2, [pc, #140]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001838:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a20      	ldr	r2, [pc, #128]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001842:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001844:	f7ff fad0 	bl	8000de8 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff facc 	bl	8000de8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e02c      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x7b8>
 800186a:	e024      	b.n	80018b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d01f      	beq.n	80018b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 8001878:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fab3 	bl	8000de8 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff faaf 	bl	8000de8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e00f      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4905      	ldr	r1, [pc, #20]	@ (80018c0 <HAL_RCC_OscConfig+0x82c>)
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_OscConfig+0x830>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
 80018b0:	e001      	b.n	80018b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	feeefffc 	.word	0xfeeefffc

080018c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0e7      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018dc:	4b75      	ldr	r3, [pc, #468]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d910      	bls.n	800190c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b72      	ldr	r3, [pc, #456]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 0207 	bic.w	r2, r3, #7
 80018f2:	4970      	ldr	r1, [pc, #448]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0cf      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d010      	beq.n	800193a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	4b66      	ldr	r3, [pc, #408]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001924:	429a      	cmp	r2, r3
 8001926:	d908      	bls.n	800193a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b63      	ldr	r3, [pc, #396]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4960      	ldr	r1, [pc, #384]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d04c      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d121      	bne.n	800199e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0a6      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	4b54      	ldr	r3, [pc, #336]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e09a      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e08e      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e086      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4943      	ldr	r1, [pc, #268]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b0:	f7ff fa1a 	bl	8000de8 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fa16 	bl	8000de8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e06e      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d010      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d208      	bcs.n	8001a0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	492b      	ldr	r1, [pc, #172]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d210      	bcs.n	8001a3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1c:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 0207 	bic.w	r2, r3, #7
 8001a24:	4923      	ldr	r1, [pc, #140]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e036      	b.n	8001aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4918      	ldr	r1, [pc, #96]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4910      	ldr	r1, [pc, #64]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a7c:	f000 f824 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	490b      	ldr	r1, [pc, #44]	@ (8001abc <HAL_RCC_ClockConfig+0x1f4>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1fc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f951 	bl	8000d48 <HAL_InitTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08001d70 	.word	0x08001d70
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x34>
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d121      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d11e      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e005      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b18:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b24:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10d      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e004      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b4c:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d134      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d003      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0xac>
 8001b6c:	e005      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b70:	617b      	str	r3, [r7, #20]
      break;
 8001b72:	e005      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b76:	617b      	str	r3, [r7, #20]
      break;
 8001b78:	e002      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	617b      	str	r3, [r7, #20]
      break;
 8001b7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	fb03 f202 	mul.w	r2, r3, r2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	0e5b      	lsrs	r3, r3, #25
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	@ 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08001d80 	.word	0x08001d80
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bf8:	f7ff f9e8 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001bfc:	6178      	str	r0, [r7, #20]
 8001bfe:	e014      	b.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	4a24      	ldr	r2, [pc, #144]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0c:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c18:	f7ff f9d8 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c22:	4a1d      	ldr	r2, [pc, #116]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c30:	d10b      	bne.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b80      	cmp	r3, #128	@ 0x80
 8001c36:	d919      	bls.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c3c:	d902      	bls.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c3e:	2302      	movs	r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	e013      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c44:	2301      	movs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e010      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b80      	cmp	r3, #128	@ 0x80
 8001c4e:	d902      	bls.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c50:	2303      	movs	r3, #3
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e00a      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b80      	cmp	r3, #128	@ 0x80
 8001c5a:	d102      	bne.n	8001c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e004      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b70      	cmp	r3, #112	@ 0x70
 8001c66:	d101      	bne.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c68:	2301      	movs	r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4909      	ldr	r1, [pc, #36]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c7c:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <memset>:
 8001ca0:	4402      	add	r2, r0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d100      	bne.n	8001caa <memset+0xa>
 8001ca8:	4770      	bx	lr
 8001caa:	f803 1b01 	strb.w	r1, [r3], #1
 8001cae:	e7f9      	b.n	8001ca4 <memset+0x4>

08001cb0 <__libc_init_array>:
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8001ce8 <__libc_init_array+0x38>)
 8001cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8001cec <__libc_init_array+0x3c>)
 8001cb6:	1b64      	subs	r4, r4, r5
 8001cb8:	10a4      	asrs	r4, r4, #2
 8001cba:	2600      	movs	r6, #0
 8001cbc:	42a6      	cmp	r6, r4
 8001cbe:	d109      	bne.n	8001cd4 <__libc_init_array+0x24>
 8001cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8001cf0 <__libc_init_array+0x40>)
 8001cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8001cf4 <__libc_init_array+0x44>)
 8001cc4:	f000 f818 	bl	8001cf8 <_init>
 8001cc8:	1b64      	subs	r4, r4, r5
 8001cca:	10a4      	asrs	r4, r4, #2
 8001ccc:	2600      	movs	r6, #0
 8001cce:	42a6      	cmp	r6, r4
 8001cd0:	d105      	bne.n	8001cde <__libc_init_array+0x2e>
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
 8001cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd8:	4798      	blx	r3
 8001cda:	3601      	adds	r6, #1
 8001cdc:	e7ee      	b.n	8001cbc <__libc_init_array+0xc>
 8001cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce2:	4798      	blx	r3
 8001ce4:	3601      	adds	r6, #1
 8001ce6:	e7f2      	b.n	8001cce <__libc_init_array+0x1e>
 8001ce8:	08001db0 	.word	0x08001db0
 8001cec:	08001db0 	.word	0x08001db0
 8001cf0:	08001db0 	.word	0x08001db0
 8001cf4:	08001db4 	.word	0x08001db4

08001cf8 <_init>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr

08001d04 <_fini>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	bf00      	nop
 8001d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0a:	bc08      	pop	{r3}
 8001d0c:	469e      	mov	lr, r3
 8001d0e:	4770      	bx	lr
