
A8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08001e60  08001e60  00002e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa8  08001fa8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa8  08001fa8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa8  08001fa8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa8  08001fa8  00002fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fac  08001fac  00002fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fb0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000000c  08001fbc  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08001fbc  00003058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059c9  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001340  00000000  00000000  00008a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00009d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000477  00000000  00000000  0000a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027354  00000000  00000000  0000a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c4e  00000000  00000000  00031b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8f7  00000000  00000000  00038779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001610  00000000  00000000  001270b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001286c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001e48 	.word	0x08001e48

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001e48 	.word	0x08001e48

080001ec <ADC_init>:

#include "adc.h"
#include "delay.h"


void ADC_init(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;         // turn on clock for ADC
 80001f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000328 <ADC_init+0x13c>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001f4:	4a4c      	ldr	r2, [pc, #304]	@ (8000328 <ADC_init+0x13c>)
 80001f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
// power up & calibrate ADC
ADC123_COMMON->CCR |= (1 << ADC_CCR_CKMODE_Pos); // clock source = HCLK/1
 80001fc:	4b4b      	ldr	r3, [pc, #300]	@ (800032c <ADC_init+0x140>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a4a      	ldr	r2, [pc, #296]	@ (800032c <ADC_init+0x140>)
 8000202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000206:	6093      	str	r3, [r2, #8]
ADC1->CR &= ~(ADC_CR_DEEPPWD);             // disable deep-power-down
 8000208:	4b49      	ldr	r3, [pc, #292]	@ (8000330 <ADC_init+0x144>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a48      	ldr	r2, [pc, #288]	@ (8000330 <ADC_init+0x144>)
 800020e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000212:	6093      	str	r3, [r2, #8]
ADC1->CR |= (ADC_CR_ADVREGEN);             // enable V regulator - see RM 18.4.6
 8000214:	4b46      	ldr	r3, [pc, #280]	@ (8000330 <ADC_init+0x144>)
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	4a45      	ldr	r2, [pc, #276]	@ (8000330 <ADC_init+0x144>)
 800021a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800021e:	6093      	str	r3, [r2, #8]
delay_us(20);                              // wait 20us for ADC to power up
 8000220:	2014      	movs	r0, #20
 8000222:	f000 f8db 	bl	80003dc <delay_us>
ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);    // PA0=ADC1_IN5, single-ended
 8000226:	4b42      	ldr	r3, [pc, #264]	@ (8000330 <ADC_init+0x144>)
 8000228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800022c:	4a40      	ldr	r2, [pc, #256]	@ (8000330 <ADC_init+0x144>)
 800022e:	f023 0320 	bic.w	r3, r3, #32
 8000232:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 8000236:	4b3e      	ldr	r3, [pc, #248]	@ (8000330 <ADC_init+0x144>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	4a3d      	ldr	r2, [pc, #244]	@ (8000330 <ADC_init+0x144>)
 800023c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000240:	f023 0301 	bic.w	r3, r3, #1
 8000244:	6093      	str	r3, [r2, #8]
ADC1->CR |= ADC_CR_ADCAL;                  // start calibration
 8000246:	4b3a      	ldr	r3, [pc, #232]	@ (8000330 <ADC_init+0x144>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	4a39      	ldr	r2, [pc, #228]	@ (8000330 <ADC_init+0x144>)
 800024c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000250:	6093      	str	r3, [r2, #8]
while (ADC1->CR & ADC_CR_ADCAL) {;}        // wait for calib to finish
 8000252:	bf00      	nop
 8000254:	4b36      	ldr	r3, [pc, #216]	@ (8000330 <ADC_init+0x144>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	2b00      	cmp	r3, #0
 800025a:	dbfb      	blt.n	8000254 <ADC_init+0x68>
// enable ADC
ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 800025c:	4b34      	ldr	r3, [pc, #208]	@ (8000330 <ADC_init+0x144>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a33      	ldr	r2, [pc, #204]	@ (8000330 <ADC_init+0x144>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]
ADC1->CR |= ADC_CR_ADEN;                   // enable ADC
 8000268:	4b31      	ldr	r3, [pc, #196]	@ (8000330 <ADC_init+0x144>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a30      	ldr	r2, [pc, #192]	@ (8000330 <ADC_init+0x144>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6093      	str	r3, [r2, #8]
while(!(ADC1->ISR & ADC_ISR_ADRDY)) {;}    // wait for ADC Ready flag
 8000274:	bf00      	nop
 8000276:	4b2e      	ldr	r3, [pc, #184]	@ (8000330 <ADC_init+0x144>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <ADC_init+0x8a>
ADC1->ISR |= (ADC_ISR_ADRDY);              // set to clr ADC Ready flag
 8000282:	4b2b      	ldr	r3, [pc, #172]	@ (8000330 <ADC_init+0x144>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a2a      	ldr	r2, [pc, #168]	@ (8000330 <ADC_init+0x144>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6013      	str	r3, [r2, #0]
// configure ADC sampling & sequencing
ADC1->SQR1  |= (5 << ADC_SQR1_SQ1_Pos);    // sequence = 1 conv., ch 5
 800028e:	4b28      	ldr	r3, [pc, #160]	@ (8000330 <ADC_init+0x144>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000292:	4a27      	ldr	r2, [pc, #156]	@ (8000330 <ADC_init+0x144>)
 8000294:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8000298:	6313      	str	r3, [r2, #48]	@ 0x30
ADC1->SMPR1 |= (0x7 << ADC_SMPR1_SMP5_Pos);  // ch 5 sample time = 640.5 clocks
 800029a:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <ADC_init+0x144>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a24      	ldr	r2, [pc, #144]	@ (8000330 <ADC_init+0x144>)
 80002a0:	f443 3360 	orr.w	r3, r3, #229376	@ 0x38000
 80002a4:	6153      	str	r3, [r2, #20]
ADC1->CFGR  &= ~( ADC_CFGR_CONT  |         // single conversion mode
 80002a6:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <ADC_init+0x144>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <ADC_init+0x144>)
 80002ac:	f423 5330 	bic.w	r3, r3, #11264	@ 0x2c00
 80002b0:	f023 0318 	bic.w	r3, r3, #24
 80002b4:	60d3      	str	r3, [r2, #12]
                  ADC_CFGR_EXTEN |         // h/w trig disabled for s/w trig
                  ADC_CFGR_RES   );        // 12-bit resolution
// configure & enable ADC interrupt
ADC1->IER |= ADC_IER_EOCIE;                // enable end-of-conv interrupt
 80002b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <ADC_init+0x144>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000330 <ADC_init+0x144>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6053      	str	r3, [r2, #4]
ADC1->ISR |= ADC_ISR_EOC;                  // set to clear EOC flag
 80002c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <ADC_init+0x144>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000330 <ADC_init+0x144>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6013      	str	r3, [r2, #0]
NVIC->ISER[0] = (1<<(ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 80002ce:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <ADC_init+0x148>)
 80002d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80002d4:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002d6:	b662      	cpsie	i
}
 80002d8:	bf00      	nop
__enable_irq();                            // enable global interrupts
// configure GPIO pin PA0
RCC->AHB2ENR  |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
 80002da:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <ADC_init+0x13c>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <ADC_init+0x13c>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL0); 			// clear alt. function select
 80002e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f0:	f023 030f 	bic.w	r3, r3, #15
 80002f4:	6213      	str	r3, [r2, #32]
GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL0_Pos); 	// choose AF 7 (PA0=ADC1_IN5)
 80002f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000300:	f043 0307 	orr.w	r3, r3, #7
 8000304:	6213      	str	r3, [r2, #32]
GPIOA->MODER  |= (GPIO_MODER_MODE0);       // analog mode for PA0 (set MODER last)
 8000306:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000310:	f043 0303 	orr.w	r3, r3, #3
 8000314:	6013      	str	r3, [r2, #0]
ADC1->CR |= ADC_CR_ADSTART;
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <ADC_init+0x144>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <ADC_init+0x144>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	6093      	str	r3, [r2, #8]
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	50040300 	.word	0x50040300
 8000330:	50040000 	.word	0x50040000
 8000334:	e000e100 	.word	0xe000e100

08000338 <ADC1_2_IRQHandler>:


void ADC1_2_IRQHandler(void){
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
	if(ADC1->ISR & ADC_ISR_EOC){
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <ADC1_2_IRQHandler+0x6c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0304 	and.w	r3, r3, #4
 8000346:	2b00      	cmp	r3, #0
 8000348:	d026      	beq.n	8000398 <ADC1_2_IRQHandler+0x60>
		uint16_t adcData = ADC1->DR;
 800034a:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <ADC1_2_IRQHandler+0x6c>)
 800034c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034e:	80fb      	strh	r3, [r7, #6]
		if(ADC_SampleCount <= 19){						//if array not full
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <ADC1_2_IRQHandler+0x70>)
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	b29b      	uxth	r3, r3
 8000356:	2b13      	cmp	r3, #19
 8000358:	d815      	bhi.n	8000386 <ADC1_2_IRQHandler+0x4e>
			ADC_Samples [ADC_SampleCount] = adcData;	//fill array
 800035a:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <ADC1_2_IRQHandler+0x70>)
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	b29b      	uxth	r3, r3
 8000360:	4619      	mov	r1, r3
 8000362:	4a12      	ldr	r2, [pc, #72]	@ (80003ac <ADC1_2_IRQHandler+0x74>)
 8000364:	88fb      	ldrh	r3, [r7, #6]
 8000366:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			ADC_SampleCount++;							//incriment to next sample
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <ADC1_2_IRQHandler+0x70>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	b29b      	uxth	r3, r3
 8000370:	3301      	adds	r3, #1
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <ADC1_2_IRQHandler+0x70>)
 8000376:	801a      	strh	r2, [r3, #0]
			ADC1->CR |= ADC_CR_ADSTART;					//start next conv
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <ADC1_2_IRQHandler+0x6c>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	4a09      	ldr	r2, [pc, #36]	@ (80003a4 <ADC1_2_IRQHandler+0x6c>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6093      	str	r3, [r2, #8]
		else {
			ADC_SampleCount = 0;						//if array full reset index
			ADC1->ISR &= ~(ADC_ISR_EOC);				//clear flag
		}
	}
}
 8000384:	e008      	b.n	8000398 <ADC1_2_IRQHandler+0x60>
			ADC_SampleCount = 0;						//if array full reset index
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <ADC1_2_IRQHandler+0x70>)
 8000388:	2200      	movs	r2, #0
 800038a:	801a      	strh	r2, [r3, #0]
			ADC1->ISR &= ~(ADC_ISR_EOC);				//clear flag
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <ADC1_2_IRQHandler+0x6c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a04      	ldr	r2, [pc, #16]	@ (80003a4 <ADC1_2_IRQHandler+0x6c>)
 8000392:	f023 0304 	bic.w	r3, r3, #4
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	50040000 	.word	0x50040000
 80003a8:	20000050 	.word	0x20000050
 80003ac:	20000028 	.word	0x20000028

080003b0 <SysTick_Init>:
#include "delay.h"

// --------------------------------------------------- delay.c w/o #includes ---
// configure SysTick timer for use with delay_us().
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void) {
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     	// enable SysTick Timer
 80003b4:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <SysTick_Init+0x28>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a07      	ldr	r2, [pc, #28]	@ (80003d8 <SysTick_Init+0x28>)
 80003ba:	f043 0305 	orr.w	r3, r3, #5
 80003be:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <SysTick_Init+0x28>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <SysTick_Init+0x28>)
 80003c6:	f023 0302 	bic.w	r3, r3, #2
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e010 	.word	0xe000e010

080003dc <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80003e4:	4b11      	ldr	r3, [pc, #68]	@ (800042c <delay_us+0x50>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a11      	ldr	r2, [pc, #68]	@ (8000430 <delay_us+0x54>)
 80003ea:	fba2 2303 	umull	r2, r3, r2, r3
 80003ee:	0c9b      	lsrs	r3, r3, #18
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	fb02 f303 	mul.w	r3, r2, r3
 80003f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000434 <delay_us+0x58>)
 80003f8:	3b01      	subs	r3, #1
 80003fa:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 80003fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <delay_us+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <delay_us+0x58>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0b      	ldr	r2, [pc, #44]	@ (8000434 <delay_us+0x58>)
 8000408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800040c:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800040e:	bf00      	nop
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <delay_us+0x58>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f9      	beq.n	8000410 <delay_us+0x34>
}
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	431bde83 	.word	0x431bde83
 8000434:	e000e010 	.word	0xe000e010

08000438 <main>:

volatile uint16_t ADC_Samples [20];
volatile uint16_t ADC_SampleCount;

int main(void)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
	//Initialize clock
	HAL_Init();
 800043e:	f000 fd12 	bl	8000e66 <HAL_Init>
	SystemClock_Config();
 8000442:	f000 fb77 	bl	8000b34 <SystemClock_Config>
	SysTick_Init();
 8000446:	f7ff ffb3 	bl	80003b0 <SysTick_Init>
	UART_Init();
 800044a:	f000 fc25 	bl	8000c98 <UART_Init>
	ADC_init();
 800044e:	f7ff fecd 	bl	80001ec <ADC_init>
	HomeScreen();
 8000452:	f000 f8a3 	bl	800059c <HomeScreen>
	Button_Config();
 8000456:	f000 fadf 	bl	8000a18 <Button_Config>
	Output_Config();
 800045a:	f000 faa1 	bl	80009a0 <Output_Config>
	uint16_t minVolt, maxVolt, avgVolt, current;

	while (1){
		if(!BUTTON_PRESS)		//if pushed
 800045e:	4b46      	ldr	r3, [pc, #280]	@ (8000578 <main+0x140>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d006      	beq.n	8000478 <main+0x40>
			GPIOC->BSRR |= (GPIO_PIN_0);	//turn on relay
 800046a:	4b43      	ldr	r3, [pc, #268]	@ (8000578 <main+0x140>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a42      	ldr	r2, [pc, #264]	@ (8000578 <main+0x140>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	e005      	b.n	8000484 <main+0x4c>
		else
			GPIOC->BRR |= (GPIO_PIN_0);
 8000478:	4b3f      	ldr	r3, [pc, #252]	@ (8000578 <main+0x140>)
 800047a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800047c:	4a3e      	ldr	r2, [pc, #248]	@ (8000578 <main+0x140>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6293      	str	r3, [r2, #40]	@ 0x28
		ADC1->CR |= ADC_CR_ADSTART; 	//start ADC
 8000484:	4b3d      	ldr	r3, [pc, #244]	@ (800057c <main+0x144>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a3c      	ldr	r2, [pc, #240]	@ (800057c <main+0x144>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6093      	str	r3, [r2, #8]
		while(ADC_SampleCount <= 19);	//wait for array to fill
 8000490:	bf00      	nop
 8000492:	4b3b      	ldr	r3, [pc, #236]	@ (8000580 <main+0x148>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	2b13      	cmp	r3, #19
 800049a:	d9fa      	bls.n	8000492 <main+0x5a>
		delay_us(500000);
 800049c:	4839      	ldr	r0, [pc, #228]	@ (8000584 <main+0x14c>)
 800049e:	f7ff ff9d 	bl	80003dc <delay_us>
			sendHexData(minVal(ADC_Samples), maxVal(ADC_Samples), avgVal(ADC_Samples));
 80004a2:	4839      	ldr	r0, [pc, #228]	@ (8000588 <main+0x150>)
 80004a4:	f000 fafb 	bl	8000a9e <minVal>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461c      	mov	r4, r3
 80004ac:	4836      	ldr	r0, [pc, #216]	@ (8000588 <main+0x150>)
 80004ae:	f000 fad1 	bl	8000a54 <maxVal>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461d      	mov	r5, r3
 80004b6:	4834      	ldr	r0, [pc, #208]	@ (8000588 <main+0x150>)
 80004b8:	f000 fb16 	bl	8000ae8 <avgVal>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4629      	mov	r1, r5
 80004c2:	4620      	mov	r0, r4
 80004c4:	f000 f89c 	bl	8000600 <sendHexData>
				minVolt = (minVal(ADC_Samples)*10000 + 30662) / 12349;
 80004c8:	482f      	ldr	r0, [pc, #188]	@ (8000588 <main+0x150>)
 80004ca:	f000 fae8 	bl	8000a9e <minVal>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461a      	mov	r2, r3
 80004d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80004d6:	fb02 f303 	mul.w	r3, r2, r3
 80004da:	f503 43ef 	add.w	r3, r3, #30592	@ 0x7780
 80004de:	3346      	adds	r3, #70	@ 0x46
 80004e0:	4a2a      	ldr	r2, [pc, #168]	@ (800058c <main+0x154>)
 80004e2:	fb82 1203 	smull	r1, r2, r2, r3
 80004e6:	1312      	asrs	r2, r2, #12
 80004e8:	17db      	asrs	r3, r3, #31
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	80fb      	strh	r3, [r7, #6]
				maxVolt = (maxVal(ADC_Samples)*10000 + 30662) / 12349;
 80004ee:	4826      	ldr	r0, [pc, #152]	@ (8000588 <main+0x150>)
 80004f0:	f000 fab0 	bl	8000a54 <maxVal>
 80004f4:	4603      	mov	r3, r0
 80004f6:	461a      	mov	r2, r3
 80004f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	f503 43ef 	add.w	r3, r3, #30592	@ 0x7780
 8000504:	3346      	adds	r3, #70	@ 0x46
 8000506:	4a21      	ldr	r2, [pc, #132]	@ (800058c <main+0x154>)
 8000508:	fb82 1203 	smull	r1, r2, r2, r3
 800050c:	1312      	asrs	r2, r2, #12
 800050e:	17db      	asrs	r3, r3, #31
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	80bb      	strh	r3, [r7, #4]
				avgVolt = (avgVal(ADC_Samples)*10000 + 30662) / 12349;
 8000514:	481c      	ldr	r0, [pc, #112]	@ (8000588 <main+0x150>)
 8000516:	f000 fae7 	bl	8000ae8 <avgVal>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000522:	fb02 f303 	mul.w	r3, r2, r3
 8000526:	f503 43ef 	add.w	r3, r3, #30592	@ 0x7780
 800052a:	3346      	adds	r3, #70	@ 0x46
 800052c:	4a17      	ldr	r2, [pc, #92]	@ (800058c <main+0x154>)
 800052e:	fb82 1203 	smull	r1, r2, r2, r3
 8000532:	1312      	asrs	r2, r2, #12
 8000534:	17db      	asrs	r3, r3, #31
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	807b      	strh	r3, [r7, #2]
			sendVoltData(minVolt, maxVolt, avgVolt);
 800053a:	887a      	ldrh	r2, [r7, #2]
 800053c:	88b9      	ldrh	r1, [r7, #4]
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f879 	bl	8000638 <sendVoltData>
				current = (1000*avgVolt*1000/RESISTOR - IBASE)/1000;	//(nV/mOhms - uA) --> mA
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	4a11      	ldr	r2, [pc, #68]	@ (8000590 <main+0x158>)
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <main+0x15c>)
 8000550:	fb82 1203 	smull	r1, r2, r2, r3
 8000554:	1312      	asrs	r2, r2, #12
 8000556:	17db      	asrs	r3, r3, #31
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	f2a3 4381 	subw	r3, r3, #1153	@ 0x481
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <main+0x160>)
 8000560:	fb82 1203 	smull	r1, r2, r2, r3
 8000564:	1192      	asrs	r2, r2, #6
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	803b      	strh	r3, [r7, #0]
			sendCurrentData(current);
 800056c:	883b      	ldrh	r3, [r7, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f87e 	bl	8000670 <sendCurrentData>
		if(!BUTTON_PRESS)		//if pushed
 8000574:	e773      	b.n	800045e <main+0x26>
 8000576:	bf00      	nop
 8000578:	48000800 	.word	0x48000800
 800057c:	50040000 	.word	0x50040000
 8000580:	20000050 	.word	0x20000050
 8000584:	0007a120 	.word	0x0007a120
 8000588:	20000028 	.word	0x20000028
 800058c:	54e96cb1 	.word	0x54e96cb1
 8000590:	000f4240 	.word	0x000f4240
 8000594:	67af9a57 	.word	0x67af9a57
 8000598:	10624dd3 	.word	0x10624dd3

0800059c <HomeScreen>:
	}
}

//--------------------------- Screen ---------------------------------------

void HomeScreen(void){
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b08c      	sub	sp, #48	@ 0x30
 80005a0:	af00      	add	r7, sp, #0
	char *homescreen[] = {
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <HomeScreen+0x60>)
 80005a4:	1d3c      	adds	r4, r7, #4
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b4:	e884 0003 	stmia.w	r4, {r0, r1}
			"MIN  0000  0.000 V \e[5;5H",
			"MAX  0000  0.000 V \e[6;5H",
			"AVG  0000  0.000 V \e[7;5H",
			"coil current = 0.000 A",
			NULL};
	for(uint8_t idx = 0; homescreen[idx] != NULL; idx++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005be:	e00e      	b.n	80005de <HomeScreen+0x42>
		LPUART_Print(homescreen[idx]);
 80005c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	3330      	adds	r3, #48	@ 0x30
 80005c8:	443b      	add	r3, r7
 80005ca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fbe2 	bl	8000d98 <LPUART_Print>
	for(uint8_t idx = 0; homescreen[idx] != NULL; idx++)
 80005d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005d8:	3301      	adds	r3, #1
 80005da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80005de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	3330      	adds	r3, #48	@ 0x30
 80005e6:	443b      	add	r3, r7
 80005e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1e7      	bne.n	80005c0 <HomeScreen+0x24>
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	@ 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bdb0      	pop	{r4, r5, r7, pc}
 80005fa:	bf00      	nop
 80005fc:	08001f04 	.word	0x08001f04

08000600 <sendHexData>:


void sendHexData(uint16_t minVal, uint16_t maxVal, uint16_t avgVal){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	460b      	mov	r3, r1
 800060c:	80bb      	strh	r3, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	807b      	strh	r3, [r7, #2]
	parseSendHex(minVal, 1);
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f8a2 	bl	8000760 <parseSendHex>
	parseSendHex(maxVal, 2);
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f89d 	bl	8000760 <parseSendHex>
	parseSendHex(avgVal, 3);
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f898 	bl	8000760 <parseSendHex>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <sendVoltData>:
void sendVoltData(uint16_t minVal, uint16_t maxVal, uint16_t avgVal){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	460b      	mov	r3, r1
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	807b      	strh	r3, [r7, #2]
	parseSendVolt(minVal, 1);
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f914 	bl	800087c <parseSendVolt>
	parseSendVolt(maxVal, 2);
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f90f 	bl	800087c <parseSendVolt>
	parseSendVolt(avgVal, 3);
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	2103      	movs	r1, #3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f90a 	bl	800087c <parseSendVolt>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <sendCurrentData>:
void sendCurrentData(uint16_t value){
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
	uint8_t valTho = (value/1000);
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4a32      	ldr	r2, [pc, #200]	@ (8000748 <sendCurrentData+0xd8>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	099b      	lsrs	r3, r3, #6
 8000684:	b29b      	uxth	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]
	uint8_t valHun = (value - valTho*1000)/100;
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	492f      	ldr	r1, [pc, #188]	@ (800074c <sendCurrentData+0xdc>)
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	4413      	add	r3, r2
 8000694:	4a2e      	ldr	r2, [pc, #184]	@ (8000750 <sendCurrentData+0xe0>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1152      	asrs	r2, r2, #5
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	73bb      	strb	r3, [r7, #14]
	uint8_t valTen = (value - valTho*1000 - valHun*100)/10;
 80006a2:	88fa      	ldrh	r2, [r7, #6]
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	4929      	ldr	r1, [pc, #164]	@ (800074c <sendCurrentData+0xdc>)
 80006a8:	fb01 f303 	mul.w	r3, r1, r3
 80006ac:	441a      	add	r2, r3
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80006b4:	fb01 f303 	mul.w	r3, r1, r3
 80006b8:	4413      	add	r3, r2
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <sendCurrentData+0xe4>)
 80006bc:	fb82 1203 	smull	r1, r2, r2, r3
 80006c0:	1092      	asrs	r2, r2, #2
 80006c2:	17db      	asrs	r3, r3, #31
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	737b      	strb	r3, [r7, #13]
	uint8_t valOne = (value - valTho*1000 - valHun*100 - valTen*10);
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	4619      	mov	r1, r3
 80006d0:	0089      	lsls	r1, r1, #2
 80006d2:	4419      	add	r1, r3
 80006d4:	00c9      	lsls	r1, r1, #3
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	b2d9      	uxtb	r1, r3
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4618      	mov	r0, r3
 80006e0:	0040      	lsls	r0, r0, #1
 80006e2:	4403      	add	r3, r0
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	440b      	add	r3, r1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4413      	add	r3, r2
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	7b7b      	ldrb	r3, [r7, #13]
 80006f2:	4619      	mov	r1, r3
 80006f4:	0149      	lsls	r1, r1, #5
 80006f6:	1ac9      	subs	r1, r1, r3
 80006f8:	0089      	lsls	r1, r1, #2
 80006fa:	1acb      	subs	r3, r1, r3
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4413      	add	r3, r2
 8000702:	733b      	strb	r3, [r7, #12]
	LPUART_Print("\e[7;20H");
 8000704:	4814      	ldr	r0, [pc, #80]	@ (8000758 <sendCurrentData+0xe8>)
 8000706:	f000 fb47 	bl	8000d98 <LPUART_Print>
	LPUART_Print_Char(valTho+0x30);		//send A.BDC
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3330      	adds	r3, #48	@ 0x30
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fb67 	bl	8000de4 <LPUART_Print_Char>
		LPUART_Print("\e[C");			//skip period
 8000716:	4811      	ldr	r0, [pc, #68]	@ (800075c <sendCurrentData+0xec>)
 8000718:	f000 fb3e 	bl	8000d98 <LPUART_Print>
	LPUART_Print_Char(valHun+0x30);
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	3330      	adds	r3, #48	@ 0x30
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fb5e 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valTen+0x30);
 8000728:	7b7b      	ldrb	r3, [r7, #13]
 800072a:	3330      	adds	r3, #48	@ 0x30
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fb58 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valOne+0x30);
 8000734:	7b3b      	ldrb	r3, [r7, #12]
 8000736:	3330      	adds	r3, #48	@ 0x30
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fb52 	bl	8000de4 <LPUART_Print_Char>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	10624dd3 	.word	0x10624dd3
 800074c:	fffffc18 	.word	0xfffffc18
 8000750:	51eb851f 	.word	0x51eb851f
 8000754:	66666667 	.word	0x66666667
 8000758:	08001f2c 	.word	0x08001f2c
 800075c:	08001f34 	.word	0x08001f34

08000760 <parseSendHex>:

void parseSendHex(uint16_t value, uint8_t row){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	717b      	strb	r3, [r7, #5]
	uint8_t valTho = (value/1000);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	4a3b      	ldr	r2, [pc, #236]	@ (8000860 <parseSendHex+0x100>)
 8000774:	fba2 2303 	umull	r2, r3, r2, r3
 8000778:	099b      	lsrs	r3, r3, #6
 800077a:	b29b      	uxth	r3, r3
 800077c:	73fb      	strb	r3, [r7, #15]
	uint8_t valHun = (value - valTho*1000)/100;
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	4938      	ldr	r1, [pc, #224]	@ (8000864 <parseSendHex+0x104>)
 8000784:	fb01 f303 	mul.w	r3, r1, r3
 8000788:	4413      	add	r3, r2
 800078a:	4a37      	ldr	r2, [pc, #220]	@ (8000868 <parseSendHex+0x108>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1152      	asrs	r2, r2, #5
 8000792:	17db      	asrs	r3, r3, #31
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	73bb      	strb	r3, [r7, #14]
	uint8_t valTen = (value - valTho*1000 - valHun*100)/10;
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4931      	ldr	r1, [pc, #196]	@ (8000864 <parseSendHex+0x104>)
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	441a      	add	r2, r3
 80007a4:	7bbb      	ldrb	r3, [r7, #14]
 80007a6:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80007aa:	fb01 f303 	mul.w	r3, r1, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	4a2e      	ldr	r2, [pc, #184]	@ (800086c <parseSendHex+0x10c>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1092      	asrs	r2, r2, #2
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	737b      	strb	r3, [r7, #13]
	uint8_t valOne = (value - valTho*1000 - valHun*100 - valTen*10);
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	4619      	mov	r1, r3
 80007c6:	0089      	lsls	r1, r1, #2
 80007c8:	4419      	add	r1, r3
 80007ca:	00c9      	lsls	r1, r1, #3
 80007cc:	1acb      	subs	r3, r1, r3
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	b2d9      	uxtb	r1, r3
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	4618      	mov	r0, r3
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	4403      	add	r3, r0
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	440b      	add	r3, r1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4413      	add	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	7b7b      	ldrb	r3, [r7, #13]
 80007e8:	4619      	mov	r1, r3
 80007ea:	0149      	lsls	r1, r1, #5
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	0089      	lsls	r1, r1, #2
 80007f0:	1acb      	subs	r3, r1, r3
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	733b      	strb	r3, [r7, #12]
	switch (row){						//pick max/min/avg row
 80007fa:	797b      	ldrb	r3, [r7, #5]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d00e      	beq.n	800081e <parseSendHex+0xbe>
 8000800:	2b03      	cmp	r3, #3
 8000802:	dc10      	bgt.n	8000826 <parseSendHex+0xc6>
 8000804:	2b01      	cmp	r3, #1
 8000806:	d002      	beq.n	800080e <parseSendHex+0xae>
 8000808:	2b02      	cmp	r3, #2
 800080a:	d004      	beq.n	8000816 <parseSendHex+0xb6>
 800080c:	e00b      	b.n	8000826 <parseSendHex+0xc6>
	case 1:
		LPUART_Print("\e[4;10H");
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <parseSendHex+0x110>)
 8000810:	f000 fac2 	bl	8000d98 <LPUART_Print>
	break;
 8000814:	e007      	b.n	8000826 <parseSendHex+0xc6>
	case 2:
		LPUART_Print("\e[5;10H");
 8000816:	4817      	ldr	r0, [pc, #92]	@ (8000874 <parseSendHex+0x114>)
 8000818:	f000 fabe 	bl	8000d98 <LPUART_Print>
	break;
 800081c:	e003      	b.n	8000826 <parseSendHex+0xc6>
	case 3:
		LPUART_Print("\e[6;10H");
 800081e:	4816      	ldr	r0, [pc, #88]	@ (8000878 <parseSendHex+0x118>)
 8000820:	f000 faba 	bl	8000d98 <LPUART_Print>
	break;
 8000824:	bf00      	nop
	}
	LPUART_Print_Char(valTho+0x30);		//send ABCD
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3330      	adds	r3, #48	@ 0x30
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fad9 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valHun+0x30);
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	3330      	adds	r3, #48	@ 0x30
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fad3 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valTen+0x30);
 800083e:	7b7b      	ldrb	r3, [r7, #13]
 8000840:	3330      	adds	r3, #48	@ 0x30
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 facd 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valOne+0x30);
 800084a:	7b3b      	ldrb	r3, [r7, #12]
 800084c:	3330      	adds	r3, #48	@ 0x30
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fac7 	bl	8000de4 <LPUART_Print_Char>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	10624dd3 	.word	0x10624dd3
 8000864:	fffffc18 	.word	0xfffffc18
 8000868:	51eb851f 	.word	0x51eb851f
 800086c:	66666667 	.word	0x66666667
 8000870:	08001f38 	.word	0x08001f38
 8000874:	08001f40 	.word	0x08001f40
 8000878:	08001f48 	.word	0x08001f48

0800087c <parseSendVolt>:

void parseSendVolt(uint16_t value, uint8_t row){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	717b      	strb	r3, [r7, #5]
	uint8_t valTho = (value/1000);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4a3c      	ldr	r2, [pc, #240]	@ (8000980 <parseSendVolt+0x104>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	099b      	lsrs	r3, r3, #6
 8000896:	b29b      	uxth	r3, r3
 8000898:	73fb      	strb	r3, [r7, #15]
	uint8_t valHun = (value - valTho*1000)/100;
 800089a:	88fa      	ldrh	r2, [r7, #6]
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	4939      	ldr	r1, [pc, #228]	@ (8000984 <parseSendVolt+0x108>)
 80008a0:	fb01 f303 	mul.w	r3, r1, r3
 80008a4:	4413      	add	r3, r2
 80008a6:	4a38      	ldr	r2, [pc, #224]	@ (8000988 <parseSendVolt+0x10c>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	1152      	asrs	r2, r2, #5
 80008ae:	17db      	asrs	r3, r3, #31
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	73bb      	strb	r3, [r7, #14]
	uint8_t valTen = (value - valTho*1000 - valHun*100)/10;
 80008b4:	88fa      	ldrh	r2, [r7, #6]
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	4932      	ldr	r1, [pc, #200]	@ (8000984 <parseSendVolt+0x108>)
 80008ba:	fb01 f303 	mul.w	r3, r1, r3
 80008be:	441a      	add	r2, r3
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	4a2f      	ldr	r2, [pc, #188]	@ (800098c <parseSendVolt+0x110>)
 80008ce:	fb82 1203 	smull	r1, r2, r2, r3
 80008d2:	1092      	asrs	r2, r2, #2
 80008d4:	17db      	asrs	r3, r3, #31
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	737b      	strb	r3, [r7, #13]
	uint8_t valOne = (value - valTho*1000 - valHun*100 - valTen*10);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	4619      	mov	r1, r3
 80008e2:	0089      	lsls	r1, r1, #2
 80008e4:	4419      	add	r1, r3
 80008e6:	00c9      	lsls	r1, r1, #3
 80008e8:	1acb      	subs	r3, r1, r3
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	b2d9      	uxtb	r1, r3
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	4618      	mov	r0, r3
 80008f2:	0040      	lsls	r0, r0, #1
 80008f4:	4403      	add	r3, r0
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	440b      	add	r3, r1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	4619      	mov	r1, r3
 8000906:	0149      	lsls	r1, r1, #5
 8000908:	1ac9      	subs	r1, r1, r3
 800090a:	0089      	lsls	r1, r1, #2
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4413      	add	r3, r2
 8000914:	733b      	strb	r3, [r7, #12]
	switch (row){						//pick max/min/avg row
 8000916:	797b      	ldrb	r3, [r7, #5]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d00e      	beq.n	800093a <parseSendVolt+0xbe>
 800091c:	2b03      	cmp	r3, #3
 800091e:	dc10      	bgt.n	8000942 <parseSendVolt+0xc6>
 8000920:	2b01      	cmp	r3, #1
 8000922:	d002      	beq.n	800092a <parseSendVolt+0xae>
 8000924:	2b02      	cmp	r3, #2
 8000926:	d004      	beq.n	8000932 <parseSendVolt+0xb6>
 8000928:	e00b      	b.n	8000942 <parseSendVolt+0xc6>
	case 1:
		LPUART_Print("\e[4;16H");
 800092a:	4819      	ldr	r0, [pc, #100]	@ (8000990 <parseSendVolt+0x114>)
 800092c:	f000 fa34 	bl	8000d98 <LPUART_Print>
	break;
 8000930:	e007      	b.n	8000942 <parseSendVolt+0xc6>
	case 2:
		LPUART_Print("\e[5;16H");
 8000932:	4818      	ldr	r0, [pc, #96]	@ (8000994 <parseSendVolt+0x118>)
 8000934:	f000 fa30 	bl	8000d98 <LPUART_Print>
	break;
 8000938:	e003      	b.n	8000942 <parseSendVolt+0xc6>
	case 3:
		LPUART_Print("\e[6;16H");
 800093a:	4817      	ldr	r0, [pc, #92]	@ (8000998 <parseSendVolt+0x11c>)
 800093c:	f000 fa2c 	bl	8000d98 <LPUART_Print>
	break;
 8000940:	bf00      	nop
	}
	LPUART_Print_Char(valTho+0x30);		//send A.BDC
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	3330      	adds	r3, #48	@ 0x30
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fa4b 	bl	8000de4 <LPUART_Print_Char>
		LPUART_Print("\e[C");			//skip period
 800094e:	4813      	ldr	r0, [pc, #76]	@ (800099c <parseSendVolt+0x120>)
 8000950:	f000 fa22 	bl	8000d98 <LPUART_Print>
	LPUART_Print_Char(valHun+0x30);
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	3330      	adds	r3, #48	@ 0x30
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fa42 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valTen+0x30);
 8000960:	7b7b      	ldrb	r3, [r7, #13]
 8000962:	3330      	adds	r3, #48	@ 0x30
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fa3c 	bl	8000de4 <LPUART_Print_Char>
	LPUART_Print_Char(valOne+0x30);
 800096c:	7b3b      	ldrb	r3, [r7, #12]
 800096e:	3330      	adds	r3, #48	@ 0x30
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fa36 	bl	8000de4 <LPUART_Print_Char>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	10624dd3 	.word	0x10624dd3
 8000984:	fffffc18 	.word	0xfffffc18
 8000988:	51eb851f 	.word	0x51eb851f
 800098c:	66666667 	.word	0x66666667
 8000990:	08001f50 	.word	0x08001f50
 8000994:	08001f58 	.word	0x08001f58
 8000998:	08001f60 	.word	0x08001f60
 800099c:	08001f34 	.word	0x08001f34

080009a0 <Output_Config>:
  LED_PORT->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED14_Pos);
  LED_PORT->BRR |= (GPIO_PIN_14);
}

void Output_Config(void)
{		// configure GPIO pin PB14 for:
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	  	// output mode, push-pull, pull down, high speed
  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <Output_Config+0x70>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a8:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <Output_Config+0x70>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  GPIOC->MODER   &= ~(GPIO_MODER_MODE0);
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <Output_Config+0x74>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <Output_Config+0x74>)
 80009b6:	f023 0303 	bic.w	r3, r3, #3
 80009ba:	6013      	str	r3, [r2, #0]
  GPIOC->MODER   |=  (GPIO_MODER_MODE0_0);
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <Output_Config+0x74>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <Output_Config+0x74>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]
  GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0);
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <Output_Config+0x74>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <Output_Config+0x74>)
 80009ce:	f023 0301 	bic.w	r3, r3, #1
 80009d2:	6053      	str	r3, [r2, #4]
  GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0);
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <Output_Config+0x74>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <Output_Config+0x74>)
 80009da:	f023 0303 	bic.w	r3, r3, #3
 80009de:	60d3      	str	r3, [r2, #12]
  GPIOC->PUPDR   |= (GPIO_PUPDR_PUPD0_1);
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <Output_Config+0x74>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <Output_Config+0x74>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	60d3      	str	r3, [r2, #12]
  GPIOC->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED0_Pos);
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <Output_Config+0x74>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <Output_Config+0x74>)
 80009f2:	f043 0303 	orr.w	r3, r3, #3
 80009f6:	6093      	str	r3, [r2, #8]
  GPIOC->BRR |= (GPIO_PIN_0);
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <Output_Config+0x74>)
 80009fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fc:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <Output_Config+0x74>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000800 	.word	0x48000800

08000a18 <Button_Config>:

void Button_Config(void)
{		// configure GPIO pin PC13 for:
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	  	// Button pin initialize - Input, on board PU
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <Button_Config+0x34>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <Button_Config+0x34>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
	BUTTON_PORT->MODER   &= ~(GPIO_MODER_MODE13);
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <Button_Config+0x38>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <Button_Config+0x38>)
 8000a2e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000a32:	6013      	str	r3, [r2, #0]
	BUTTON_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD13);
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <Button_Config+0x38>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <Button_Config+0x38>)
 8000a3a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000800 	.word	0x48000800

08000a54 <maxVal>:

//--------------------------- MATH -----------------------------------------
uint16_t maxVal (uint16_t* nums ){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint16_t max = nums[0];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < sizeof(nums)/sizeof(nums[0]); index++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	e010      	b.n	8000a8a <maxVal+0x36>
		 if (nums[index] > max)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	89fa      	ldrh	r2, [r7, #14]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d205      	bcs.n	8000a84 <maxVal+0x30>
		     max = nums[index];
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < sizeof(nums)/sizeof(nums[0]); index++)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	3301      	adds	r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d9eb      	bls.n	8000a68 <maxVal+0x14>
	return max;
 8000a90:	89fb      	ldrh	r3, [r7, #14]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <minVal>:

uint16_t minVal (uint16_t* nums ){
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	uint16_t min = nums[0];
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < sizeof(nums)/sizeof(nums[0]); index++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	e010      	b.n	8000ad4 <minVal+0x36>
		 if (nums[index] < min)
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d905      	bls.n	8000ace <minVal+0x30>
		     min = nums[index];
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < sizeof(nums)/sizeof(nums[0]); index++)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d9eb      	bls.n	8000ab2 <minVal+0x14>
	return min;
 8000ada:	89fb      	ldrh	r3, [r7, #14]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <avgVal>:

uint16_t avgVal (uint16_t* nums ){
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	uint16_t avg = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	82fb      	strh	r3, [r7, #22]
	uint16_t arraySize = sizeof(nums)/sizeof(nums[0]);
 8000af4:	2302      	movs	r3, #2
 8000af6:	81fb      	strh	r3, [r7, #14]
	for (int index = 0; index < arraySize; index++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	e00a      	b.n	8000b14 <avgVal+0x2c>
		avg = avg + nums[index];
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	881a      	ldrh	r2, [r3, #0]
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	82fb      	strh	r3, [r7, #22]
	for (int index = 0; index < arraySize; index++)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	3301      	adds	r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <avgVal+0x16>
	avg = avg/arraySize;
 8000b1c:	8afa      	ldrh	r2, [r7, #22]
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b24:	82fb      	strh	r3, [r7, #22]
	return avg;
 8000b26:	8afb      	ldrh	r3, [r7, #22]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SystemClock_Config>:

//----------------------------- System --------------------------------------
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b096      	sub	sp, #88	@ 0x58
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	2244      	movs	r2, #68	@ 0x44
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f954 	bl	8001df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b5a:	f000 faed 	bl	8001138 <HAL_PWREx_ControlVoltageScaling>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b64:	f000 f82c 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b74:	2360      	movs	r3, #96	@ 0x60
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fb2f 	bl	80011e4 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 f818 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 ff35 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bb4:	f000 f804 	bl	8000bc0 <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3758      	adds	r7, #88	@ 0x58
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <Error_Handler>:

void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop

  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f951 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <UART_Init>:

#include "uart.h"


// -----------------------------------------------------------------------------
void UART_Init(void){
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

	//Power and Clock
	PWR->CR2 |= (PWR_CR2_IOSV);              // power avail on PG[15:2] (LPUART1)
 8000c9c:	4b39      	ldr	r3, [pc, #228]	@ (8000d84 <UART_Init+0xec>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	4a38      	ldr	r2, [pc, #224]	@ (8000d84 <UART_Init+0xec>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6053      	str	r3, [r2, #4]
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000ca8:	4b37      	ldr	r3, [pc, #220]	@ (8000d88 <UART_Init+0xf0>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cac:	4a36      	ldr	r2, [pc, #216]	@ (8000d88 <UART_Init+0xf0>)
 8000cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000cb4:	4b34      	ldr	r3, [pc, #208]	@ (8000d88 <UART_Init+0xf0>)
 8000cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cb8:	4a33      	ldr	r2, [pc, #204]	@ (8000d88 <UART_Init+0xf0>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	65d3      	str	r3, [r2, #92]	@ 0x5c
	//GPIO Ports - AF8, no PU/PD, fast (despite uart being slow)
	GPIOG->MODER   &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000cc0:	4b32      	ldr	r3, [pc, #200]	@ (8000d8c <UART_Init+0xf4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a31      	ldr	r2, [pc, #196]	@ (8000d8c <UART_Init+0xf4>)
 8000cc6:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000cca:	6013      	str	r3, [r2, #0]
	GPIOG->MODER   |=  (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <UART_Init+0xf4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8000d8c <UART_Init+0xf4>)
 8000cd2:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8000cd6:	6013      	str	r3, [r2, #0]
	GPIOG->OTYPER  &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <UART_Init+0xf4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d8c <UART_Init+0xf4>)
 8000cde:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000ce2:	6053      	str	r3, [r2, #4]
	GPIOG->PUPDR   &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8000ce4:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <UART_Init+0xf4>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	4a28      	ldr	r2, [pc, #160]	@ (8000d8c <UART_Init+0xf4>)
 8000cea:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000cee:	60d3      	str	r3, [r2, #12]
	GPIOG->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED7_Pos) | (3 << GPIO_OSPEEDR_OSPEED8_Pos));
 8000cf0:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <UART_Init+0xf4>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	4a25      	ldr	r2, [pc, #148]	@ (8000d8c <UART_Init+0xf4>)
 8000cf6:	f443 3370 	orr.w	r3, r3, #245760	@ 0x3c000
 8000cfa:	6093      	str	r3, [r2, #8]
	GPIOG->AFR[0] &= ~(0x000F << GPIO_AFRL_AFSEL7_Pos);
 8000cfc:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <UART_Init+0xf4>)
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	4a22      	ldr	r2, [pc, #136]	@ (8000d8c <UART_Init+0xf4>)
 8000d02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d06:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[0] |=  (0x0008 << GPIO_AFRL_AFSEL7_Pos);
 8000d08:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <UART_Init+0xf4>)
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d8c <UART_Init+0xf4>)
 8000d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d12:	6213      	str	r3, [r2, #32]
	GPIOG->AFR[1] &= ~(0x000F << GPIO_AFRH_AFSEL8_Pos);
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <UART_Init+0xf4>)
 8000d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d18:	4a1c      	ldr	r2, [pc, #112]	@ (8000d8c <UART_Init+0xf4>)
 8000d1a:	f023 030f 	bic.w	r3, r3, #15
 8000d1e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |=  (0x0008 << GPIO_AFRH_AFSEL8_Pos);
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <UART_Init+0xf4>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d24:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <UART_Init+0xf4>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6253      	str	r3, [r2, #36]	@ 0x24
	//LPUART
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <UART_Init+0xf8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <UART_Init+0xf8>)
 8000d32:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8000d36:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <UART_Init+0xf8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <UART_Init+0xf8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <UART_Init+0xf8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <UART_Init+0xf8>)
 8000d4a:	f043 030c 	orr.w	r3, r3, #12
 8000d4e:	6013      	str	r3, [r2, #0]
	LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <UART_Init+0xf8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <UART_Init+0xf8>)
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	6013      	str	r3, [r2, #0]
	LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <UART_Init+0xf8>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <UART_Init+0xf8>)
 8000d62:	f023 0320 	bic.w	r3, r3, #32
 8000d66:	61d3      	str	r3, [r2, #28]
	LPUART1->BRR = (BAUD_RATE);
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <UART_Init+0xf8>)
 8000d6a:	f242 22b9 	movw	r2, #8889	@ 0x22b9
 8000d6e:	60da      	str	r2, [r3, #12]
	/* USER: set baud rate register (LPUART1->BRR) */
	NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <UART_Init+0xfc>)
 8000d72:	2240      	movs	r2, #64	@ 0x40
 8000d74:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d76:	b662      	cpsie	i
}
 8000d78:	bf00      	nop
	__enable_irq();

}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40007000 	.word	0x40007000
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48001800 	.word	0x48001800
 8000d90:	40008000 	.word	0x40008000
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <LPUART_Print>:

void LPUART_Print( const char* message ) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
   uint16_t iStrIdx = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	81fb      	strh	r3, [r7, #14]
   while ( message[iStrIdx] != 0 ) {
 8000da4:	e00f      	b.n	8000dc6 <LPUART_Print+0x2e>
      while(!(LPUART1->ISR & USART_ISR_TXE)) // wait for empty xmit buffer
 8000da6:	bf00      	nop
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <LPUART_Print+0x48>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f9      	beq.n	8000da8 <LPUART_Print+0x10>
         ;
      LPUART1->TDR = message[iStrIdx];       // send this character
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <LPUART_Print+0x48>)
 8000dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
	iStrIdx++;                             // advance index to next char
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	81fb      	strh	r3, [r7, #14]
   while ( message[iStrIdx] != 0 ) {
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1e9      	bne.n	8000da6 <LPUART_Print+0xe>
   }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40008000 	.word	0x40008000

08000de4 <LPUART_Print_Char>:

void LPUART_Print_Char (uint8_t charRecv){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	while( !(LPUART1->ISR & USART_ISR_TXE) );// wait for empty TX buffer
 8000dee:	bf00      	nop
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <LPUART_Print_Char+0x2c>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f9      	beq.n	8000df0 <LPUART_Print_Char+0xc>
		LPUART1->TDR = charRecv;  // send char to terminal
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <LPUART_Print_Char+0x2c>)
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	b292      	uxth	r2, r2
 8000e02:	851a      	strh	r2, [r3, #40]	@ 0x28
		}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40008000 	.word	0x40008000

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff ff2c 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	@ (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	@ (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f000 ffdd 	bl	8001e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff faf7 	bl	8000438 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e58:	08001fb0 	.word	0x08001fb0
  ldr r2, =_sbss
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e60:	20000058 	.word	0x20000058

08000e64 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC3_IRQHandler>

08000e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f91f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f80e 	bl	8000e98 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e88:	f7ff fea0 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f91d 	bl	8001102 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f8f5 	bl	80010ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000054 	.word	0x20000054

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000054 	.word	0x20000054

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	@ 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	@ 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff47 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5c 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <HAL_PWREx_GetVoltageRange+0x18>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40007000 	.word	0x40007000

08001138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001146:	d130      	bne.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001154:	d038      	beq.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800115e:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001166:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2232      	movs	r2, #50	@ 0x32
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	0c9b      	lsrs	r3, r3, #18
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117c:	e002      	b.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b01      	subs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800118c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001190:	d102      	bne.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f2      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a4:	d110      	bne.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e00f      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011b6:	d007      	beq.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c0:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40007000 	.word	0x40007000
 80011dc:	20000000 	.word	0x20000000
 80011e0:	431bde83 	.word	0x431bde83

080011e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f000 bc08 	b.w	8001a08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f8:	4b96      	ldr	r3, [pc, #600]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001202:	4b94      	ldr	r3, [pc, #592]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80e4 	beq.w	80013e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <HAL_RCC_OscConfig+0x4c>
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b0c      	cmp	r3, #12
 8001224:	f040 808b 	bne.w	800133e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b01      	cmp	r3, #1
 800122c:	f040 8087 	bne.w	800133e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001230:	4b88      	ldr	r3, [pc, #544]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_OscConfig+0x64>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e3df      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	4b81      	ldr	r3, [pc, #516]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <HAL_RCC_OscConfig+0x7e>
 8001258:	4b7e      	ldr	r3, [pc, #504]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001260:	e005      	b.n	800126e <HAL_RCC_OscConfig+0x8a>
 8001262:	4b7c      	ldr	r3, [pc, #496]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800126e:	4293      	cmp	r3, r2
 8001270:	d223      	bcs.n	80012ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fd5a 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e3c0      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001286:	4b73      	ldr	r3, [pc, #460]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a72      	ldr	r2, [pc, #456]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b70      	ldr	r3, [pc, #448]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	496d      	ldr	r1, [pc, #436]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	4968      	ldr	r1, [pc, #416]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	e025      	b.n	8001306 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ba:	4b66      	ldr	r3, [pc, #408]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a65      	ldr	r2, [pc, #404]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b63      	ldr	r3, [pc, #396]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4960      	ldr	r1, [pc, #384]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	495b      	ldr	r1, [pc, #364]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fd1a 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e380      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001306:	f000 fc87 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 800130a:	4602      	mov	r2, r0
 800130c:	4b51      	ldr	r3, [pc, #324]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	4950      	ldr	r1, [pc, #320]	@ (8001458 <HAL_RCC_OscConfig+0x274>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a4e      	ldr	r2, [pc, #312]	@ (800145c <HAL_RCC_OscConfig+0x278>)
 8001324:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001326:	4b4e      	ldr	r3, [pc, #312]	@ (8001460 <HAL_RCC_OscConfig+0x27c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fdb4 	bl	8000e98 <HAL_InitTick>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d052      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	e364      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d032      	beq.n	80013ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001346:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a42      	ldr	r2, [pc, #264]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001352:	f7ff fdf1 	bl	8000f38 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800135a:	f7ff fded 	bl	8000f38 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e34d      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136c:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a35      	ldr	r2, [pc, #212]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b33      	ldr	r3, [pc, #204]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4930      	ldr	r1, [pc, #192]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001396:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	492b      	ldr	r1, [pc, #172]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
 80013aa:	e01a      	b.n	80013e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a28      	ldr	r2, [pc, #160]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fdbe 	bl	8000f38 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c0:	f7ff fdba 	bl	8000f38 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e31a      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d2:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1dc>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d073      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x21c>
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d10e      	bne.n	8001418 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d10b      	bne.n	8001418 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d063      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d15f      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e2f7      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x24c>
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e025      	b.n	800147c <HAL_RCC_OscConfig+0x298>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001438:	d114      	bne.n	8001464 <HAL_RCC_OscConfig+0x280>
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a02      	ldr	r2, [pc, #8]	@ (8001454 <HAL_RCC_OscConfig+0x270>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e013      	b.n	800147c <HAL_RCC_OscConfig+0x298>
 8001454:	40021000 	.word	0x40021000
 8001458:	08001f68 	.word	0x08001f68
 800145c:	20000000 	.word	0x20000000
 8001460:	20000004 	.word	0x20000004
 8001464:	4ba0      	ldr	r3, [pc, #640]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a9f      	ldr	r2, [pc, #636]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b9d      	ldr	r3, [pc, #628]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a9c      	ldr	r2, [pc, #624]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fd58 	bl	8000f38 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fd54 	bl	8000f38 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e2b4      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	4b92      	ldr	r3, [pc, #584]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x2a8>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fd44 	bl	8000f38 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fd40 	bl	8000f38 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	@ 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e2a0      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d0>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d060      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_OscConfig+0x310>
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d119      	bne.n	8001522 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d116      	bne.n	8001522 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f4:	4b7c      	ldr	r3, [pc, #496]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x328>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e27d      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b76      	ldr	r3, [pc, #472]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	4973      	ldr	r1, [pc, #460]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001520:	e040      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d023      	beq.n	8001572 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152a:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6e      	ldr	r2, [pc, #440]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fcff 	bl	8000f38 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fcfb 	bl	8000f38 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e25b      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	4b65      	ldr	r3, [pc, #404]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b62      	ldr	r3, [pc, #392]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	495f      	ldr	r1, [pc, #380]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e018      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b5d      	ldr	r3, [pc, #372]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a5c      	ldr	r2, [pc, #368]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fcdb 	bl	8000f38 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fcd7 	bl	8000f38 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e237      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	4b53      	ldr	r3, [pc, #332]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d03c      	beq.n	800162a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b8:	4b4b      	ldr	r3, [pc, #300]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015be:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fcb6 	bl	8000f38 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fcb2 	bl	8000f38 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e212      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e2:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ef      	beq.n	80015d0 <HAL_RCC_OscConfig+0x3ec>
 80015f0:	e01b      	b.n	800162a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	4a3b      	ldr	r2, [pc, #236]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fc99 	bl	8000f38 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fc95 	bl	8000f38 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1f5      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161c:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ef      	bne.n	800160a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80a6 	beq.w	8001784 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800163c:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10d      	bne.n	8001664 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	4a26      	ldr	r2, [pc, #152]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 800164e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6593      	str	r3, [r2, #88]	@ 0x58
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001660:	2301      	movs	r3, #1
 8001662:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d118      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167c:	f7ff fc5c 	bl	8000f38 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001684:	f7ff fc58 	bl	8000f38 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1b8      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_RCC_OscConfig+0x508>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <HAL_RCC_OscConfig+0x4d8>
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ba:	e029      	b.n	8001710 <HAL_RCC_OscConfig+0x52c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d115      	bne.n	80016f0 <HAL_RCC_OscConfig+0x50c>
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	4a03      	ldr	r2, [pc, #12]	@ (80016e8 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x52c>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a9c      	ldr	r2, [pc, #624]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	4b99      	ldr	r3, [pc, #612]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a98      	ldr	r2, [pc, #608]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d016      	beq.n	8001746 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fc0e 	bl	8000f38 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fc0a 	bl	8000f38 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e168      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001736:	4b8c      	ldr	r3, [pc, #560]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ed      	beq.n	8001720 <HAL_RCC_OscConfig+0x53c>
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fbf7 	bl	8000f38 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff fbf3 	bl	8000f38 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e151      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001764:	4b80      	ldr	r3, [pc, #512]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ed      	bne.n	800174e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b7b      	ldr	r3, [pc, #492]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	4a7a      	ldr	r2, [pc, #488]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03c      	beq.n	800180a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001798:	4b73      	ldr	r3, [pc, #460]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 800179a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800179e:	4a72      	ldr	r2, [pc, #456]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fbc6 	bl	8000f38 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b0:	f7ff fbc2 	bl	8000f38 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e122      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017c2:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80017c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ef      	beq.n	80017b0 <HAL_RCC_OscConfig+0x5cc>
 80017d0:	e01b      	b.n	800180a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017d2:	4b65      	ldr	r3, [pc, #404]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80017d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d8:	4a63      	ldr	r2, [pc, #396]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fba9 	bl	8000f38 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ea:	f7ff fba5 	bl	8000f38 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e105      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80017fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ef      	bne.n	80017ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80f9 	beq.w	8001a06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001818:	2b02      	cmp	r3, #2
 800181a:	f040 80cf 	bne.w	80019bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800181e:	4b52      	ldr	r3, [pc, #328]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0203 	and.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	429a      	cmp	r2, r3
 8001830:	d12c      	bne.n	800188c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	3b01      	subs	r3, #1
 800183e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d123      	bne.n	800188c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d11b      	bne.n	800188c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d113      	bne.n	800188c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d109      	bne.n	800188c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d071      	beq.n	8001970 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d068      	beq.n	8001964 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001892:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800189e:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0ac      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80018b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ba:	f7ff fb3d 	bl	8000f38 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fb39 	bl	8000f38 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e099      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <HAL_RCC_OscConfig+0x788>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018fa:	0212      	lsls	r2, r2, #8
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001902:	0852      	lsrs	r2, r2, #1
 8001904:	3a01      	subs	r2, #1
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800190e:	0852      	lsrs	r2, r2, #1
 8001910:	3a01      	subs	r2, #1
 8001912:	0652      	lsls	r2, r2, #25
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800191a:	06d2      	lsls	r2, r2, #27
 800191c:	430a      	orrs	r2, r1
 800191e:	4912      	ldr	r1, [pc, #72]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193c:	f7ff fafc 	bl	8000f38 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff faf8 	bl	8000f38 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e058      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <HAL_RCC_OscConfig+0x784>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001962:	e050      	b.n	8001a06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e04f      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
 8001968:	40021000 	.word	0x40021000
 800196c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d144      	bne.n	8001a06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a23      	ldr	r2, [pc, #140]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001994:	f7ff fad0 	bl	8000f38 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff facc 	bl	8000f38 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e02c      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x7b8>
 80019ba:	e024      	b.n	8001a06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d01f      	beq.n	8001a02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fab3 	bl	8000f38 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff faaf 	bl	8000f38 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e00f      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4905      	ldr	r1, [pc, #20]	@ (8001a10 <HAL_RCC_OscConfig+0x82c>)
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_RCC_OscConfig+0x830>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	feeefffc 	.word	0xfeeefffc

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0e7      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b75      	ldr	r3, [pc, #468]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b72      	ldr	r3, [pc, #456]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4970      	ldr	r1, [pc, #448]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cf      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d908      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b63      	ldr	r3, [pc, #396]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4960      	ldr	r1, [pc, #384]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04c      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0a6      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b54      	ldr	r3, [pc, #336]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e09a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ace:	4b4e      	ldr	r3, [pc, #312]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e08e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ade:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e086      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b46      	ldr	r3, [pc, #280]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4943      	ldr	r1, [pc, #268]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b00:	f7ff fa1a 	bl	8000f38 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fa16 	bl	8000f38 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e06e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d208      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	492b      	ldr	r1, [pc, #172]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d210      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6c:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	4923      	ldr	r1, [pc, #140]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7c:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e036      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4918      	ldr	r1, [pc, #96]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4910      	ldr	r1, [pc, #64]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bcc:	f000 f824 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	490b      	ldr	r1, [pc, #44]	@ (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_RCC_ClockConfig+0x1fc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f951 	bl	8000e98 <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08001f68 	.word	0x08001f68
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d121      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d11e      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c4c:	4b34      	ldr	r3, [pc, #208]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c58:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c74:	4a2b      	ldr	r2, [pc, #172]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c90:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e004      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d134      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d003      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cbc:	e005      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc6:	617b      	str	r3, [r7, #20]
      break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	617b      	str	r3, [r7, #20]
      break;
 8001cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0e5b      	lsrs	r3, r3, #25
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	3301      	adds	r3, #1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d10:	69bb      	ldr	r3, [r7, #24]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08001f78 	.word	0x08001f78
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff f9e8 	bl	800111c <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
 8001d4e:	e014      	b.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4a24      	ldr	r2, [pc, #144]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f9d8 	bl	800111c <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d72:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d80:	d10b      	bne.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b80      	cmp	r3, #128	@ 0x80
 8001d86:	d919      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d8c:	d902      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8e:	2302      	movs	r3, #2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e013      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e010      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	@ 0x80
 8001d9e:	d902      	bls.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e00a      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	@ 0x80
 8001daa:	d102      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e004      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b70      	cmp	r3, #112	@ 0x70
 8001db6:	d101      	bne.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	4909      	ldr	r1, [pc, #36]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <memset>:
 8001df0:	4402      	add	r2, r0
 8001df2:	4603      	mov	r3, r0
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d100      	bne.n	8001dfa <memset+0xa>
 8001df8:	4770      	bx	lr
 8001dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfe:	e7f9      	b.n	8001df4 <memset+0x4>

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	4d0d      	ldr	r5, [pc, #52]	@ (8001e38 <__libc_init_array+0x38>)
 8001e04:	4c0d      	ldr	r4, [pc, #52]	@ (8001e3c <__libc_init_array+0x3c>)
 8001e06:	1b64      	subs	r4, r4, r5
 8001e08:	10a4      	asrs	r4, r4, #2
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	42a6      	cmp	r6, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	4d0b      	ldr	r5, [pc, #44]	@ (8001e40 <__libc_init_array+0x40>)
 8001e12:	4c0c      	ldr	r4, [pc, #48]	@ (8001e44 <__libc_init_array+0x44>)
 8001e14:	f000 f818 	bl	8001e48 <_init>
 8001e18:	1b64      	subs	r4, r4, r5
 8001e1a:	10a4      	asrs	r4, r4, #2
 8001e1c:	2600      	movs	r6, #0
 8001e1e:	42a6      	cmp	r6, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e28:	4798      	blx	r3
 8001e2a:	3601      	adds	r6, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e32:	4798      	blx	r3
 8001e34:	3601      	adds	r6, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08001fa8 	.word	0x08001fa8
 8001e3c:	08001fa8 	.word	0x08001fa8
 8001e40:	08001fa8 	.word	0x08001fa8
 8001e44:	08001fac 	.word	0x08001fac

08001e48 <_init>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr

08001e54 <_fini>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	bf00      	nop
 8001e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5a:	bc08      	pop	{r3}
 8001e5c:	469e      	mov	lr, r3
 8001e5e:	4770      	bx	lr
