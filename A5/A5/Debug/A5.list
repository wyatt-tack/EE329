
A5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080018a4  080018a4  000028a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e4  080018e4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080018e4  080018e4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018e4  080018e4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e4  080018e4  000028e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018e8  080018e8  000028e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080018ec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080018f8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080018f8  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f84  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012df  00000000  00000000  00007fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  000092a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000045a  00000000  00000000  000098a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275cc  00000000  00000000  00009d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000718e  00000000  00000000  000312ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eec5e  00000000  00000000  0003845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001270ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001558  00000000  00000000  00127100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00128658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800188c 	.word	0x0800188c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800188c 	.word	0x0800188c

080001ec <SysTick_Init>:
#include "delay.h"

// --------------------------------------------------- delay.c w/o #includes ---
// configure SysTick timer for use with delay_us().
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     	// enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <Keypad_Config>:
  ******************************************************************************
  */
#include "keypad.h"

// ------------------------------------- modified from excerpt from keypad.c ---
void Keypad_Config(void){//must be manually changed if separate GPIO port is used
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
											   //set for port D as current config
	  //Port clock initialize
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 800021c:	4b1d      	ldr	r3, [pc, #116]	@ (8000294 <Keypad_Config+0x7c>)
 800021e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000220:	4a1c      	ldr	r2, [pc, #112]	@ (8000294 <Keypad_Config+0x7c>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  //Column pin initialize - Push Pull, no PU/PD, high speed
	  COL_PORT->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1
 8000228:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <Keypad_Config+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1a      	ldr	r2, [pc, #104]	@ (8000298 <Keypad_Config+0x80>)
 800022e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000232:	6013      	str	r3, [r2, #0]
			   	   	   		| GPIO_MODER_MODE2);
	  COL_PORT->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <Keypad_Config+0x80>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a17      	ldr	r2, [pc, #92]	@ (8000298 <Keypad_Config+0x80>)
 800023a:	f043 0315 	orr.w	r3, r3, #21
 800023e:	6013      	str	r3, [r2, #0]
	 	   	   				| GPIO_MODER_MODE2_0);
	  COL_PORT->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1
 8000240:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <Keypad_Config+0x80>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a14      	ldr	r2, [pc, #80]	@ (8000298 <Keypad_Config+0x80>)
 8000246:	f023 030f 	bic.w	r3, r3, #15
 800024a:	6053      	str	r3, [r2, #4]
			  	  	  	| GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
	  COL_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <Keypad_Config+0x80>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a11      	ldr	r2, [pc, #68]	@ (8000298 <Keypad_Config+0x80>)
 8000252:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000256:	60d3      	str	r3, [r2, #12]
			  	  	  	| GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
	  COL_PORT->OSPEEDR |=  ((GPIO_OSPEEDR_OSPEED0) |
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <Keypad_Config+0x80>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a0e      	ldr	r2, [pc, #56]	@ (8000298 <Keypad_Config+0x80>)
 800025e:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000262:	6093      	str	r3, [r2, #8]
	                      (GPIO_OSPEEDR_OSPEED1) |
	                      (GPIO_OSPEEDR_OSPEED2));
	  //Row pin initialize - Input, pull down
	  ROW_PORT->MODER   &= ~(GPIO_MODER_MODE3 | GPIO_MODER_MODE4
 8000264:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <Keypad_Config+0x80>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0b      	ldr	r2, [pc, #44]	@ (8000298 <Keypad_Config+0x80>)
 800026a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800026e:	6013      	str	r3, [r2, #0]
	  			   	   	 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6);
	  ROW_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD3 | GPIO_PUPDR_PUPD4
 8000270:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <Keypad_Config+0x80>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <Keypad_Config+0x80>)
 8000276:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800027a:	60d3      	str	r3, [r2, #12]
	  			  	  	| GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6);
	  ROW_PORT->PUPDR   |= (GPIO_PUPDR_PUPD3_1 | GPIO_PUPDR_PUPD4_1
 800027c:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <Keypad_Config+0x80>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a05      	ldr	r2, [pc, #20]	@ (8000298 <Keypad_Config+0x80>)
 8000282:	f443 532a 	orr.w	r3, r3, #10880	@ 0x2a80
 8000286:	60d3      	str	r3, [r2, #12]
	  			  	  	| GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1);
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	48000c00 	.word	0x48000c00

0800029c <Keypad_IsAnyKeyPressed>:

// -----------------------------------------------------------------------------
int Keypad_IsAnyKeyPressed(void) {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
// drive all COLUMNS HI; see if any ROWS are HI
// return true if a key is pressed, false if not
   COL_PORT->BSRR = COL_PINS;         	      // set all columns HI
 80002a2:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <Keypad_IsAnyKeyPressed+0x68>)
 80002a4:	2207      	movs	r2, #7
 80002a6:	619a      	str	r2, [r3, #24]
   for ( uint16_t idx=0; idx<SETTLE; idx++ )   	// let it settle
 80002a8:	2300      	movs	r3, #0
 80002aa:	80fb      	strh	r3, [r7, #6]
 80002ac:	e002      	b.n	80002b4 <Keypad_IsAnyKeyPressed+0x18>
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	3301      	adds	r3, #1
 80002b2:	80fb      	strh	r3, [r7, #6]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	f240 726b 	movw	r2, #1899	@ 0x76b
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d9f7      	bls.n	80002ae <Keypad_IsAnyKeyPressed+0x12>
      ;
   if ((ROW_PORT->IDR & ROW_PINS) != 0 ) {	// got a keypress!
 80002be:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <Keypad_IsAnyKeyPressed+0x68>)
 80002c0:	691b      	ldr	r3, [r3, #16]
 80002c2:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d014      	beq.n	80002f4 <Keypad_IsAnyKeyPressed+0x58>
	   for ( uint16_t idx=0; idx < SETTLE; idx++ ){
 80002ca:	2300      	movs	r3, #0
 80002cc:	80bb      	strh	r3, [r7, #4]
 80002ce:	e00a      	b.n	80002e6 <Keypad_IsAnyKeyPressed+0x4a>
		   if ((ROW_PORT->IDR & ROW_PINS) == 0 ) return( 0 );
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <Keypad_IsAnyKeyPressed+0x68>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d101      	bne.n	80002e0 <Keypad_IsAnyKeyPressed+0x44>
 80002dc:	2300      	movs	r3, #0
 80002de:	e00a      	b.n	80002f6 <Keypad_IsAnyKeyPressed+0x5a>
	   for ( uint16_t idx=0; idx < SETTLE; idx++ ){
 80002e0:	88bb      	ldrh	r3, [r7, #4]
 80002e2:	3301      	adds	r3, #1
 80002e4:	80bb      	strh	r3, [r7, #4]
 80002e6:	88bb      	ldrh	r3, [r7, #4]
 80002e8:	f240 726b 	movw	r2, #1899	@ 0x76b
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d9ef      	bls.n	80002d0 <Keypad_IsAnyKeyPressed+0x34>
	   	   }				// if key held for 20ms then return 1 (debounce)
	   return( 1 );
 80002f0:	2301      	movs	r3, #1
 80002f2:	e000      	b.n	80002f6 <Keypad_IsAnyKeyPressed+0x5a>
   	   }
   else
      return( 0 );                          // nope.
 80002f4:	2300      	movs	r3, #0
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	48000c00 	.word	0x48000c00

08000308 <Keypad_WhichKeyIsPressed>:

// -----------------------------------------------------------------------------
int Keypad_WhichKeyIsPressed(void) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
// detect and encode a pressed key at {row,col}
// assumes a previous call to Keypad_IsAnyKeyPressed() returned TRUE
// verifies the Keypad_IsAnyKeyPressed() result (no debounce here),
// determines which key is pressed and returns the encoded key ID

   int8_t iRow=0, iCol=0, iKey=0;  // keypad row & col index, key ID result
 800030e:	2300      	movs	r3, #0
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	2300      	movs	r3, #0
 8000314:	71bb      	strb	r3, [r7, #6]
 8000316:	2300      	movs	r3, #0
 8000318:	717b      	strb	r3, [r7, #5]
   int8_t bGotKey = 0;             // bool for keypress, 0 = no press
 800031a:	2300      	movs	r3, #0
 800031c:	713b      	strb	r3, [r7, #4]

   COL_PORT->BSRR = COL_PINS;                       	 // set all columns HI
 800031e:	4b31      	ldr	r3, [pc, #196]	@ (80003e4 <Keypad_WhichKeyIsPressed+0xdc>)
 8000320:	2207      	movs	r2, #7
 8000322:	619a      	str	r2, [r3, #24]
   for ( iRow = 0; iRow < NUM_ROWS; iRow++ ) {      	 // check all ROWS
 8000324:	2300      	movs	r3, #0
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	e036      	b.n	8000398 <Keypad_WhichKeyIsPressed+0x90>
      if ( ROW_PORT->IDR & (BIT0_ROW << iRow) ) {      	 // keypress in iRow!!
 800032a:	4b2e      	ldr	r3, [pc, #184]	@ (80003e4 <Keypad_WhichKeyIsPressed+0xdc>)
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000332:	2108      	movs	r1, #8
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	4013      	ands	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	d026      	beq.n	800038c <Keypad_WhichKeyIsPressed+0x84>
         COL_PORT->BRR = ( COL_PINS );            	 // set all cols LO
 800033e:	4b29      	ldr	r3, [pc, #164]	@ (80003e4 <Keypad_WhichKeyIsPressed+0xdc>)
 8000340:	2207      	movs	r2, #7
 8000342:	629a      	str	r2, [r3, #40]	@ 0x28
         for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {   // 1 col at a time
 8000344:	2300      	movs	r3, #0
 8000346:	71bb      	strb	r3, [r7, #6]
 8000348:	e018      	b.n	800037c <Keypad_WhichKeyIsPressed+0x74>
            COL_PORT->BSRR = ( BIT0_COL << (iCol) );     // set this col HI
 800034a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800034e:	2201      	movs	r2, #1
 8000350:	409a      	lsls	r2, r3
 8000352:	4b24      	ldr	r3, [pc, #144]	@ (80003e4 <Keypad_WhichKeyIsPressed+0xdc>)
 8000354:	619a      	str	r2, [r3, #24]
            if ( ROW_PORT->IDR & (BIT0_ROW << iRow) ) {    // keypress in iCol!!
 8000356:	4b23      	ldr	r3, [pc, #140]	@ (80003e4 <Keypad_WhichKeyIsPressed+0xdc>)
 8000358:	691b      	ldr	r3, [r3, #16]
 800035a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800035e:	2108      	movs	r1, #8
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <Keypad_WhichKeyIsPressed+0x68>
               bGotKey = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	713b      	strb	r3, [r7, #4]
               break;                                  // exit for iCol loop
 800036e:	e009      	b.n	8000384 <Keypad_WhichKeyIsPressed+0x7c>
         for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {   // 1 col at a time
 8000370:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	71bb      	strb	r3, [r7, #6]
 800037c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000380:	2b02      	cmp	r3, #2
 8000382:	dde2      	ble.n	800034a <Keypad_WhichKeyIsPressed+0x42>
            }
         }
         if ( bGotKey )
 8000384:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10a      	bne.n	80003a2 <Keypad_WhichKeyIsPressed+0x9a>
   for ( iRow = 0; iRow < NUM_ROWS; iRow++ ) {      	 // check all ROWS
 800038c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	3301      	adds	r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	71fb      	strb	r3, [r7, #7]
 8000398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039c:	2b03      	cmp	r3, #3
 800039e:	ddc4      	ble.n	800032a <Keypad_WhichKeyIsPressed+0x22>
 80003a0:	e000      	b.n	80003a4 <Keypad_WhichKeyIsPressed+0x9c>
            break;
 80003a2:	bf00      	nop
      }
   }
   //	encode {iRow,iCol} into LED word : row 1-3 : numeric, ‘1’-’9’
   //	                                   row 4   : ‘*’=10, ‘0’=15, ‘#’=12
   //                                    no press: send NO_KEYPRESS
   if ( bGotKey ) {
 80003a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d013      	beq.n	80003d4 <Keypad_WhichKeyIsPressed+0xcc>
      iKey = ( iRow * NUM_COLS ) + iCol + 1;  // handle numeric keys ...
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	461a      	mov	r2, r3
 80003b0:	0052      	lsls	r2, r2, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	4413      	add	r3, r2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	3301      	adds	r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	717b      	strb	r3, [r7, #5]
 	if ( iKey == KEY_ZERO )                 //    works for ‘*’, ‘#’ too
 80003c2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003c6:	2b0b      	cmp	r3, #11
 80003c8:	d101      	bne.n	80003ce <Keypad_WhichKeyIsPressed+0xc6>
         iKey = CODE_ZERO;
 80003ca:	230f      	movs	r3, #15
 80003cc:	717b      	strb	r3, [r7, #5]
 	return( iKey );                         // return encoded keypress
 80003ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003d2:	e000      	b.n	80003d6 <Keypad_WhichKeyIsPressed+0xce>
   }
   return( NO_KEYPRESS );                     // unable to verify keypress
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	48000c00 	.word	0x48000c00

080003e8 <Key_Poll>:

// -----------------------------------------------------------------------------
uint8_t Key_Poll(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
	// polls key and returns value once key is inputed and let go
	uint8_t currentKeyValue;
	while(!Keypad_IsAnyKeyPressed());
 80003ee:	bf00      	nop
 80003f0:	f7ff ff54 	bl	800029c <Keypad_IsAnyKeyPressed>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0fa      	beq.n	80003f0 <Key_Poll+0x8>
		  if (Keypad_WhichKeyIsPressed() > 0 && Keypad_WhichKeyIsPressed() < 16){
 80003fa:	f7ff ff85 	bl	8000308 <Keypad_WhichKeyIsPressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	dd0e      	ble.n	8000422 <Key_Poll+0x3a>
 8000404:	f7ff ff80 	bl	8000308 <Keypad_WhichKeyIsPressed>
 8000408:	4603      	mov	r3, r0
 800040a:	2b0f      	cmp	r3, #15
 800040c:	dc09      	bgt.n	8000422 <Key_Poll+0x3a>
			  currentKeyValue = Keypad_WhichKeyIsPressed();
 800040e:	f7ff ff7b 	bl	8000308 <Keypad_WhichKeyIsPressed>
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
			  if (currentKeyValue == 0xF ) currentKeyValue = 0; //zero position
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b0f      	cmp	r3, #15
 800041a:	d104      	bne.n	8000426 <Key_Poll+0x3e>
 800041c:	2300      	movs	r3, #0
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	e001      	b.n	8000426 <Key_Poll+0x3e>
		  }
		  else
			  currentKeyValue = (0xF);		//error flag
 8000422:	230f      	movs	r3, #15
 8000424:	71fb      	strb	r3, [r7, #7]
     while(Keypad_IsAnyKeyPressed());
 8000426:	bf00      	nop
 8000428:	f7ff ff38 	bl	800029c <Keypad_IsAnyKeyPressed>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1fa      	bne.n	8000428 <Key_Poll+0x40>
		  return currentKeyValue;
 8000432:	79fb      	ldrb	r3, [r7, #7]
		  //wait till key is let go
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <main>:
#include "delay.h"
#include "keypad.h"


int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	//Initialize clock, keypad, spi config
	HAL_Init();
 8000442:	f000 fa32 	bl	80008aa <HAL_Init>
	SystemClock_Config();
 8000446:	f000 f8ad 	bl	80005a4 <SystemClock_Config>
	SysTick_Init();
 800044a:	f7ff fecf 	bl	80001ec <SysTick_Init>
	Keypad_Config();
 800044e:	f7ff fee3 	bl	8000218 <Keypad_Config>
	DAC_init();
 8000452:	f000 f83d 	bl	80004d0 <DAC_init>
	uint16_t mvolt, volt, mvolt100, mvolt10;

	while (1){
	//poll for mv digits or reset
	volt = Key_Poll();
 8000456:	f7ff ffc7 	bl	80003e8 <Key_Poll>
 800045a:	4603      	mov	r3, r0
 800045c:	80fb      	strh	r3, [r7, #6]
	if (volt == 0xA) continue;
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	2b0a      	cmp	r3, #10
 8000462:	d02f      	beq.n	80004c4 <main+0x88>
	mvolt100 = Key_Poll();
 8000464:	f7ff ffc0 	bl	80003e8 <Key_Poll>
 8000468:	4603      	mov	r3, r0
 800046a:	80bb      	strh	r3, [r7, #4]
	if (mvolt100 == 0xA) continue;
 800046c:	88bb      	ldrh	r3, [r7, #4]
 800046e:	2b0a      	cmp	r3, #10
 8000470:	d02a      	beq.n	80004c8 <main+0x8c>
	mvolt10 = Key_Poll();
 8000472:	f7ff ffb9 	bl	80003e8 <Key_Poll>
 8000476:	4603      	mov	r3, r0
 8000478:	807b      	strh	r3, [r7, #2]
	if (mvolt10 == 0xA) continue;
 800047a:	887b      	ldrh	r3, [r7, #2]
 800047c:	2b0a      	cmp	r3, #10
 800047e:	d025      	beq.n	80004cc <main+0x90>
	//set up total mV count and write
	mvolt = (volt*1000) + (mvolt100*100) + (mvolt10*10);
 8000480:	88fb      	ldrh	r3, [r7, #6]
 8000482:	461a      	mov	r2, r3
 8000484:	0152      	lsls	r2, r2, #5
 8000486:	1ad2      	subs	r2, r2, r3
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	4413      	add	r3, r2
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	b29a      	uxth	r2, r3
 8000490:	88bb      	ldrh	r3, [r7, #4]
 8000492:	4619      	mov	r1, r3
 8000494:	0089      	lsls	r1, r1, #2
 8000496:	440b      	add	r3, r1
 8000498:	4619      	mov	r1, r3
 800049a:	0088      	lsls	r0, r1, #2
 800049c:	4619      	mov	r1, r3
 800049e:	4603      	mov	r3, r0
 80004a0:	440b      	add	r3, r1
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4413      	add	r3, r2
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	887b      	ldrh	r3, [r7, #2]
 80004ac:	4619      	mov	r1, r3
 80004ae:	0089      	lsls	r1, r1, #2
 80004b0:	440b      	add	r3, r1
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	803b      	strh	r3, [r7, #0]
	DAC_write(mvolt);
 80004ba:	883b      	ldrh	r3, [r7, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f80d 	bl	80004dc <DAC_write>
 80004c2:	e7c8      	b.n	8000456 <main+0x1a>
	if (volt == 0xA) continue;
 80004c4:	bf00      	nop
 80004c6:	e7c6      	b.n	8000456 <main+0x1a>
	if (mvolt100 == 0xA) continue;
 80004c8:	bf00      	nop
 80004ca:	e7c4      	b.n	8000456 <main+0x1a>
	if (mvolt10 == 0xA) continue;
 80004cc:	bf00      	nop
	volt = Key_Poll();
 80004ce:	e7c2      	b.n	8000456 <main+0x1a>

080004d0 <DAC_init>:



//---------------------------------------------------------------------------

void DAC_init(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	SPI_init();
 80004d4:	f000 f8b2 	bl	800063c <SPI_init>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <DAC_write>:

void DAC_write(int mvolts){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	uint16_t data = DAC_volt_conv(mvolts);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f81b 	bl	8000520 <DAC_volt_conv>
 80004ea:	4603      	mov	r3, r0
 80004ec:	81fb      	strh	r3, [r7, #14]
	SPI1->DR = data;
 80004ee:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <DAC_write+0x40>)
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	60d3      	str	r3, [r2, #12]
	while (!(SPI1->SR & SPI_SR_TXE));
 80004f4:	bf00      	nop
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <DAC_write+0x40>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0f9      	beq.n	80004f6 <DAC_write+0x1a>
	while (SPI1->SR & SPI_SR_BSY);
 8000502:	bf00      	nop
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <DAC_write+0x40>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1f9      	bne.n	8000504 <DAC_write+0x28>

}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40013000 	.word	0x40013000

08000520 <DAC_volt_conv>:
int DAC_volt_conv(int mvolts){
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	//determines if mvolts requested is above/below 1/2 threshold
	mvolts = mvolts*10000/9981 + 1; //trendline from calibration
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	4a1b      	ldr	r2, [pc, #108]	@ (80005a0 <DAC_volt_conv+0x80>)
 8000534:	fb82 1203 	smull	r1, r2, r2, r3
 8000538:	1312      	asrs	r2, r2, #12
 800053a:	17db      	asrs	r3, r3, #31
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	3301      	adds	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
	if(mvolts < 2048){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000548:	da0e      	bge.n	8000568 <DAC_volt_conv+0x48>
		uint16_t data = (mvolts * 4095)/2048;
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4613      	mov	r3, r2
 800054e:	031b      	lsls	r3, r3, #12
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	2b00      	cmp	r3, #0
 8000554:	da01      	bge.n	800055a <DAC_volt_conv+0x3a>
 8000556:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800055a:	12db      	asrs	r3, r3, #11
 800055c:	81bb      	strh	r3, [r7, #12]
		return (data | (0x3 << 12));
 800055e:	89bb      	ldrh	r3, [r7, #12]
 8000560:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000564:	b29b      	uxth	r3, r3
 8000566:	e015      	b.n	8000594 <DAC_volt_conv+0x74>
	}
	else if(mvolts <= 3300 ){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800056e:	4293      	cmp	r3, r2
 8000570:	dc0e      	bgt.n	8000590 <DAC_volt_conv+0x70>
		uint16_t data = (mvolts * 4095)/(2*2048);
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4613      	mov	r3, r2
 8000576:	031b      	lsls	r3, r3, #12
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	2b00      	cmp	r3, #0
 800057c:	da01      	bge.n	8000582 <DAC_volt_conv+0x62>
 800057e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000582:	131b      	asrs	r3, r3, #12
 8000584:	81fb      	strh	r3, [r7, #14]
		return (data | (0x1 << 12));
 8000586:	89fb      	ldrh	r3, [r7, #14]
 8000588:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800058c:	b29b      	uxth	r3, r3
 800058e:	e001      	b.n	8000594 <DAC_volt_conv+0x74>
	}
	else{
		return (0x1FFF);
 8000590:	f641 73ff 	movw	r3, #8191	@ 0x1fff
	}

}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	690ea53b 	.word	0x690ea53b

080005a4 <SystemClock_Config>:

//---------------------------------------------------------------------------

// System
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	@ 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	@ 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f93e 	bl	8001834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ca:	f000 fad7 	bl	8000b7c <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 f82c 	bl	8000630 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d8:	2310      	movs	r3, #16
 80005da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e4:	2360      	movs	r3, #96	@ 0x60
 80005e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fb19 	bl	8000c28 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005fc:	f000 f818 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f000 ff1f 	bl	800145c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000624:	f000 f804 	bl	8000630 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	@ 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <Error_Handler>:

void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop

  __disable_irq();
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <Error_Handler+0x8>

0800063c <SPI_init>:
#include "spi.h"


// -----------------------------------------------------------------------------

void SPI_init( void ) {
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	// setup for SPI at GPIOA and SPI1, adapted from EE329 Lab Manual
	// enable clock for GPIOA & SPI1
	RCC->AHB2ENR |= (SPI_RCC);                // GPIOA: DAC NSS/SCK/SDO
 8000640:	4b38      	ldr	r3, [pc, #224]	@ (8000724 <SPI_init+0xe8>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	4a37      	ldr	r2, [pc, #220]	@ (8000724 <SPI_init+0xe8>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);                 // SPI1 port
 800064c:	4b35      	ldr	r3, [pc, #212]	@ (8000724 <SPI_init+0xe8>)
 800064e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000650:	4a34      	ldr	r2, [pc, #208]	@ (8000724 <SPI_init+0xe8>)
 8000652:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000656:	6613      	str	r3, [r2, #96]	@ 0x60
	// configure AF select, push pull, no pu/pd/ fast mode
	SPIPORT->MODER   &= ~(SPI_MODER);
 8000658:	4b33      	ldr	r3, [pc, #204]	@ (8000728 <SPI_init+0xec>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a32      	ldr	r2, [pc, #200]	@ (8000728 <SPI_init+0xec>)
 800065e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000662:	6013      	str	r3, [r2, #0]
	SPIPORT->MODER   |=  (SPI_MODER_1);
 8000664:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <SPI_init+0xec>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a2f      	ldr	r2, [pc, #188]	@ (8000728 <SPI_init+0xec>)
 800066a:	f043 432a 	orr.w	r3, r3, #2852126720	@ 0xaa000000
 800066e:	6013      	str	r3, [r2, #0]
	//SPIPORT->OTYPER  &= ~(SPI_OTYPER);
	//SPIPORT->PUPDR   &= ~(SPI_PUPDR);
	SPIPORT->OSPEEDR |=  (SPI_OSPEEDR);
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <SPI_init+0xec>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <SPI_init+0xec>)
 8000676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800067a:	6093      	str	r3, [r2, #8]
	// configure AFR for SPI1 function (clear nibble, set 5)
	SPIPORT->AFR[1] &= ~(SPI_AFRCLEAR);
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <SPI_init+0xec>)
 800067e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <SPI_init+0xec>)
 8000682:	b29b      	uxth	r3, r3
 8000684:	6253      	str	r3, [r2, #36]	@ 0x24
	SPIPORT->AFR[1] |=  (SPI_AFRSET);
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SPI_init+0xec>)
 8000688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068a:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SPI_init+0xec>)
 800068c:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000690:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000694:	6253      	str	r3, [r2, #36]	@ 0x24
   // SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
   // build control registers CR1 & CR2 for SPI control of peripheral DAC
   // assumes no active SPI xmits & no recv data in process (BSY=0)
   // CR1 (reset value = 0x0000)
   SPI1->CR1 &= ~( SPI_CR1_SPE );             	// disable SPI for config
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <SPI_init+0xf0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a24      	ldr	r2, [pc, #144]	@ (800072c <SPI_init+0xf0>)
 800069c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006a0:	6013      	str	r3, [r2, #0]
   SPI1->CR1 &= ~( SPI_CR1_RXONLY );          	// recv-only OFF
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SPI_init+0xf0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SPI_init+0xf0>)
 80006a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006ac:	6013      	str	r3, [r2, #0]
   SPI1->CR1 &= ~( SPI_CR1_LSBFIRST );        	// data bit order MSb:LSb
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SPI_init+0xf0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1e      	ldr	r2, [pc, #120]	@ (800072c <SPI_init+0xf0>)
 80006b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006b8:	6013      	str	r3, [r2, #0]
   SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA ); // SCLK polarity:phase = 0:0
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <SPI_init+0xf0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <SPI_init+0xf0>)
 80006c0:	f023 0303 	bic.w	r3, r3, #3
 80006c4:	6013      	str	r3, [r2, #0]
   SPI1->CR1 |=	 SPI_CR1_MSTR;              	// MCU is SPI controller
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <SPI_init+0xf0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a18      	ldr	r2, [pc, #96]	@ (800072c <SPI_init+0xf0>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6013      	str	r3, [r2, #0]
   // CR2 (reset value = 0x0700 : 8b data)
   SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE ); // disable FIFO intrpts
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <SPI_init+0xf0>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <SPI_init+0xf0>)
 80006d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80006dc:	6053      	str	r3, [r2, #4]
   SPI1->CR2 &= ~( SPI_CR2_FRF);              	// Moto frame format
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <SPI_init+0xf0>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <SPI_init+0xf0>)
 80006e4:	f023 0310 	bic.w	r3, r3, #16
 80006e8:	6053      	str	r3, [r2, #4]
   SPI1->CR2 |=	 SPI_CR2_NSSP;              	// auto-generate NSS pulse
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <SPI_init+0xf0>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <SPI_init+0xf0>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6053      	str	r3, [r2, #4]
   SPI1->CR2 |=	 SPI_CR2_DS;                	// 16-bit data
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <SPI_init+0xf0>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <SPI_init+0xf0>)
 80006fc:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000700:	6053      	str	r3, [r2, #4]
   SPI1->CR2 |=	 SPI_CR2_SSOE;        	      	// enable SS output
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <SPI_init+0xf0>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	4a09      	ldr	r2, [pc, #36]	@ (800072c <SPI_init+0xf0>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6053      	str	r3, [r2, #4]
   // CR1
   SPI1->CR1 |=	 SPI_CR1_SPE;               	// re-enable SPI for ops
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <SPI_init+0xf0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a06      	ldr	r2, [pc, #24]	@ (800072c <SPI_init+0xf0>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000718:	6013      	str	r3, [r2, #0]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000
 8000728:	48001000 	.word	0x48001000
 800072c:	40013000 	.word	0x40013000

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073a:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <HAL_MspInit+0x44>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6613      	str	r3, [r2, #96]	@ 0x60
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <HAL_MspInit+0x44>)
 8000744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000752:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <HAL_MspInit+0x44>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	6593      	str	r3, [r2, #88]	@ 0x58
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <HAL_MspInit+0x44>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <MemManage_Handler+0x4>

08000790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 f8c1 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <TIM2_IRQHandler>:
  */

#include "timer.h"

//-------------------------- ISR -----------------------------------------
void TIM2_IRQHandler(void) {
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	// executes after every "event", set up as a finish in ARR or CR1
   if (TIM2->SR & TIM_SR_CC1IF) {      // triggered by CCR1 event ...
 8000800:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00f      	beq.n	800082e <TIM2_IRQHandler+0x32>
      TIM2->SR &= ~(TIM_SR_CC1IF);     // manage the flag
 800080e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000818:	f023 0302 	bic.w	r3, r3, #2
 800081c:	6113      	str	r3, [r2, #16]
      //flag = 1;     // global flag
      TIM2->EGR |= TIM_EGR_UG;
 800081e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6153      	str	r3, [r2, #20]
   }

   if (TIM2->SR & TIM_SR_UIF) {        // triggered by ARR event ...
 800082e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <TIM2_IRQHandler+0x50>
	   TIM2->SR &= ~(TIM_SR_UIF);       // manage the flag
 800083c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000846:	f023 0301 	bic.w	r3, r3, #1
 800084a:	6113      	str	r3, [r2, #16]
   }
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff ffbc 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f000 ffdd 	bl	8001844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fdd7 	bl	800043c <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000890:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800089c:	080018ec 	.word	0x080018ec
  ldr r2, =_sbss
 80008a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a4:	2000002c 	.word	0x2000002c

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>

080008aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f91f 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f80e 	bl	80008dc <HAL_InitTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e001      	b.n	80008d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008cc:	f7ff ff30 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <HAL_InitTick+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d023      	beq.n	8000938 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <HAL_InitTick+0x70>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <HAL_InitTick+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f91d 	bl	8000b46 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10f      	bne.n	8000932 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d809      	bhi.n	800092c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f8f5 	bl	8000b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0x74>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e007      	b.n	800093c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e004      	b.n	800093c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	e001      	b.n	800093c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	20000028 	.word	0x20000028

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000028 	.word	0x20000028

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5c 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40007000 	.word	0x40007000

08000b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b8a:	d130      	bne.n	8000bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b8c:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b98:	d038      	beq.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2232      	movs	r2, #50	@ 0x32
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc0:	e002      	b.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bd4:	d102      	bne.n	8000bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f2      	bne.n	8000bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000be8:	d110      	bne.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e00f      	b.n	8000c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bfa:	d007      	beq.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c04:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	20000000 	.word	0x20000000
 8000c24:	431bde83 	.word	0x431bde83

08000c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f000 bc08 	b.w	800144c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3c:	4b96      	ldr	r3, [pc, #600]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 030c 	and.w	r3, r3, #12
 8000c44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c46:	4b94      	ldr	r3, [pc, #592]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 80e4 	beq.w	8000e26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d007      	beq.n	8000c74 <HAL_RCC_OscConfig+0x4c>
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	f040 808b 	bne.w	8000d82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	f040 8087 	bne.w	8000d82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c74:	4b88      	ldr	r3, [pc, #544]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <HAL_RCC_OscConfig+0x64>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e3df      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a1a      	ldr	r2, [r3, #32]
 8000c90:	4b81      	ldr	r3, [pc, #516]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x7e>
 8000c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ca4:	e005      	b.n	8000cb2 <HAL_RCC_OscConfig+0x8a>
 8000ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d223      	bcs.n	8000cfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fd5a 	bl	8001774 <RCC_SetFlashLatencyFromMSIRange>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e3c0      	b.n	800144c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cca:	4b73      	ldr	r3, [pc, #460]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a72      	ldr	r2, [pc, #456]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	4b70      	ldr	r3, [pc, #448]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	496d      	ldr	r1, [pc, #436]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	4968      	ldr	r1, [pc, #416]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
 8000cfc:	e025      	b.n	8000d4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cfe:	4b66      	ldr	r3, [pc, #408]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a65      	ldr	r2, [pc, #404]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4b63      	ldr	r3, [pc, #396]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	4960      	ldr	r1, [pc, #384]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	495b      	ldr	r1, [pc, #364]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d109      	bne.n	8000d4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fd1a 	bl	8001774 <RCC_SetFlashLatencyFromMSIRange>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e380      	b.n	800144c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d4a:	f000 fc87 	bl	800165c <HAL_RCC_GetSysClockFreq>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	4b51      	ldr	r3, [pc, #324]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	4950      	ldr	r1, [pc, #320]	@ (8000e9c <HAL_RCC_OscConfig+0x274>)
 8000d5c:	5ccb      	ldrb	r3, [r1, r3]
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	fa22 f303 	lsr.w	r3, r2, r3
 8000d66:	4a4e      	ldr	r2, [pc, #312]	@ (8000ea0 <HAL_RCC_OscConfig+0x278>)
 8000d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea4 <HAL_RCC_OscConfig+0x27c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fdb4 	bl	80008dc <HAL_InitTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d052      	beq.n	8000e24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	e364      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d032      	beq.n	8000df0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d8a:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a42      	ldr	r2, [pc, #264]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fdf1 	bl	800097c <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fded 	bl	800097c <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e34d      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db0:	4b39      	ldr	r3, [pc, #228]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a35      	ldr	r2, [pc, #212]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	4930      	ldr	r1, [pc, #192]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dda:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	492b      	ldr	r1, [pc, #172]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	604b      	str	r3, [r1, #4]
 8000dee:	e01a      	b.n	8000e26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000df0:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a28      	ldr	r2, [pc, #160]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fdbe 	bl	800097c <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e04:	f7ff fdba 	bl	800097c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e31a      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <HAL_RCC_OscConfig+0x1dc>
 8000e22:	e000      	b.n	8000e26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d073      	beq.n	8000f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d005      	beq.n	8000e44 <HAL_RCC_OscConfig+0x21c>
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b0c      	cmp	r3, #12
 8000e3c:	d10e      	bne.n	8000e5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d10b      	bne.n	8000e5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d063      	beq.n	8000f18 <HAL_RCC_OscConfig+0x2f0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d15f      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e2f7      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e64:	d106      	bne.n	8000e74 <HAL_RCC_OscConfig+0x24c>
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e025      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e7c:	d114      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x280>
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a02      	ldr	r2, [pc, #8]	@ (8000e98 <HAL_RCC_OscConfig+0x270>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e013      	b.n	8000ec0 <HAL_RCC_OscConfig+0x298>
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	080018a4 	.word	0x080018a4
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a9f      	ldr	r2, [pc, #636]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a9c      	ldr	r2, [pc, #624]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fd58 	bl	800097c <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fd54 	bl	800097c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	@ 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e2b4      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee2:	4b92      	ldr	r3, [pc, #584]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x2a8>
 8000eee:	e014      	b.n	8000f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fd44 	bl	800097c <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fd40 	bl	800097c <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	@ 0x64
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e2a0      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0a:	4b88      	ldr	r3, [pc, #544]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2d0>
 8000f16:	e000      	b.n	8000f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d060      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d005      	beq.n	8000f38 <HAL_RCC_OscConfig+0x310>
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d119      	bne.n	8000f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d116      	bne.n	8000f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f38:	4b7c      	ldr	r3, [pc, #496]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x328>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e27d      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b76      	ldr	r3, [pc, #472]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	061b      	lsls	r3, r3, #24
 8000f5e:	4973      	ldr	r1, [pc, #460]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f64:	e040      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d023      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6e      	ldr	r2, [pc, #440]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fcff 	bl	800097c <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f82:	f7ff fcfb 	bl	800097c <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e25b      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f94:	4b65      	ldr	r3, [pc, #404]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f0      	beq.n	8000f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b62      	ldr	r3, [pc, #392]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	061b      	lsls	r3, r3, #24
 8000fae:	495f      	ldr	r1, [pc, #380]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
 8000fb4:	e018      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a5c      	ldr	r2, [pc, #368]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fcdb 	bl	800097c <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fcd7 	bl	800097c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e237      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fdc:	4b53      	ldr	r3, [pc, #332]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d03c      	beq.n	800106e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d01c      	beq.n	8001036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8000ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001002:	4a4a      	ldr	r2, [pc, #296]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100c:	f7ff fcb6 	bl	800097c <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fcb2 	bl	800097c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e212      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001026:	4b41      	ldr	r3, [pc, #260]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ef      	beq.n	8001014 <HAL_RCC_OscConfig+0x3ec>
 8001034:	e01b      	b.n	800106e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800103c:	4a3b      	ldr	r2, [pc, #236]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001046:	f7ff fc99 	bl	800097c <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104e:	f7ff fc95 	bl	800097c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e1f5      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001060:	4b32      	ldr	r3, [pc, #200]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ef      	bne.n	800104e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80a6 	beq.w	80011c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	4a26      	ldr	r2, [pc, #152]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	6593      	str	r3, [r2, #88]	@ 0x58
 8001098:	4b24      	ldr	r3, [pc, #144]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d118      	bne.n	80010e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc5c 	bl	800097c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c8:	f7ff fc58 	bl	800097c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e1b8      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_RCC_OscConfig+0x508>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_RCC_OscConfig+0x4d8>
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010fe:	e029      	b.n	8001154 <HAL_RCC_OscConfig+0x52c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d115      	bne.n	8001134 <HAL_RCC_OscConfig+0x50c>
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800110e:	4a07      	ldr	r2, [pc, #28]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_RCC_OscConfig+0x504>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001128:	e014      	b.n	8001154 <HAL_RCC_OscConfig+0x52c>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40007000 	.word	0x40007000
 8001134:	4b9d      	ldr	r3, [pc, #628]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800113a:	4a9c      	ldr	r2, [pc, #624]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001144:	4b99      	ldr	r3, [pc, #612]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114a:	4a98      	ldr	r2, [pc, #608]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d016      	beq.n	800118a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff fc0e 	bl	800097c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001162:	e00a      	b.n	800117a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001164:	f7ff fc0a 	bl	800097c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001172:	4293      	cmp	r3, r2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e168      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117a:	4b8c      	ldr	r3, [pc, #560]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0ed      	beq.n	8001164 <HAL_RCC_OscConfig+0x53c>
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118a:	f7ff fbf7 	bl	800097c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff fbf3 	bl	800097c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e151      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a8:	4b80      	ldr	r3, [pc, #512]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ed      	bne.n	8001192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011b6:	7ffb      	ldrb	r3, [r7, #31]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011bc:	4b7b      	ldr	r3, [pc, #492]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	4a7a      	ldr	r2, [pc, #488]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0320 	and.w	r3, r3, #32
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d03c      	beq.n	800124e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01c      	beq.n	8001216 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011dc:	4b73      	ldr	r3, [pc, #460]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011e2:	4a72      	ldr	r2, [pc, #456]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ec:	f7ff fbc6 	bl	800097c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f4:	f7ff fbc2 	bl	800097c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e122      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001206:	4b69      	ldr	r3, [pc, #420]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ef      	beq.n	80011f4 <HAL_RCC_OscConfig+0x5cc>
 8001214:	e01b      	b.n	800124e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001216:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001218:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800121c:	4a63      	ldr	r2, [pc, #396]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001226:	f7ff fba9 	bl	800097c <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800122e:	f7ff fba5 	bl	800097c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e105      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001240:	4b5a      	ldr	r3, [pc, #360]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ef      	bne.n	800122e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80f9 	beq.w	800144a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125c:	2b02      	cmp	r3, #2
 800125e:	f040 80cf 	bne.w	8001400 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001262:	4b52      	ldr	r3, [pc, #328]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f003 0203 	and.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	429a      	cmp	r2, r3
 8001274:	d12c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	3b01      	subs	r3, #1
 8001282:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001284:	429a      	cmp	r2, r3
 8001286:	d123      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001292:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001294:	429a      	cmp	r2, r3
 8001296:	d11b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d113      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	3b01      	subs	r3, #1
 80012b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d109      	bne.n	80012d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	3b01      	subs	r3, #1
 80012ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d071      	beq.n	80013b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d068      	beq.n	80013a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012d6:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012e2:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0ac      	b.n	800144c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012f2:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2d      	ldr	r2, [pc, #180]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 80012f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012fe:	f7ff fb3d 	bl	800097c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff fb39 	bl	800097c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e099      	b.n	800144c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001318:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_RCC_OscConfig+0x788>)
 800132a:	4013      	ands	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001334:	3a01      	subs	r2, #1
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800133e:	0212      	lsls	r2, r2, #8
 8001340:	4311      	orrs	r1, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001346:	0852      	lsrs	r2, r2, #1
 8001348:	3a01      	subs	r2, #1
 800134a:	0552      	lsls	r2, r2, #21
 800134c:	4311      	orrs	r1, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001352:	0852      	lsrs	r2, r2, #1
 8001354:	3a01      	subs	r2, #1
 8001356:	0652      	lsls	r2, r2, #25
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800135e:	06d2      	lsls	r2, r2, #27
 8001360:	430a      	orrs	r2, r1
 8001362:	4912      	ldr	r1, [pc, #72]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800137e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001380:	f7ff fafc 	bl	800097c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff faf8 	bl	800097c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e058      	b.n	800144c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_RCC_OscConfig+0x784>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a6:	e050      	b.n	800144a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e04f      	b.n	800144c <HAL_RCC_OscConfig+0x824>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d144      	bne.n	800144a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d8:	f7ff fad0 	bl	800097c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff facc 	bl	800097c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e02c      	b.n	800144c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x7b8>
 80013fe:	e024      	b.n	800144a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d01f      	beq.n	8001446 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800140c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fab3 	bl	800097c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff faaf 	bl	800097c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e00f      	b.n	800144c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4905      	ldr	r1, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x82c>)
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_RCC_OscConfig+0x830>)
 8001440:	4013      	ands	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e001      	b.n	800144a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	feeefffc 	.word	0xfeeefffc

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e7      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b75      	ldr	r3, [pc, #468]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b72      	ldr	r3, [pc, #456]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4970      	ldr	r1, [pc, #448]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0cf      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d010      	beq.n	80014ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d908      	bls.n	80014ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014bc:	4b63      	ldr	r3, [pc, #396]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4960      	ldr	r1, [pc, #384]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d04c      	beq.n	8001574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	4b5a      	ldr	r3, [pc, #360]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d121      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0a6      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b54      	ldr	r3, [pc, #336]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09a      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001512:	4b4e      	ldr	r3, [pc, #312]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e08e      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e086      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4943      	ldr	r1, [pc, #268]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001544:	f7ff fa1a 	bl	800097c <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa16 	bl	800097c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e06e      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800158c:	429a      	cmp	r2, r3
 800158e:	d208      	bcs.n	80015a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	492b      	ldr	r1, [pc, #172]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d210      	bcs.n	80015d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b0:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 0207 	bic.w	r2, r3, #7
 80015b8:	4923      	ldr	r1, [pc, #140]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e036      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4918      	ldr	r1, [pc, #96]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4910      	ldr	r1, [pc, #64]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001610:	f000 f824 	bl	800165c <HAL_RCC_GetSysClockFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	490b      	ldr	r1, [pc, #44]	@ (8001650 <HAL_RCC_ClockConfig+0x1f4>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800162e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_RCC_ClockConfig+0x1fc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff f951 	bl	80008dc <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	72fb      	strb	r3, [r7, #11]

  return status;
 800163e:	7afb      	ldrb	r3, [r7, #11]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000
 800164c:	40021000 	.word	0x40021000
 8001650:	080018a4 	.word	0x080018a4
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x34>
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d121      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d11e      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e005      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10d      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d102      	bne.n	80016da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_RCC_GetSysClockFreq+0x110>)
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	e004      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x114>)
 80016e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d134      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0xa6>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d003      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0xac>
 8001700:	e005      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_RCC_GetSysClockFreq+0x110>)
 8001704:	617b      	str	r3, [r7, #20]
      break;
 8001706:	e005      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x114>)
 800170a:	617b      	str	r3, [r7, #20]
      break;
 800170c:	e002      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	617b      	str	r3, [r7, #20]
      break;
 8001712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0e5b      	lsrs	r3, r3, #25
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	3301      	adds	r3, #1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001754:	69bb      	ldr	r3, [r7, #24]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	080018b4 	.word	0x080018b4
 800176c:	00f42400 	.word	0x00f42400
 8001770:	007a1200 	.word	0x007a1200

08001774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001780:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800178c:	f7ff f9e8 	bl	8000b60 <HAL_PWREx_GetVoltageRange>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	e014      	b.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a24      	ldr	r2, [pc, #144]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017ac:	f7ff f9d8 	bl	8000b60 <HAL_PWREx_GetVoltageRange>
 80017b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c4:	d10b      	bne.n	80017de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b80      	cmp	r3, #128	@ 0x80
 80017ca:	d919      	bls.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80017d0:	d902      	bls.n	80017d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d2:	2302      	movs	r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	e013      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e010      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b80      	cmp	r3, #128	@ 0x80
 80017e2:	d902      	bls.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017e4:	2303      	movs	r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e00a      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b80      	cmp	r3, #128	@ 0x80
 80017ee:	d102      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e004      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b70      	cmp	r3, #112	@ 0x70
 80017fa:	d101      	bne.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4909      	ldr	r1, [pc, #36]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40022000 	.word	0x40022000

08001834 <memset>:
 8001834:	4402      	add	r2, r0
 8001836:	4603      	mov	r3, r0
 8001838:	4293      	cmp	r3, r2
 800183a:	d100      	bne.n	800183e <memset+0xa>
 800183c:	4770      	bx	lr
 800183e:	f803 1b01 	strb.w	r1, [r3], #1
 8001842:	e7f9      	b.n	8001838 <memset+0x4>

08001844 <__libc_init_array>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	4d0d      	ldr	r5, [pc, #52]	@ (800187c <__libc_init_array+0x38>)
 8001848:	4c0d      	ldr	r4, [pc, #52]	@ (8001880 <__libc_init_array+0x3c>)
 800184a:	1b64      	subs	r4, r4, r5
 800184c:	10a4      	asrs	r4, r4, #2
 800184e:	2600      	movs	r6, #0
 8001850:	42a6      	cmp	r6, r4
 8001852:	d109      	bne.n	8001868 <__libc_init_array+0x24>
 8001854:	4d0b      	ldr	r5, [pc, #44]	@ (8001884 <__libc_init_array+0x40>)
 8001856:	4c0c      	ldr	r4, [pc, #48]	@ (8001888 <__libc_init_array+0x44>)
 8001858:	f000 f818 	bl	800188c <_init>
 800185c:	1b64      	subs	r4, r4, r5
 800185e:	10a4      	asrs	r4, r4, #2
 8001860:	2600      	movs	r6, #0
 8001862:	42a6      	cmp	r6, r4
 8001864:	d105      	bne.n	8001872 <__libc_init_array+0x2e>
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	f855 3b04 	ldr.w	r3, [r5], #4
 800186c:	4798      	blx	r3
 800186e:	3601      	adds	r6, #1
 8001870:	e7ee      	b.n	8001850 <__libc_init_array+0xc>
 8001872:	f855 3b04 	ldr.w	r3, [r5], #4
 8001876:	4798      	blx	r3
 8001878:	3601      	adds	r6, #1
 800187a:	e7f2      	b.n	8001862 <__libc_init_array+0x1e>
 800187c:	080018e4 	.word	0x080018e4
 8001880:	080018e4 	.word	0x080018e4
 8001884:	080018e4 	.word	0x080018e4
 8001888:	080018e8 	.word	0x080018e8

0800188c <_init>:
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	bf00      	nop
 8001890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001892:	bc08      	pop	{r3}
 8001894:	469e      	mov	lr, r3
 8001896:	4770      	bx	lr

08001898 <_fini>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	bf00      	nop
 800189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189e:	bc08      	pop	{r3}
 80018a0:	469e      	mov	lr, r3
 80018a2:	4770      	bx	lr
