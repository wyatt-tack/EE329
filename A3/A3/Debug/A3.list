
A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b3c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001ce8  08001ce8  00002ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d48  08001d48  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d48  08001d48  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d48  08001d48  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d48  08001d48  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d4c  08001d4c  00002d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001d50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001d5c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001d5c  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049fa  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001216  00000000  00000000  00007a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00008c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044b  00000000  00000000  00009240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002740b  00000000  00000000  0000968b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bc8  00000000  00000000  00030a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9f7  00000000  00000000  0003765e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000154c  00000000  00000000  00126098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001275e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001cd0 	.word	0x08001cd0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001cd0 	.word	0x08001cd0

080001ec <SysTick_Init>:
#include "delay.h"

// --------------------------------------------------- delay.c w/o #includes ---
// configure SysTick timer for use with delay_us().
// warning: breaks HAL_delay() by disabling interrupts for shorter delay timing.
void SysTick_Init(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |     	// enable SysTick Timer
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <SysTick_Init+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <SysTick_Init+0x28>)
 80001f6:	f043 0305 	orr.w	r3, r3, #5
 80001fa:	6013      	str	r3, [r2, #0]
                      SysTick_CTRL_CLKSOURCE_Msk); 	// select CPU clock
	SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);  	// disable interrupt
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <SysTick_Init+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <SysTick_Init+0x28>)
 8000202:	f023 0302 	bic.w	r3, r3, #2
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <delay_us+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <delay_us+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	0c9b      	lsrs	r3, r3, #18
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	fb02 f303 	mul.w	r3, r2, r3
 8000232:	4a0f      	ldr	r2, [pc, #60]	@ (8000270 <delay_us+0x58>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000238:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <delay_us+0x58>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 800023e:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <delay_us+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <delay_us+0x58>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000248:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800024a:	bf00      	nop
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <delay_us+0x58>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <delay_us+0x34>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000000 	.word	0x20000000
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e010 	.word	0xe000e010

08000274 <Keypad_Config>:
  ******************************************************************************
  */
#include "keypad.h"

// ------------------------------------- modified from excerpt from keypad.c ---
void Keypad_Config(void){//must be manually changed if separate GPIO port is used
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
											   //set for port D as current config
	  //Port clock initialize
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIODEN);
 8000278:	4b1d      	ldr	r3, [pc, #116]	@ (80002f0 <Keypad_Config+0x7c>)
 800027a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027c:	4a1c      	ldr	r2, [pc, #112]	@ (80002f0 <Keypad_Config+0x7c>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  //Column pin initialize - Push Pull, no PU/PD, high speed
	  COL_PORT->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <Keypad_Config+0x80>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1a      	ldr	r2, [pc, #104]	@ (80002f4 <Keypad_Config+0x80>)
 800028a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800028e:	6013      	str	r3, [r2, #0]
			   	   	   		| GPIO_MODER_MODE2);
	  COL_PORT->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <Keypad_Config+0x80>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a17      	ldr	r2, [pc, #92]	@ (80002f4 <Keypad_Config+0x80>)
 8000296:	f043 0315 	orr.w	r3, r3, #21
 800029a:	6013      	str	r3, [r2, #0]
	 	   	   				| GPIO_MODER_MODE2_0);
	  COL_PORT->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1
 800029c:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <Keypad_Config+0x80>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a14      	ldr	r2, [pc, #80]	@ (80002f4 <Keypad_Config+0x80>)
 80002a2:	f023 030f 	bic.w	r3, r3, #15
 80002a6:	6053      	str	r3, [r2, #4]
			  	  	  	| GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
	  COL_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1
 80002a8:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <Keypad_Config+0x80>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a11      	ldr	r2, [pc, #68]	@ (80002f4 <Keypad_Config+0x80>)
 80002ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002b2:	60d3      	str	r3, [r2, #12]
			  	  	  	| GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
	  COL_PORT->OSPEEDR |=  ((GPIO_OSPEEDR_OSPEED0) |
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <Keypad_Config+0x80>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a0e      	ldr	r2, [pc, #56]	@ (80002f4 <Keypad_Config+0x80>)
 80002ba:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80002be:	6093      	str	r3, [r2, #8]
	                      (GPIO_OSPEEDR_OSPEED1) |
	                      (GPIO_OSPEEDR_OSPEED2));
	  //Row pin initialize - Input, pull down
	  ROW_PORT->MODER   &= ~(GPIO_MODER_MODE3 | GPIO_MODER_MODE4
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <Keypad_Config+0x80>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <Keypad_Config+0x80>)
 80002c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80002ca:	6013      	str	r3, [r2, #0]
	  			   	   	 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6);
	  ROW_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD3 | GPIO_PUPDR_PUPD4
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <Keypad_Config+0x80>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a08      	ldr	r2, [pc, #32]	@ (80002f4 <Keypad_Config+0x80>)
 80002d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80002d6:	60d3      	str	r3, [r2, #12]
	  			  	  	| GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6);
	  ROW_PORT->PUPDR   |= (GPIO_PUPDR_PUPD3_1 | GPIO_PUPDR_PUPD4_1
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <Keypad_Config+0x80>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a05      	ldr	r2, [pc, #20]	@ (80002f4 <Keypad_Config+0x80>)
 80002de:	f443 532a 	orr.w	r3, r3, #10880	@ 0x2a80
 80002e2:	60d3      	str	r3, [r2, #12]
	  			  	  	| GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1);
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	48000c00 	.word	0x48000c00

080002f8 <Keypad_IsAnyKeyPressed>:

// -----------------------------------------------------------------------------
int Keypad_IsAnyKeyPressed(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
// drive all COLUMNS HI; see if any ROWS are HI
// return true if a key is pressed, false if not
   COL_PORT->BSRR = COL_PINS;         	      // set all columns HI
 80002fe:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <Keypad_IsAnyKeyPressed+0x68>)
 8000300:	2207      	movs	r2, #7
 8000302:	619a      	str	r2, [r3, #24]
   for ( uint16_t idx=0; idx<SETTLE; idx++ )   	// let it settle
 8000304:	2300      	movs	r3, #0
 8000306:	80fb      	strh	r3, [r7, #6]
 8000308:	e002      	b.n	8000310 <Keypad_IsAnyKeyPressed+0x18>
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	3301      	adds	r3, #1
 800030e:	80fb      	strh	r3, [r7, #6]
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	f240 726b 	movw	r2, #1899	@ 0x76b
 8000316:	4293      	cmp	r3, r2
 8000318:	d9f7      	bls.n	800030a <Keypad_IsAnyKeyPressed+0x12>
      ;
   if ((ROW_PORT->IDR & ROW_PINS) != 0 ) {	// got a keypress!
 800031a:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <Keypad_IsAnyKeyPressed+0x68>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000322:	2b00      	cmp	r3, #0
 8000324:	d014      	beq.n	8000350 <Keypad_IsAnyKeyPressed+0x58>
	   for ( uint16_t idx=0; idx < SETTLE; idx++ ){
 8000326:	2300      	movs	r3, #0
 8000328:	80bb      	strh	r3, [r7, #4]
 800032a:	e00a      	b.n	8000342 <Keypad_IsAnyKeyPressed+0x4a>
		   if ((ROW_PORT->IDR & ROW_PINS) == 0 ) return( 0 );
 800032c:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <Keypad_IsAnyKeyPressed+0x68>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8000334:	2b00      	cmp	r3, #0
 8000336:	d101      	bne.n	800033c <Keypad_IsAnyKeyPressed+0x44>
 8000338:	2300      	movs	r3, #0
 800033a:	e00a      	b.n	8000352 <Keypad_IsAnyKeyPressed+0x5a>
	   for ( uint16_t idx=0; idx < SETTLE; idx++ ){
 800033c:	88bb      	ldrh	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	80bb      	strh	r3, [r7, #4]
 8000342:	88bb      	ldrh	r3, [r7, #4]
 8000344:	f240 726b 	movw	r2, #1899	@ 0x76b
 8000348:	4293      	cmp	r3, r2
 800034a:	d9ef      	bls.n	800032c <Keypad_IsAnyKeyPressed+0x34>
	   	   }				// if key held for 20ms then return 1 (debounce)
	   return( 1 );
 800034c:	2301      	movs	r3, #1
 800034e:	e000      	b.n	8000352 <Keypad_IsAnyKeyPressed+0x5a>
   	   }
   else
      return( 0 );                          // nope.
 8000350:	2300      	movs	r3, #0
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	48000c00 	.word	0x48000c00

08000364 <Keypad_WhichKeyIsPressed>:

// -----------------------------------------------------------------------------
int Keypad_WhichKeyIsPressed(void) {
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
// detect and encode a pressed key at {row,col}
// assumes a previous call to Keypad_IsAnyKeyPressed() returned TRUE
// verifies the Keypad_IsAnyKeyPressed() result (no debounce here),
// determines which key is pressed and returns the encoded key ID

   int8_t iRow=0, iCol=0, iKey=0;  // keypad row & col index, key ID result
 800036a:	2300      	movs	r3, #0
 800036c:	71fb      	strb	r3, [r7, #7]
 800036e:	2300      	movs	r3, #0
 8000370:	71bb      	strb	r3, [r7, #6]
 8000372:	2300      	movs	r3, #0
 8000374:	717b      	strb	r3, [r7, #5]
   int8_t bGotKey = 0;             // bool for keypress, 0 = no press
 8000376:	2300      	movs	r3, #0
 8000378:	713b      	strb	r3, [r7, #4]

   COL_PORT->BSRR = COL_PINS;                       	 // set all columns HI
 800037a:	4b31      	ldr	r3, [pc, #196]	@ (8000440 <Keypad_WhichKeyIsPressed+0xdc>)
 800037c:	2207      	movs	r2, #7
 800037e:	619a      	str	r2, [r3, #24]
   for ( iRow = 0; iRow < NUM_ROWS; iRow++ ) {      	 // check all ROWS
 8000380:	2300      	movs	r3, #0
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	e036      	b.n	80003f4 <Keypad_WhichKeyIsPressed+0x90>
      if ( ROW_PORT->IDR & (BIT0_ROW << iRow) ) {      	 // keypress in iRow!!
 8000386:	4b2e      	ldr	r3, [pc, #184]	@ (8000440 <Keypad_WhichKeyIsPressed+0xdc>)
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800038e:	2108      	movs	r1, #8
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	4013      	ands	r3, r2
 8000396:	2b00      	cmp	r3, #0
 8000398:	d026      	beq.n	80003e8 <Keypad_WhichKeyIsPressed+0x84>
         COL_PORT->BRR = ( COL_PINS );            	 // set all cols LO
 800039a:	4b29      	ldr	r3, [pc, #164]	@ (8000440 <Keypad_WhichKeyIsPressed+0xdc>)
 800039c:	2207      	movs	r2, #7
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
         for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {   // 1 col at a time
 80003a0:	2300      	movs	r3, #0
 80003a2:	71bb      	strb	r3, [r7, #6]
 80003a4:	e018      	b.n	80003d8 <Keypad_WhichKeyIsPressed+0x74>
            COL_PORT->BSRR = ( BIT0_COL << (iCol) );     // set this col HI
 80003a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003aa:	2201      	movs	r2, #1
 80003ac:	409a      	lsls	r2, r3
 80003ae:	4b24      	ldr	r3, [pc, #144]	@ (8000440 <Keypad_WhichKeyIsPressed+0xdc>)
 80003b0:	619a      	str	r2, [r3, #24]
            if ( ROW_PORT->IDR & (BIT0_ROW << iRow) ) {    // keypress in iCol!!
 80003b2:	4b23      	ldr	r3, [pc, #140]	@ (8000440 <Keypad_WhichKeyIsPressed+0xdc>)
 80003b4:	691b      	ldr	r3, [r3, #16]
 80003b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80003ba:	2108      	movs	r1, #8
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	4013      	ands	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <Keypad_WhichKeyIsPressed+0x68>
               bGotKey = 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	713b      	strb	r3, [r7, #4]
               break;                                  // exit for iCol loop
 80003ca:	e009      	b.n	80003e0 <Keypad_WhichKeyIsPressed+0x7c>
         for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {   // 1 col at a time
 80003cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	71bb      	strb	r3, [r7, #6]
 80003d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	dde2      	ble.n	80003a6 <Keypad_WhichKeyIsPressed+0x42>
            }
         }
         if ( bGotKey )
 80003e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d10a      	bne.n	80003fe <Keypad_WhichKeyIsPressed+0x9a>
   for ( iRow = 0; iRow < NUM_ROWS; iRow++ ) {      	 // check all ROWS
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	3301      	adds	r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	ddc4      	ble.n	8000386 <Keypad_WhichKeyIsPressed+0x22>
 80003fc:	e000      	b.n	8000400 <Keypad_WhichKeyIsPressed+0x9c>
            break;
 80003fe:	bf00      	nop
      }
   }
   //	encode {iRow,iCol} into LED word : row 1-3 : numeric, ‘1’-’9’
   //	                                   row 4   : ‘*’=10, ‘0’=15, ‘#’=12
   //                                    no press: send NO_KEYPRESS
   if ( bGotKey ) {
 8000400:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d013      	beq.n	8000430 <Keypad_WhichKeyIsPressed+0xcc>
      iKey = ( iRow * NUM_COLS ) + iCol + 1;  // handle numeric keys ...
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	461a      	mov	r2, r3
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	4413      	add	r3, r2
 8000410:	b2da      	uxtb	r2, r3
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	4413      	add	r3, r2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	3301      	adds	r3, #1
 800041a:	b2db      	uxtb	r3, r3
 800041c:	717b      	strb	r3, [r7, #5]
 	if ( iKey == KEY_ZERO )                 //    works for ‘*’, ‘#’ too
 800041e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000422:	2b0b      	cmp	r3, #11
 8000424:	d101      	bne.n	800042a <Keypad_WhichKeyIsPressed+0xc6>
         iKey = CODE_ZERO;
 8000426:	230f      	movs	r3, #15
 8000428:	717b      	strb	r3, [r7, #5]
 	return( iKey );                         // return encoded keypress
 800042a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800042e:	e000      	b.n	8000432 <Keypad_WhichKeyIsPressed+0xce>
   }
   return( NO_KEYPRESS );                     // unable to verify keypress
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	48000c00 	.word	0x48000c00

08000444 <Key_Poll>:

// -----------------------------------------------------------------------------
uint8_t Key_Poll(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	// polls key and returns value once key is inputed and let go
	uint8_t currentKeyValue;
	while(!Keypad_IsAnyKeyPressed());
 800044a:	bf00      	nop
 800044c:	f7ff ff54 	bl	80002f8 <Keypad_IsAnyKeyPressed>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0fa      	beq.n	800044c <Key_Poll+0x8>
		  if (Keypad_WhichKeyIsPressed() > 0 && Keypad_WhichKeyIsPressed() < 16){
 8000456:	f7ff ff85 	bl	8000364 <Keypad_WhichKeyIsPressed>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	dd0e      	ble.n	800047e <Key_Poll+0x3a>
 8000460:	f7ff ff80 	bl	8000364 <Keypad_WhichKeyIsPressed>
 8000464:	4603      	mov	r3, r0
 8000466:	2b0f      	cmp	r3, #15
 8000468:	dc09      	bgt.n	800047e <Key_Poll+0x3a>
			  currentKeyValue = Keypad_WhichKeyIsPressed();
 800046a:	f7ff ff7b 	bl	8000364 <Keypad_WhichKeyIsPressed>
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
			  if (currentKeyValue == 0xF ) currentKeyValue = 0; //zero position
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d104      	bne.n	8000482 <Key_Poll+0x3e>
 8000478:	2300      	movs	r3, #0
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	e001      	b.n	8000482 <Key_Poll+0x3e>
		  }
		  else
			  currentKeyValue = (0xF);		//error flag
 800047e:	230f      	movs	r3, #15
 8000480:	71fb      	strb	r3, [r7, #7]
     while(Keypad_IsAnyKeyPressed());
 8000482:	bf00      	nop
 8000484:	f7ff ff38 	bl	80002f8 <Keypad_IsAnyKeyPressed>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1fa      	bne.n	8000484 <Key_Poll+0x40>
		  return currentKeyValue;
 800048e:	79fb      	ldrb	r3, [r7, #7]
		  //wait till key is let go
}
 8000490:	4618      	mov	r0, r3
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <LCD_init>:
  */

#include "lcd.h"

// ------------------------------------------------------ excerpt from lcd.c ---
void LCD_init( void )  {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
	  //Port clock initialize
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOAEN);
 800049e:	4b43      	ldr	r3, [pc, #268]	@ (80005ac <LCD_init+0x114>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	4a42      	ldr	r2, [pc, #264]	@ (80005ac <LCD_init+0x114>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  //LCD pin initialize - Push Pull, no PU/PD, high speed
	  LCD_PORT->MODER   &= ~(LCD_MODER);
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80004b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004bc:	6013      	str	r3, [r2, #0]
	  LCD_PORT->MODER   |=  (LCD_MODER_0);
 80004be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004c8:	f443 53aa 	orr.w	r3, r3, #5440	@ 0x1540
 80004cc:	f043 0315 	orr.w	r3, r3, #21
 80004d0:	6013      	str	r3, [r2, #0]
	  LCD_PORT->OTYPER  &= ~(LCD_OTYPER);
 80004d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80004e0:	6053      	str	r3, [r2, #4]
	  LCD_PORT->PUPDR   &= ~(LCD_PUPDR);
 80004e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80004f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004f4:	60d3      	str	r3, [r2, #12]
	  LCD_PORT->OSPEEDR |=  (LCD_OSPEEDR);
 80004f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000500:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000504:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000508:	6093      	str	r3, [r2, #8]
	delay_us( 80000 );                    	// power-up wait 80 ms
 800050a:	4829      	ldr	r0, [pc, #164]	@ (80005b0 <LCD_init+0x118>)
 800050c:	f7ff fe84 	bl	8000218 <delay_us>
	LCD_PORT->ODR   &= ~(LCD_RS);			// clear RS bit
 8000510:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800051a:	f023 0310 	bic.w	r3, r3, #16
 800051e:	6153      	str	r3, [r2, #20]
	for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e009      	b.n	800053a <LCD_init+0xa2>
      LCD_4b_command( 0x30 );// HI 4b of 8b cmd, low nibble = X
 8000526:	2030      	movs	r0, #48	@ 0x30
 8000528:	f000 f85e 	bl	80005e8 <LCD_4b_command>
      delay_us( 5000 );
 800052c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000530:	f7ff fe72 	bl	8000218 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  // wake up 1,2,3: DATA = 0011 XXXX
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	ddf2      	ble.n	8000526 <LCD_init+0x8e>
   }
   LCD_4b_command( 0x20 ); // fcn set #4: 4b cmd set 4b mode - next 0x28:2-line
 8000540:	2020      	movs	r0, #32
 8000542:	f000 f851 	bl	80005e8 <LCD_4b_command>
   delay_us(3000);
 8000546:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800054a:	f7ff fe65 	bl	8000218 <delay_us>
   LCD_command( 0x28 );	// fcn set 4b mode and 2x28 line
 800054e:	2028      	movs	r0, #40	@ 0x28
 8000550:	f000 f86b 	bl	800062a <LCD_command>
   delay_us( 300 );
 8000554:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000558:	f7ff fe5e 	bl	8000218 <delay_us>
   LCD_command( 0x10 );	//Set cursor
 800055c:	2010      	movs	r0, #16
 800055e:	f000 f864 	bl	800062a <LCD_command>
   delay_us( 300 );
 8000562:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000566:	f7ff fe57 	bl	8000218 <delay_us>
   LCD_command( 0x0F ); // display, cursor, blink on
 800056a:	200f      	movs	r0, #15
 800056c:	f000 f85d 	bl	800062a <LCD_command>
   delay_us( 300 );
 8000570:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000574:	f7ff fe50 	bl	8000218 <delay_us>
   LCD_command(0x06);	//Entry mode
 8000578:	2006      	movs	r0, #6
 800057a:	f000 f856 	bl	800062a <LCD_command>
   delay_us( 300 );
 800057e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000582:	f7ff fe49 	bl	8000218 <delay_us>
   LCD_command(0x01); 	//clear display
 8000586:	2001      	movs	r0, #1
 8000588:	f000 f84f 	bl	800062a <LCD_command>
   delay_us( 300 );
 800058c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000590:	f7ff fe42 	bl	8000218 <delay_us>
   LCD_command(0x80);	// set cursor home
 8000594:	2080      	movs	r0, #128	@ 0x80
 8000596:	f000 f848 	bl	800062a <LCD_command>
   delay_us( 300 );
 800059a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800059e:	f7ff fe3b 	bl	8000218 <delay_us>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	00013880 	.word	0x00013880

080005b4 <LCD_pulse_ENA>:

void LCD_pulse_ENA( void )  {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
// ENAble line sends command on falling edge
// set to restore default then clear to trigger
   LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 80005b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6153      	str	r3, [r2, #20]
   delay_us( 25 );                         // TDDR > 320 ns
 80005c8:	2019      	movs	r0, #25
 80005ca:	f7ff fe25 	bl	8000218 <delay_us>
   LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 80005ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005d8:	f023 0320 	bic.w	r3, r3, #32
 80005dc:	6153      	str	r3, [r2, #20]
   delay_us( 20 );                         // low values flakey, see A3:p.1
 80005de:	2014      	movs	r0, #20
 80005e0:	f7ff fe1a 	bl	8000218 <delay_us>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LCD_4b_command>:

void LCD_4b_command( uint8_t command )  {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
// LCD command using high nibble only - used for 'wake-up' 0x30 commands
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005fc:	f023 030f 	bic.w	r3, r3, #15
 8000600:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command >> 4 );   // DATA = command
 8000602:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	0912      	lsrs	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	4611      	mov	r1, r2
 8000610:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000614:	430b      	orrs	r3, r1
 8000616:	6153      	str	r3, [r2, #20]
   delay_us( 15 );
 8000618:	200f      	movs	r0, #15
 800061a:	f7ff fdfd 	bl	8000218 <delay_us>
   LCD_pulse_ENA( );
 800061e:	f7ff ffc9 	bl	80005b4 <LCD_pulse_ENA>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <LCD_command>:

void LCD_command( uint8_t command )  {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
// send command to LCD in 4-bit instruction mode
// HIGH nibble then LOW nibble, timing sensitive
   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000634:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( (command>>4) & LCD_DATA_BITS ); // HIGH shifted low
 8000644:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000658:	4313      	orrs	r3, r2
 800065a:	614b      	str	r3, [r1, #20]
   delay_us( 15 );
 800065c:	200f      	movs	r0, #15
 800065e:	f7ff fddb 	bl	8000218 <delay_us>
   LCD_pulse_ENA( );                                    // latch HIGH NIBBLE
 8000662:	f7ff ffa7 	bl	80005b4 <LCD_pulse_ENA>

   LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000666:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000670:	f023 030f 	bic.w	r3, r3, #15
 8000674:	6153      	str	r3, [r2, #20]
   LCD_PORT->ODR   |= ( command & LCD_DATA_BITS );      // LOW nibble
 8000676:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000686:	4313      	orrs	r3, r2
 8000688:	614b      	str	r3, [r1, #20]
   delay_us( 15 );
 800068a:	200f      	movs	r0, #15
 800068c:	f7ff fdc4 	bl	8000218 <delay_us>
   LCD_pulse_ENA( );                                    // latch LOW NIBBLE
 8000690:	f7ff ff90 	bl	80005b4 <LCD_pulse_ENA>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <LCD_write_char>:

void LCD_write_char( uint8_t letter )  {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
// calls LCD_command() w/char data; assumes all ctrl bits set LO in LCD_init()
   LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 80006a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6153      	str	r3, [r2, #20]
   delay_us( 15 );
 80006b6:	200f      	movs	r0, #15
 80006b8:	f7ff fdae 	bl	8000218 <delay_us>
   LCD_command( letter );             // character to print
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffb3 	bl	800062a <LCD_command>
   LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 80006c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ce:	f023 0310 	bic.w	r3, r3, #16
 80006d2:	6153      	str	r3, [r2, #20]
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <LCD_set_cursor>:

void LCD_set_cursor( uint8_t position[2])	{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
//	calls LCD_command to change cursor position
	//position formatted as [row,col] (zero indexed)
	//sets ddram address for cursor set
	LCD_PORT->ODR   &= ~(LCD_RS);
 80006e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ee:	f023 0310 	bic.w	r3, r3, #16
 80006f2:	6153      	str	r3, [r2, #20]
	uint8_t ddRamAdd =  (40 * position[1]);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	72fb      	strb	r3, [r7, #11]
	ddRamAdd |= (0x80);
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800070a:	72fb      	strb	r3, [r7, #11]
	LCD_command(ddRamAdd);
 800070c:	7afb      	ldrb	r3, [r7, #11]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff8b 	bl	800062a <LCD_command>
	delay_us( 500 );
 8000714:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000718:	f7ff fd7e 	bl	8000218 <delay_us>
	for (int col = 0; col < position[0]; col++){
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	e009      	b.n	8000736 <LCD_set_cursor+0x5a>
		LCD_command( 0x14 );
 8000722:	2014      	movs	r0, #20
 8000724:	f7ff ff81 	bl	800062a <LCD_command>
		delay_us( 300 );
 8000728:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800072c:	f7ff fd74 	bl	8000218 <delay_us>
	for (int col = 0; col < position[0]; col++){
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4293      	cmp	r3, r2
 8000740:	dbef      	blt.n	8000722 <LCD_set_cursor+0x46>
		}
	//set address as RS_Low, data as [0x80 | address]
	//address defined as 0x00-0x0F, 0x40-0x4F
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <LCD_write_string>:

void LCD_write_string( uint8_t 	writeData[])	{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
//	calls LCD_write_char in row long for loop
	for (uint8_t indexCol = 0; indexCol < 16; indexCol++ ){
 8000754:	2300      	movs	r3, #0
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e00c      	b.n	8000774 <LCD_write_string+0x28>
			LCD_write_char(writeData[indexCol]);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff9a 	bl	800069c <LCD_write_char>
			delay_us(60);
 8000768:	203c      	movs	r0, #60	@ 0x3c
 800076a:	f7ff fd55 	bl	8000218 <delay_us>
	for (uint8_t indexCol = 0; indexCol < 16; indexCol++ ){
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	3301      	adds	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b0f      	cmp	r3, #15
 8000778:	d9ef      	bls.n	800075a <LCD_write_string+0xe>
		}
	}
 800077a:	bf00      	nop
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <main>:
#include "lcd.h"
#include "delay.h"


int main(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b093      	sub	sp, #76	@ 0x4c
 8000788:	af00      	add	r7, sp, #0
	//Initialize clock and delay configs
	HAL_Init();
 800078a:	f000 fab0 	bl	8000cee <HAL_Init>
	SystemClock_Config();
 800078e:	f000 f9d3 	bl	8000b38 <SystemClock_Config>
	SysTick_Init();
 8000792:	f7ff fd2b 	bl	80001ec <SysTick_Init>
	//Initialize keypad and LCD
	Keypad_Config();
 8000796:	f7ff fd6d 	bl	8000274 <Keypad_Config>
	LCD_init();
 800079a:	f7ff fe7d 	bl	8000498 <LCD_init>
	Led_Config();
 800079e:	f000 f995 	bl	8000acc <Led_Config>

//display:
//"EE 329 A3 TIMER "
//"*=SET #=GO 00:00"
	uint8_t origin[2] = {0,0};
 80007a2:	2300      	movs	r3, #0
 80007a4:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t line2[2] = {0,1};
 80007a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint8_t openingLine1[16] = "EE 329 A3 TIMER ";
 80007ac:	4bc4      	ldr	r3, [pc, #784]	@ (8000ac0 <main+0x33c>)
 80007ae:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80007b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t openingLine2[16] = "*=SET #=GO 00:00";
 80007b8:	4bc2      	ldr	r3, [pc, #776]	@ (8000ac4 <main+0x340>)
 80007ba:	f107 0414 	add.w	r4, r7, #20
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//Initialize variables and cursor locations for each digit
	uint8_t clockMin10[2] = {11,1};
 80007c4:	f240 130b 	movw	r3, #267	@ 0x10b
 80007c8:	823b      	strh	r3, [r7, #16]
	uint8_t clockMin1[2] = {12,1};
 80007ca:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80007ce:	81bb      	strh	r3, [r7, #12]
	uint8_t clockSec10[2] = {14,1};
 80007d0:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80007d4:	813b      	strh	r3, [r7, #8]
	uint8_t clockSec1[2] = {15,1};
 80007d6:	f240 130f 	movw	r3, #271	@ 0x10f
 80007da:	80bb      	strh	r3, [r7, #4]


  while (1)
  {
// reset LED and poll keypad until * pressed
	  currentKeyValue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		LCD_set_cursor(origin);
 80007e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff78 	bl	80006dc <LCD_set_cursor>
		LCD_write_string(openingLine1);
 80007ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffab 	bl	800074c <LCD_write_string>
		LCD_set_cursor(line2);
 80007f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff6e 	bl	80006dc <LCD_set_cursor>
		LCD_write_string(openingLine2);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffa1 	bl	800074c <LCD_write_string>
	  GPIOC->BRR = (GPIO_PIN_0);
 800080a:	4baf      	ldr	r3, [pc, #700]	@ (8000ac8 <main+0x344>)
 800080c:	2201      	movs	r2, #1
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
	  while(Key_Poll() != STAR_KEY);
 8000810:	bf00      	nop
 8000812:	f7ff fe17 	bl	8000444 <Key_Poll>
 8000816:	4603      	mov	r3, r0
 8000818:	2b0a      	cmp	r3, #10
 800081a:	d1fa      	bne.n	8000812 <main+0x8e>
// set time for each digit on clock
	  	min10= 0xF; min1= 0xF;	//reset values
 800081c:	230f      	movs	r3, #15
 800081e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000822:	230f      	movs	r3, #15
 8000824:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	  	sec10= 0xF; sec1= 0xF;
 8000828:	230f      	movs	r3, #15
 800082a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800082e:	230f      	movs	r3, #15
 8000830:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	  //Set 10*min
	  	LCD_set_cursor(clockMin10);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff4f 	bl	80006dc <LCD_set_cursor>
	  	while(min10 < 0 || min10 > 5) {
 800083e:	e00c      	b.n	800085a <main+0xd6>
	  		if (currentKeyValue == STAR_KEY) break;
 8000840:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000844:	2b0a      	cmp	r3, #10
 8000846:	d00d      	beq.n	8000864 <main+0xe0>
	  		currentKeyValue = Key_Poll();
 8000848:	f7ff fdfc 	bl	8000444 <Key_Poll>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		min10 = currentKeyValue;
 8000852:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000856:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	  	while(min10 < 0 || min10 > 5) {
 800085a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800085e:	2b05      	cmp	r3, #5
 8000860:	d8ee      	bhi.n	8000840 <main+0xbc>
 8000862:	e000      	b.n	8000866 <main+0xe2>
	  		if (currentKeyValue == STAR_KEY) break;
 8000864:	bf00      	nop
	  	}
	  	LCD_write_char(min10+ 0x30);
 8000866:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800086a:	3330      	adds	r3, #48	@ 0x30
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff14 	bl	800069c <LCD_write_char>
	  //Set 1*min
	  	LCD_set_cursor(clockMin1);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff2f 	bl	80006dc <LCD_set_cursor>
	  	while(min1 < 0 || min1 > 9){
 800087e:	e00c      	b.n	800089a <main+0x116>
	  		if (currentKeyValue == STAR_KEY) break;
 8000880:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000884:	2b0a      	cmp	r3, #10
 8000886:	d00d      	beq.n	80008a4 <main+0x120>
	  		currentKeyValue = Key_Poll();
 8000888:	f7ff fddc 	bl	8000444 <Key_Poll>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		min1 = currentKeyValue;
 8000892:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000896:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	  	while(min1 < 0 || min1 > 9){
 800089a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800089e:	2b09      	cmp	r3, #9
 80008a0:	d8ee      	bhi.n	8000880 <main+0xfc>
 80008a2:	e000      	b.n	80008a6 <main+0x122>
	  		if (currentKeyValue == STAR_KEY) break;
 80008a4:	bf00      	nop
	  	}
	  	LCD_write_char(min1+ 0x30);
 80008a6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80008aa:	3330      	adds	r3, #48	@ 0x30
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fef4 	bl	800069c <LCD_write_char>
	  //Set 10*sec
	  	LCD_set_cursor(clockSec10);
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff0f 	bl	80006dc <LCD_set_cursor>
	  	while(sec10 < 0 || sec10 > 5){
 80008be:	e00c      	b.n	80008da <main+0x156>
	  		if (currentKeyValue == STAR_KEY) break;
 80008c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d00d      	beq.n	80008e4 <main+0x160>
	  		currentKeyValue = Key_Poll();
 80008c8:	f7ff fdbc 	bl	8000444 <Key_Poll>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		sec10 = currentKeyValue;
 80008d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80008d6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	  	while(sec10 < 0 || sec10 > 5){
 80008da:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80008de:	2b05      	cmp	r3, #5
 80008e0:	d8ee      	bhi.n	80008c0 <main+0x13c>
 80008e2:	e000      	b.n	80008e6 <main+0x162>
	  		if (currentKeyValue == STAR_KEY) break;
 80008e4:	bf00      	nop
	  	}
	  	LCD_write_char(sec10+ 0x30);
 80008e6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80008ea:	3330      	adds	r3, #48	@ 0x30
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fed4 	bl	800069c <LCD_write_char>
	  //Set 1*sec
	  	LCD_set_cursor(clockSec1);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fef0 	bl	80006dc <LCD_set_cursor>
	  	while(sec1 < 0 || sec1 > 9){
 80008fc:	e00c      	b.n	8000918 <main+0x194>
	  		if (currentKeyValue == STAR_KEY) break;
 80008fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000902:	2b0a      	cmp	r3, #10
 8000904:	d00d      	beq.n	8000922 <main+0x19e>
	  		currentKeyValue = Key_Poll();
 8000906:	f7ff fd9d 	bl	8000444 <Key_Poll>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		sec1 = currentKeyValue;
 8000910:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000914:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	  	while(sec1 < 0 || sec1 > 9){
 8000918:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800091c:	2b09      	cmp	r3, #9
 800091e:	d8ee      	bhi.n	80008fe <main+0x17a>
 8000920:	e000      	b.n	8000924 <main+0x1a0>
	  		if (currentKeyValue == STAR_KEY) break;
 8000922:	bf00      	nop
	  	}
	  	LCD_write_char(sec1+ 0x30);
 8000924:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000928:	3330      	adds	r3, #48	@ 0x30
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff feb5 	bl	800069c <LCD_write_char>
//wait for # start key
	  	while(currentKeyValue != POUND_KEY){
 8000932:	e008      	b.n	8000946 <main+0x1c2>
	  		if (currentKeyValue == STAR_KEY) break;
 8000934:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000938:	2b0a      	cmp	r3, #10
 800093a:	d009      	beq.n	8000950 <main+0x1cc>
	  		currentKeyValue = Key_Poll();
 800093c:	f7ff fd82 	bl	8000444 <Key_Poll>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  	while(currentKeyValue != POUND_KEY){
 8000946:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800094a:	2b0c      	cmp	r3, #12
 800094c:	d1f2      	bne.n	8000934 <main+0x1b0>
 800094e:	e000      	b.n	8000952 <main+0x1ce>
	  		if (currentKeyValue == STAR_KEY) break;
 8000950:	bf00      	nop
	  	}
//clock loop
	  	//min 10s
	  	for (min10++; min10>0; min10--){
 8000952:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000956:	3301      	adds	r3, #1
 8000958:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800095c:	e092      	b.n	8000a84 <main+0x300>
	  		LCD_set_cursor(clockMin10);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff feba 	bl	80006dc <LCD_set_cursor>
	  		LCD_write_char(min10-1 + 0x30);
 8000968:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800096c:	332f      	adds	r3, #47	@ 0x2f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe93 	bl	800069c <LCD_write_char>
	  		//min 1s
	  		for (min1++; min1>0; min1--){
 8000976:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800097a:	3301      	adds	r3, #1
 800097c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000980:	e06e      	b.n	8000a60 <main+0x2dc>
	  			LCD_set_cursor(clockMin1);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fea8 	bl	80006dc <LCD_set_cursor>
	  			LCD_write_char(min1-1 + 0x30);
 800098c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000990:	332f      	adds	r3, #47	@ 0x2f
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe81 	bl	800069c <LCD_write_char>
	  			//sec 10s
	  			for (sec10++; sec10>0; sec10--){
 800099a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800099e:	3301      	adds	r3, #1
 80009a0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80009a4:	e04a      	b.n	8000a3c <main+0x2b8>
	  				LCD_set_cursor(clockSec10);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe96 	bl	80006dc <LCD_set_cursor>
	  				LCD_write_char(sec10-1 + 0x30);
 80009b0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80009b4:	332f      	adds	r3, #47	@ 0x2f
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe6f 	bl	800069c <LCD_write_char>
	  				//sec 1s
	  				for (sec1++; sec1>0; sec1--){
 80009be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009c2:	3301      	adds	r3, #1
 80009c4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80009c8:	e028      	b.n	8000a1c <main+0x298>
	  					LCD_set_cursor(clockSec1);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe85 	bl	80006dc <LCD_set_cursor>
	  					LCD_write_char(sec1-1 + 0x30);
 80009d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009d6:	332f      	adds	r3, #47	@ 0x2f
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe5e 	bl	800069c <LCD_write_char>
	  					//~1s loop that polls keypad if * pressed
	  					for (uint32_t timeDelay = 0; timeDelay < 1000; timeDelay++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009e4:	e00f      	b.n	8000a06 <main+0x282>
	  						delay_us(930);	//adjust delay based on calibration
 80009e6:	f240 30a2 	movw	r0, #930	@ 0x3a2
 80009ea:	f7ff fc15 	bl	8000218 <delay_us>
	  						if(currentKeyValue == STAR_KEY) break;
 80009ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009f2:	2b0a      	cmp	r3, #10
 80009f4:	d00c      	beq.n	8000a10 <main+0x28c>
	  						currentKeyValue = Keypad_WhichKeyIsPressed();
 80009f6:	f7ff fcb5 	bl	8000364 <Keypad_WhichKeyIsPressed>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  					for (uint32_t timeDelay = 0; timeDelay < 1000; timeDelay++){
 8000a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a02:	3301      	adds	r3, #1
 8000a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a0c:	d3eb      	bcc.n	80009e6 <main+0x262>
 8000a0e:	e000      	b.n	8000a12 <main+0x28e>
	  						if(currentKeyValue == STAR_KEY) break;
 8000a10:	bf00      	nop
	  				for (sec1++; sec1>0; sec1--){
 8000a12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000a1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1d2      	bne.n	80009ca <main+0x246>
	  					}
	  				}//roll overs from 10s place
	  				sec1 = 9;
 8000a24:	2309      	movs	r3, #9
 8000a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	  				if(currentKeyValue == STAR_KEY) break;
 8000a2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a2e:	2b0a      	cmp	r3, #10
 8000a30:	d009      	beq.n	8000a46 <main+0x2c2>
	  			for (sec10++; sec10>0; sec10--){
 8000a32:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8000a3c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1b0      	bne.n	80009a6 <main+0x222>
 8000a44:	e000      	b.n	8000a48 <main+0x2c4>
	  				if(currentKeyValue == STAR_KEY) break;
 8000a46:	bf00      	nop
	  			}
	  			sec10 = 5;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	  			if(currentKeyValue == STAR_KEY) break;
 8000a4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d009      	beq.n	8000a6a <main+0x2e6>
	  		for (min1++; min1>0; min1--){
 8000a56:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8000a60:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d18c      	bne.n	8000982 <main+0x1fe>
 8000a68:	e000      	b.n	8000a6c <main+0x2e8>
	  			if(currentKeyValue == STAR_KEY) break;
 8000a6a:	bf00      	nop
  	  	  	 }
  	  	  	 min1 = 9;
 8000a6c:	2309      	movs	r3, #9
 8000a6e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  	  	  	 if(currentKeyValue == STAR_KEY) break;
 8000a72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a76:	2b0a      	cmp	r3, #10
 8000a78:	d00a      	beq.n	8000a90 <main+0x30c>
	  	for (min10++; min10>0; min10--){
 8000a7a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000a84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f47f af68 	bne.w	800095e <main+0x1da>
 8000a8e:	e000      	b.n	8000a92 <main+0x30e>
  	  	  	 if(currentKeyValue == STAR_KEY) break;
 8000a90:	bf00      	nop
	  	}
//timer done turn on LED
	  	GPIOC->BSRR |= (GPIO_PIN_0);
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <main+0x344>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <main+0x344>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6193      	str	r3, [r2, #24]
//wait till # or * pressed to reset
	  	while (!(currentKeyValue == STAR_KEY || currentKeyValue == POUND_KEY))currentKeyValue = Key_Poll();
 8000a9e:	e004      	b.n	8000aaa <main+0x326>
 8000aa0:	f7ff fcd0 	bl	8000444 <Key_Poll>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000aae:	2b0a      	cmp	r3, #10
 8000ab0:	f43f ae94 	beq.w	80007dc <main+0x58>
 8000ab4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ab8:	2b0c      	cmp	r3, #12
 8000aba:	d1f1      	bne.n	8000aa0 <main+0x31c>
	  currentKeyValue = 0;
 8000abc:	e68e      	b.n	80007dc <main+0x58>
 8000abe:	bf00      	nop
 8000ac0:	08001ce8 	.word	0x08001ce8
 8000ac4:	08001cf8 	.word	0x08001cf8
 8000ac8:	48000800 	.word	0x48000800

08000acc <Led_Config>:
}


//---------------------------------------------------------------------------
void Led_Config(void)
{		// configure GPIO pins PC0-3 for:
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	  	// output mode, push-pull, no pull up or pull down, high speed
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <Led_Config+0x64>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad4:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <Led_Config+0x64>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  GPIOC->MODER   &= ~(GPIO_MODER_MODE0);
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <Led_Config+0x68>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <Led_Config+0x68>)
 8000ae2:	f023 0303 	bic.w	r3, r3, #3
 8000ae6:	6013      	str	r3, [r2, #0]
	  GPIOC->MODER   |=  (GPIO_MODER_MODE0_0);
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <Led_Config+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a11      	ldr	r2, [pc, #68]	@ (8000b34 <Led_Config+0x68>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6013      	str	r3, [r2, #0]
	  GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0);
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <Led_Config+0x68>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <Led_Config+0x68>)
 8000afa:	f023 0301 	bic.w	r3, r3, #1
 8000afe:	6053      	str	r3, [r2, #4]
	  GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0);
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <Led_Config+0x68>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	@ (8000b34 <Led_Config+0x68>)
 8000b06:	f023 0303 	bic.w	r3, r3, #3
 8000b0a:	60d3      	str	r3, [r2, #12]
	  GPIOC->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED0_Pos);
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <Led_Config+0x68>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <Led_Config+0x68>)
 8000b12:	f043 0303 	orr.w	r3, r3, #3
 8000b16:	6093      	str	r3, [r2, #8]
	  GPIOC->BRR |= (GPIO_PIN_0);
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <Led_Config+0x68>)
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1c:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <Led_Config+0x68>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800

08000b38 <SystemClock_Config>:

// System
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b096      	sub	sp, #88	@ 0x58
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2244      	movs	r2, #68	@ 0x44
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f896 	bl	8001c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b5e:	f000 fa2f 	bl	8000fc0 <HAL_PWREx_ControlVoltageScaling>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b68:	f000 f82c 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b78:	2360      	movs	r3, #96	@ 0x60
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fa71 	bl	800106c <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b90:	f000 f818 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	230f      	movs	r3, #15
 8000b96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fe77 	bl	80018a0 <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bb8:	f000 f804 	bl	8000bc4 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3758      	adds	r7, #88	@ 0x58
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Error_Handler>:

void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop

  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bda:	4a0e      	ldr	r2, [pc, #56]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6e:	f000 f893 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca0:	f7ff ffea 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f000 ffdd 	bl	8001c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cce:	f7ff fd59 	bl	8000784 <main>

08000cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce0:	08001d50 	.word	0x08001d50
  ldr r2, =_sbss
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ce8:	2000002c 	.word	0x2000002c

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>

08000cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f91f 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f80e 	bl	8000d20 <HAL_InitTick>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e001      	b.n	8000d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d10:	f7ff ff5e 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_InitTick+0x6c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d023      	beq.n	8000d7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_InitTick+0x70>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_InitTick+0x6c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f91d 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10f      	bne.n	8000d76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d809      	bhi.n	8000d70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f8f5 	bl	8000f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d68:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_InitTick+0x74>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e007      	b.n	8000d80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e004      	b.n	8000d80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e001      	b.n	8000d80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000028 	.word	0x20000028

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000028 	.word	0x20000028

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff47 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff5c 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffb0 	bl	8000ef8 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fce:	d130      	bne.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd0:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fdc:	d038      	beq.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2232      	movs	r2, #50	@ 0x32
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0c9b      	lsrs	r3, r3, #18
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001004:	e002      	b.n	800100c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3b01      	subs	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001018:	d102      	bne.n	8001020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f2      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800102c:	d110      	bne.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e00f      	b.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001032:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800103e:	d007      	beq.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40007000 	.word	0x40007000
 8001064:	20000000 	.word	0x20000000
 8001068:	431bde83 	.word	0x431bde83

0800106c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f000 bc08 	b.w	8001890 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001080:	4b96      	ldr	r3, [pc, #600]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800108a:	4b94      	ldr	r3, [pc, #592]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80e4 	beq.w	800126a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <HAL_RCC_OscConfig+0x4c>
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	f040 808b 	bne.w	80011c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	f040 8087 	bne.w	80011c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b8:	4b88      	ldr	r3, [pc, #544]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_OscConfig+0x64>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e3df      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4b81      	ldr	r3, [pc, #516]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_RCC_OscConfig+0x7e>
 80010e0:	4b7e      	ldr	r3, [pc, #504]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010e8:	e005      	b.n	80010f6 <HAL_RCC_OscConfig+0x8a>
 80010ea:	4b7c      	ldr	r3, [pc, #496]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d223      	bcs.n	8001142 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fd5a 	bl	8001bb8 <RCC_SetFlashLatencyFromMSIRange>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e3c0      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110e:	4b73      	ldr	r3, [pc, #460]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a72      	ldr	r2, [pc, #456]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	496d      	ldr	r1, [pc, #436]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4b6b      	ldr	r3, [pc, #428]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	4968      	ldr	r1, [pc, #416]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e025      	b.n	800118e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001142:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b63      	ldr	r3, [pc, #396]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4960      	ldr	r1, [pc, #384]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001160:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	495b      	ldr	r1, [pc, #364]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fd1a 	bl	8001bb8 <RCC_SetFlashLatencyFromMSIRange>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e380      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800118e:	f000 fc87 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001192:	4602      	mov	r2, r0
 8001194:	4b51      	ldr	r3, [pc, #324]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4950      	ldr	r1, [pc, #320]	@ (80012e0 <HAL_RCC_OscConfig+0x274>)
 80011a0:	5ccb      	ldrb	r3, [r1, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a4e      	ldr	r2, [pc, #312]	@ (80012e4 <HAL_RCC_OscConfig+0x278>)
 80011ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ae:	4b4e      	ldr	r3, [pc, #312]	@ (80012e8 <HAL_RCC_OscConfig+0x27c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fdb4 	bl	8000d20 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d052      	beq.n	8001268 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	e364      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d032      	beq.n	8001234 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ce:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a42      	ldr	r2, [pc, #264]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011da:	f7ff fdf1 	bl	8000dc0 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e2:	f7ff fded 	bl	8000dc0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e34d      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f4:	4b39      	ldr	r3, [pc, #228]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a35      	ldr	r2, [pc, #212]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4930      	ldr	r1, [pc, #192]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121e:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	492b      	ldr	r1, [pc, #172]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
 8001232:	e01a      	b.n	800126a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001234:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001240:	f7ff fdbe 	bl	8000dc0 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001248:	f7ff fdba 	bl	8000dc0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e31a      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1dc>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d073      	beq.n	800135e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d005      	beq.n	8001288 <HAL_RCC_OscConfig+0x21c>
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d10e      	bne.n	80012a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d063      	beq.n	800135c <HAL_RCC_OscConfig+0x2f0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d15f      	bne.n	800135c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e2f7      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x24c>
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e025      	b.n	8001304 <HAL_RCC_OscConfig+0x298>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c0:	d114      	bne.n	80012ec <HAL_RCC_OscConfig+0x280>
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a02      	ldr	r2, [pc, #8]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e013      	b.n	8001304 <HAL_RCC_OscConfig+0x298>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	08001d08 	.word	0x08001d08
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a9f      	ldr	r2, [pc, #636]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fd58 	bl	8000dc0 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fd54 	bl	8000dc0 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2b4      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	4b92      	ldr	r3, [pc, #584]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x2a8>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fd44 	bl	8000dc0 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fd40 	bl	8000dc0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e2a0      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x2d0>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d060      	beq.n	800142c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x310>
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b0c      	cmp	r3, #12
 8001374:	d119      	bne.n	80013aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d116      	bne.n	80013aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x328>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e27d      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b76      	ldr	r3, [pc, #472]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	4973      	ldr	r1, [pc, #460]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a8:	e040      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d023      	beq.n	80013fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fcff 	bl	8000dc0 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fcfb 	bl	8000dc0 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e25b      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d8:	4b65      	ldr	r3, [pc, #404]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b62      	ldr	r3, [pc, #392]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	495f      	ldr	r1, [pc, #380]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fcdb 	bl	8000dc0 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fcd7 	bl	8000dc0 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e237      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001420:	4b53      	ldr	r3, [pc, #332]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d03c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01c      	beq.n	800147a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001440:	4b4b      	ldr	r3, [pc, #300]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001446:	4a4a      	ldr	r2, [pc, #296]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fcb6 	bl	8000dc0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fcb2 	bl	8000dc0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e212      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146a:	4b41      	ldr	r3, [pc, #260]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ef      	beq.n	8001458 <HAL_RCC_OscConfig+0x3ec>
 8001478:	e01b      	b.n	80014b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147a:	4b3d      	ldr	r3, [pc, #244]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800147c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001480:	4a3b      	ldr	r2, [pc, #236]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff fc99 	bl	8000dc0 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fc95 	bl	8000dc0 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e1f5      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a4:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ef      	bne.n	8001492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80a6 	beq.w	800160c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10d      	bne.n	80014ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6593      	str	r3, [r2, #88]	@ 0x58
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e8:	2301      	movs	r3, #1
 80014ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d118      	bne.n	800152a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 80014fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001504:	f7ff fc5c 	bl	8000dc0 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff fc58 	bl	8000dc0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1b8      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d108      	bne.n	8001544 <HAL_RCC_OscConfig+0x4d8>
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001542:	e029      	b.n	8001598 <HAL_RCC_OscConfig+0x52c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d115      	bne.n	8001578 <HAL_RCC_OscConfig+0x50c>
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001552:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001562:	4a03      	ldr	r2, [pc, #12]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x52c>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40007000 	.word	0x40007000
 8001578:	4b9d      	ldr	r3, [pc, #628]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157e:	4a9c      	ldr	r2, [pc, #624]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001588:	4b99      	ldr	r3, [pc, #612]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158e:	4a98      	ldr	r2, [pc, #608]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d016      	beq.n	80015ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fc0e 	bl	8000dc0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fc0a 	bl	8000dc0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e168      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015be:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ed      	beq.n	80015a8 <HAL_RCC_OscConfig+0x53c>
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fbf7 	bl	8000dc0 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff fbf3 	bl	8000dc0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e151      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ec:	4b80      	ldr	r3, [pc, #512]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ed      	bne.n	80015d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fa:	7ffb      	ldrb	r3, [r7, #31]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b7b      	ldr	r3, [pc, #492]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	4a7a      	ldr	r2, [pc, #488]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800160a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	2b00      	cmp	r3, #0
 8001616:	d03c      	beq.n	8001692 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01c      	beq.n	800165a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001620:	4b73      	ldr	r3, [pc, #460]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001626:	4a72      	ldr	r2, [pc, #456]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fbc6 	bl	8000dc0 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001638:	f7ff fbc2 	bl	8000dc0 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e122      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800164a:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800164c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ef      	beq.n	8001638 <HAL_RCC_OscConfig+0x5cc>
 8001658:	e01b      	b.n	8001692 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800165a:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800165c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff fba9 	bl	8000dc0 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001672:	f7ff fba5 	bl	8000dc0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e105      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001684:	4b5a      	ldr	r3, [pc, #360]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001686:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ef      	bne.n	8001672 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80f9 	beq.w	800188e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 80cf 	bne.w	8001844 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016a6:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d12c      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	3b01      	subs	r3, #1
 80016c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d123      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d11b      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d113      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d109      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	3b01      	subs	r3, #1
 800170e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d071      	beq.n	80017f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d068      	beq.n	80017ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800171a:	4b35      	ldr	r3, [pc, #212]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001726:	4b32      	ldr	r3, [pc, #200]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0ac      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2d      	ldr	r2, [pc, #180]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001742:	f7ff fb3d 	bl	8000dc0 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fb39 	bl	8000dc0 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e099      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <HAL_RCC_OscConfig+0x788>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001778:	3a01      	subs	r2, #1
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800178a:	0852      	lsrs	r2, r2, #1
 800178c:	3a01      	subs	r2, #1
 800178e:	0552      	lsls	r2, r2, #21
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001796:	0852      	lsrs	r2, r2, #1
 8001798:	3a01      	subs	r2, #1
 800179a:	0652      	lsls	r2, r2, #25
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017a2:	06d2      	lsls	r2, r2, #27
 80017a4:	430a      	orrs	r2, r1
 80017a6:	4912      	ldr	r1, [pc, #72]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017ac:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0f      	ldr	r2, [pc, #60]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017c4:	f7ff fafc 	bl	8000dc0 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff faf8 	bl	8000dc0 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e058      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_RCC_OscConfig+0x784>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ea:	e050      	b.n	800188e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e04f      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d144      	bne.n	800188e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a20      	ldr	r2, [pc, #128]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800181a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800181c:	f7ff fad0 	bl	8000dc0 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff facc 	bl	8000dc0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e02c      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x7b8>
 8001842:	e024      	b.n	800188e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d01f      	beq.n	800188a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fab3 	bl	8000dc0 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff faaf 	bl	8000dc0 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e00f      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4905      	ldr	r1, [pc, #20]	@ (8001898 <HAL_RCC_OscConfig+0x82c>)
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_RCC_OscConfig+0x830>)
 8001884:	4013      	ands	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
 8001888:	e001      	b.n	800188e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	feeefffc 	.word	0xfeeefffc

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0e7      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b75      	ldr	r3, [pc, #468]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0207 	bic.w	r2, r3, #7
 80018ca:	4970      	ldr	r1, [pc, #448]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b6e      	ldr	r3, [pc, #440]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cf      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d908      	bls.n	8001912 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4960      	ldr	r1, [pc, #384]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d04c      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b5a      	ldr	r3, [pc, #360]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d121      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0a6      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193e:	4b54      	ldr	r3, [pc, #336]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e09a      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001956:	4b4e      	ldr	r3, [pc, #312]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08e      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001966:	4b4a      	ldr	r3, [pc, #296]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e086      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4943      	ldr	r1, [pc, #268]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001988:	f7ff fa1a 	bl	8000dc0 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff fa16 	bl	8000dc0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e06e      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d208      	bcs.n	80019e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	492b      	ldr	r1, [pc, #172]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d210      	bcs.n	8001a16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0207 	bic.w	r2, r3, #7
 80019fc:	4923      	ldr	r1, [pc, #140]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a04:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e036      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4918      	ldr	r1, [pc, #96]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4910      	ldr	r1, [pc, #64]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a54:	f000 f824 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	490b      	ldr	r1, [pc, #44]	@ (8001a94 <HAL_RCC_ClockConfig+0x1f4>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <HAL_RCC_ClockConfig+0x1f8>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_RCC_ClockConfig+0x1fc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f951 	bl	8000d20 <HAL_InitTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a82:	7afb      	ldrb	r3, [r7, #11]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08001d08 	.word	0x08001d08
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d121      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d11e      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ad4:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e005      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001af0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001afc:	4a2b      	ldr	r2, [pc, #172]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e004      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d134      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d003      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0xac>
 8001b44:	e005      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b48:	617b      	str	r3, [r7, #20]
      break;
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4e:	617b      	str	r3, [r7, #20]
      break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	617b      	str	r3, [r7, #20]
      break;
 8001b56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	0e5b      	lsrs	r3, r3, #25
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b98:	69bb      	ldr	r3, [r7, #24]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	@ 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08001d18 	.word	0x08001d18
 8001bb0:	00f42400 	.word	0x00f42400
 8001bb4:	007a1200 	.word	0x007a1200

08001bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bd0:	f7ff f9e8 	bl	8000fa4 <HAL_PWREx_GetVoltageRange>
 8001bd4:	6178      	str	r0, [r7, #20]
 8001bd6:	e014      	b.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	4a24      	ldr	r2, [pc, #144]	@ (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be4:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bf0:	f7ff f9d8 	bl	8000fa4 <HAL_PWREx_GetVoltageRange>
 8001bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c08:	d10b      	bne.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b80      	cmp	r3, #128	@ 0x80
 8001c0e:	d919      	bls.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c14:	d902      	bls.n	8001c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c16:	2302      	movs	r3, #2
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e013      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e010      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b80      	cmp	r3, #128	@ 0x80
 8001c26:	d902      	bls.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c28:	2303      	movs	r3, #3
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e00a      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b80      	cmp	r3, #128	@ 0x80
 8001c32:	d102      	bne.n	8001c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	e004      	b.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b70      	cmp	r3, #112	@ 0x70
 8001c3e:	d101      	bne.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c40:	2301      	movs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 0207 	bic.w	r2, r3, #7
 8001c4c:	4909      	ldr	r1, [pc, #36]	@ (8001c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c54:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40022000 	.word	0x40022000

08001c78 <memset>:
 8001c78:	4402      	add	r2, r0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <memset+0xa>
 8001c80:	4770      	bx	lr
 8001c82:	f803 1b01 	strb.w	r1, [r3], #1
 8001c86:	e7f9      	b.n	8001c7c <memset+0x4>

08001c88 <__libc_init_array>:
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8001cc0 <__libc_init_array+0x38>)
 8001c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8001cc4 <__libc_init_array+0x3c>)
 8001c8e:	1b64      	subs	r4, r4, r5
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	2600      	movs	r6, #0
 8001c94:	42a6      	cmp	r6, r4
 8001c96:	d109      	bne.n	8001cac <__libc_init_array+0x24>
 8001c98:	4d0b      	ldr	r5, [pc, #44]	@ (8001cc8 <__libc_init_array+0x40>)
 8001c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8001ccc <__libc_init_array+0x44>)
 8001c9c:	f000 f818 	bl	8001cd0 <_init>
 8001ca0:	1b64      	subs	r4, r4, r5
 8001ca2:	10a4      	asrs	r4, r4, #2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	42a6      	cmp	r6, r4
 8001ca8:	d105      	bne.n	8001cb6 <__libc_init_array+0x2e>
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb0:	4798      	blx	r3
 8001cb2:	3601      	adds	r6, #1
 8001cb4:	e7ee      	b.n	8001c94 <__libc_init_array+0xc>
 8001cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cba:	4798      	blx	r3
 8001cbc:	3601      	adds	r6, #1
 8001cbe:	e7f2      	b.n	8001ca6 <__libc_init_array+0x1e>
 8001cc0:	08001d48 	.word	0x08001d48
 8001cc4:	08001d48 	.word	0x08001d48
 8001cc8:	08001d48 	.word	0x08001d48
 8001ccc:	08001d4c 	.word	0x08001d4c

08001cd0 <_init>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	bf00      	nop
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr

08001cdc <_fini>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr
