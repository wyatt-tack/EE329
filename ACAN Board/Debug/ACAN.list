
ACAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002794  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800296c  0800296c  0000396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800298c  0800298c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800298c  0800298c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800298c  0800298c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800298c  0800298c  0000398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002990  08002990  00003990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002994  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080029a0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080029a0  000040bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d11  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c31  00000000  00000000  0000dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0000f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d1  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a57  00000000  00000000  00010999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aba4  00000000  00000000  000353f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e603b  00000000  00000000  0003ff94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125fcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  00126014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001283b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002954 	.word	0x08002954

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002954 	.word	0x08002954

08000218 <ADC_Init>:

#include "adc.h"
#include "delay.h"
#include "main.h"

void ADC_Init(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// Turn on the clock of ADC 1 and ADC 2
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 800021c:	4baf      	ldr	r3, [pc, #700]	@ (80004dc <ADC_Init+0x2c4>)
 800021e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000220:	4aae      	ldr	r2, [pc, #696]	@ (80004dc <ADC_Init+0x2c4>)
 8000222:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000226:	64d3      	str	r3, [r2, #76]	@ 0x4c
	//RCC->CCIPR |= RCC_CCIPR_ADC12SEL_1;
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOCEN);
 8000228:	4bac      	ldr	r3, [pc, #688]	@ (80004dc <ADC_Init+0x2c4>)
 800022a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022c:	4aab      	ldr	r2, [pc, #684]	@ (80004dc <ADC_Init+0x2c4>)
 800022e:	f043 0305 	orr.w	r3, r3, #5
 8000232:	64d3      	str	r3, [r2, #76]	@ 0x4c
	 * Power and Calibrate ADCs
	 * --------------------------------------------------------------------------
	 */

	// PWR & CALIB. ADC1
	ADC12_COMMON->CCR |= ADC_CCR_CKMODE_0; // clock source = HCLK/1
 8000234:	4baa      	ldr	r3, [pc, #680]	@ (80004e0 <ADC_Init+0x2c8>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4aa9      	ldr	r2, [pc, #676]	@ (80004e0 <ADC_Init+0x2c8>)
 800023a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800023e:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~(ADC_CR_DEEPPWD); // disable deep-power-down
 8000240:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800024a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800024e:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (ADC_CR_ADVREGEN); // enable V regulator - see RM 18.4.6
 8000250:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800025a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800025e:	6093      	str	r3, [r2, #8]
	delay_us(20); // wait 2ms for ADC to power up
 8000260:	2014      	movs	r0, #20
 8000262:	f000 fa3d 	bl	80006e0 <delay_us>
	ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_4); // PA0=ADC1_IN5, single-ended
 8000266:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800026a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800026e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000272:	f023 0310 	bic.w	r3, r3, #16
 8000276:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	ADC1->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 800027a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000284:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADCAL; // start calibration
 800028e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000298:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800029c:	6093      	str	r3, [r2, #8]

	while (ADC1->CR & ADC_CR_ADCAL)
 800029e:	bf00      	nop
 80002a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dbfa      	blt.n	80002a0 <ADC_Init+0x88>
		; // wait for calib to finish

	ADC2->CR &= ~(ADC_CR_DEEPPWD); // disable deep-power-down
 80002aa:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <ADC_Init+0x2cc>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a8d      	ldr	r2, [pc, #564]	@ (80004e4 <ADC_Init+0x2cc>)
 80002b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80002b4:	6093      	str	r3, [r2, #8]
	ADC2->CR |= (ADC_CR_ADVREGEN); // enable V regulator - see RM 18.4.6
 80002b6:	4b8b      	ldr	r3, [pc, #556]	@ (80004e4 <ADC_Init+0x2cc>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4a8a      	ldr	r2, [pc, #552]	@ (80004e4 <ADC_Init+0x2cc>)
 80002bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002c0:	6093      	str	r3, [r2, #8]
	delay_us(20); // wait 2ms for ADC to power up
 80002c2:	2014      	movs	r0, #20
 80002c4:	f000 fa0c 	bl	80006e0 <delay_us>
	ADC2->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_13 |
 80002c8:	4b86      	ldr	r3, [pc, #536]	@ (80004e4 <ADC_Init+0x2cc>)
 80002ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80002ce:	4a85      	ldr	r2, [pc, #532]	@ (80004e4 <ADC_Init+0x2cc>)
 80002d0:	f423 5320 	bic.w	r3, r3, #10240	@ 0x2800
 80002d4:	f023 0310 	bic.w	r3, r3, #16
 80002d8:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
							ADC_DIFSEL_DIFSEL_11 |
							ADC_DIFSEL_DIFSEL_4); // PA0=ADC2_IN5, single-ended
	ADC2->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF); // disable ADC, single-end calib
 80002dc:	4b81      	ldr	r3, [pc, #516]	@ (80004e4 <ADC_Init+0x2cc>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a80      	ldr	r2, [pc, #512]	@ (80004e4 <ADC_Init+0x2cc>)
 80002e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80002e6:	f023 0301 	bic.w	r3, r3, #1
 80002ea:	6093      	str	r3, [r2, #8]
	ADC2->CR |= ADC_CR_ADCAL; // start calibration
 80002ec:	4b7d      	ldr	r3, [pc, #500]	@ (80004e4 <ADC_Init+0x2cc>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a7c      	ldr	r2, [pc, #496]	@ (80004e4 <ADC_Init+0x2cc>)
 80002f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002f6:	6093      	str	r3, [r2, #8]

	while (ADC2->CR & ADC_CR_ADCAL)
 80002f8:	e007      	b.n	800030a <ADC_Init+0xf2>
	 * Enable ADCs
	 * --------------------------------------------------------------------------
	 */

	// ENABLE ADC1
	ADC1->ISR |= (ADC_ISR_ADRDY); // set to clr ADC Ready flag
 80002fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
	while (ADC2->CR & ADC_CR_ADCAL)
 800030a:	4b76      	ldr	r3, [pc, #472]	@ (80004e4 <ADC_Init+0x2cc>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	2b00      	cmp	r3, #0
 8000310:	dbf3      	blt.n	80002fa <ADC_Init+0xe2>
	ADC1->CR |= ADC_CR_ADEN; // enable ADC
 8000312:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6093      	str	r3, [r2, #8]

	while(!(ADC1->ISR & ADC_ISR_ADRDY)) {;} // wait for ADC Ready flag
 8000322:	bf00      	nop
 8000324:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f8      	beq.n	8000324 <ADC_Init+0x10c>

	ADC1->ISR |= (ADC_ISR_ADRDY); // set to clr ADC Ready flag
 8000332:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6013      	str	r3, [r2, #0]

	// ENABLE ADC2
	ADC2->ISR |= (ADC_ISR_ADRDY); // set to clr ADC Ready flag
 8000342:	4b68      	ldr	r3, [pc, #416]	@ (80004e4 <ADC_Init+0x2cc>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a67      	ldr	r2, [pc, #412]	@ (80004e4 <ADC_Init+0x2cc>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6013      	str	r3, [r2, #0]
	ADC2->CR |= ADC_CR_ADEN; // enable ADC
 800034e:	4b65      	ldr	r3, [pc, #404]	@ (80004e4 <ADC_Init+0x2cc>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	4a64      	ldr	r2, [pc, #400]	@ (80004e4 <ADC_Init+0x2cc>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6093      	str	r3, [r2, #8]

	while(!(ADC2->ISR & ADC_ISR_ADRDY)) {;} // wait for ADC Ready flag
 800035a:	bf00      	nop
 800035c:	4b61      	ldr	r3, [pc, #388]	@ (80004e4 <ADC_Init+0x2cc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <ADC_Init+0x144>

	ADC2->ISR |= (ADC_ISR_ADRDY); // set to clr ADC Ready flag
 8000368:	4b5e      	ldr	r3, [pc, #376]	@ (80004e4 <ADC_Init+0x2cc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a5d      	ldr	r2, [pc, #372]	@ (80004e4 <ADC_Init+0x2cc>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6013      	str	r3, [r2, #0]
	 * Configure ADCs' Sampling & Sequencing
	 * --------------------------------------------------------------------------
	 */

	// CONFIGURE ADC1 SAMPLING & SEQUENCING
	ADC1->SQR1 |= (4 << ADC_SQR1_SQ1_Pos); // Set Channel 4 as sequence 1
 8000374:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800037e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000382:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->CR &= ~(ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800038e:	f023 030c 	bic.w	r3, r3, #12
 8000392:	6093      	str	r3, [r2, #8]
	ADC1->SMPR1 |= (7 << ADC_SMPR1_SMP4_Pos); // ch 4 sample time = 6.5 clocks
 8000394:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800039e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80003a2:	6153      	str	r3, [r2, #20]
	ADC1->CFGR &= ~( ADC_CFGR_CONT	| // single conversion mode
 80003a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003ae:	f423 5330 	bic.w	r3, r3, #11264	@ 0x2c00
 80003b2:	f023 0318 	bic.w	r3, r3, #24
 80003b6:	60d3      	str	r3, [r2, #12]
						  ADC_CFGR_EXTEN 	| // h/w trig disabled for s/w trig
						  ADC_CFGR_RES); // 12-bit resolution

	// CONFIGURE ADC2 SAMPLING & SEQUENCING
	ADC2->SQR1 |= (13 << ADC_SQR1_SQ1_Pos |
 80003b8:	4b4a      	ldr	r3, [pc, #296]	@ (80004e4 <ADC_Init+0x2cc>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a49      	ldr	r2, [pc, #292]	@ (80004e4 <ADC_Init+0x2cc>)
 80003be:	f443 1385 	orr.w	r3, r3, #1089536	@ 0x10a000
 80003c2:	f443 539a 	orr.w	r3, r3, #4928	@ 0x1340
 80003c6:	6313      	str	r3, [r2, #48]	@ 0x30
						11 << ADC_SQR1_SQ2_Pos |
						4 	<< ADC_SQR1_SQ3_Pos ); // Set Channel 4 as sequence 1
	ADC2->CR &= ~(ADC_CR_ADSTART | ADC_CR_JADSTART);
 80003c8:	4b46      	ldr	r3, [pc, #280]	@ (80004e4 <ADC_Init+0x2cc>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a45      	ldr	r2, [pc, #276]	@ (80004e4 <ADC_Init+0x2cc>)
 80003ce:	f023 030c 	bic.w	r3, r3, #12
 80003d2:	6093      	str	r3, [r2, #8]
	ADC2->SMPR2 |= (7 << ADC_SMPR2_SMP13_Pos |
 80003d4:	4b43      	ldr	r3, [pc, #268]	@ (80004e4 <ADC_Init+0x2cc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a42      	ldr	r2, [pc, #264]	@ (80004e4 <ADC_Init+0x2cc>)
 80003da:	f443 6363 	orr.w	r3, r3, #3632	@ 0xe30
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6193      	str	r3, [r2, #24]
						 7 << ADC_SMPR2_SMP11_Pos ); // ch 4 sample time = 6.5 clocks
	ADC2->SMPR1 |= (7 << ADC_SMPR1_SMP4_Pos );
 80003e4:	4b3f      	ldr	r3, [pc, #252]	@ (80004e4 <ADC_Init+0x2cc>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a3e      	ldr	r2, [pc, #248]	@ (80004e4 <ADC_Init+0x2cc>)
 80003ea:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80003ee:	6153      	str	r3, [r2, #20]
	ADC2->CFGR &= ~( ADC_CFGR_CONT	| // single conversion mode
 80003f0:	4b3c      	ldr	r3, [pc, #240]	@ (80004e4 <ADC_Init+0x2cc>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a3b      	ldr	r2, [pc, #236]	@ (80004e4 <ADC_Init+0x2cc>)
 80003f6:	f423 5330 	bic.w	r3, r3, #11264	@ 0x2c00
 80003fa:	f023 0318 	bic.w	r3, r3, #24
 80003fe:	60d3      	str	r3, [r2, #12]
	 * Configure & Enable ADCs' Interrupts
	 * --------------------------------------------------------------------------
	 */

	// ADC1 INTERRUPT CONFIGURE & ENABLE
	ADC1->CR &= ~(ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000400:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800040a:	f023 030c 	bic.w	r3, r3, #12
 800040e:	6093      	str	r3, [r2, #8]
	ADC1->IER |= ADC_IER_EOCIE; // enable end-of-conv interrupt
 8000410:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6053      	str	r3, [r2, #4]
	ADC1->ISR |= ADC_ISR_EOC; // set to clear EOC flag
 8000420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6013      	str	r3, [r2, #0]

	// ADC2 INTERRUPT CONFIGURE & ENABLE
	ADC2->CR &= ~(ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000430:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <ADC_Init+0x2cc>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a2b      	ldr	r2, [pc, #172]	@ (80004e4 <ADC_Init+0x2cc>)
 8000436:	f023 030c 	bic.w	r3, r3, #12
 800043a:	6093      	str	r3, [r2, #8]
	ADC2->IER |= ADC_IER_EOCIE; // enable end-of-conv interrupt
 800043c:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <ADC_Init+0x2cc>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4a28      	ldr	r2, [pc, #160]	@ (80004e4 <ADC_Init+0x2cc>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6053      	str	r3, [r2, #4]
	ADC2->ISR |= ADC_ISR_EOC; // set to clear EOC flag
 8000448:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <ADC_Init+0x2cc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a25      	ldr	r2, [pc, #148]	@ (80004e4 <ADC_Init+0x2cc>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6013      	str	r3, [r2, #0]

	NVIC->ISER[0] = (1<<(ADC1_2_IRQn & 0x1F)); // enable ADC interrupt service
 8000454:	4b24      	ldr	r3, [pc, #144]	@ (80004e8 <ADC_Init+0x2d0>)
 8000456:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800045a:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800045c:	b662      	cpsie	i
}
 800045e:	bf00      	nop
	 * 500Hz ADC2-CH4  - PTA7 (PA7) (Buffer)			POT		0x708
	 * --------------------------------------------------------------------------
	 */

	// SETUP ADC1 PIN
	GPIOA->MODER &= ~(GPIO_MODER_MODE3); // clear mode bits
 8000460:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800046a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800046e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE3); // analog mode for PA3 (set MODER last)
 8000470:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800047a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800047e:	6013      	str	r3, [r2, #0]

	// SETUP ADC2 PINS
	// PA7
	GPIOA->MODER &= ~(GPIO_MODER_MODE5); // clear mode bits
 8000480:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800048a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800048e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE5); // analog mode for PA5 (set MODER last)
 8000490:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800049a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800049e:	6013      	str	r3, [r2, #0]
	// PC5
	GPIOC->MODER &= ~(GPIO_MODER_MODE5); // clear mode bits
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <ADC_Init+0x2d4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <ADC_Init+0x2d4>)
 80004a6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80004aa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE5); // analog mode for PC5 (set MODER last)
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <ADC_Init+0x2d4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <ADC_Init+0x2d4>)
 80004b2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004b6:	6013      	str	r3, [r2, #0]
	// PA7
	GPIOA->MODER &= ~(GPIO_MODER_MODE7); // clear mode bits
 80004b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004c2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE7); // analog mode for PA7 (set MODER last)
 80004c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004d6:	6013      	str	r3, [r2, #0]

	//ADC1->CR |= ADC_CR_ADSTART; // start 1st conversion
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	50000300 	.word	0x50000300
 80004e4:	50000100 	.word	0x50000100
 80004e8:	e000e100 	.word	0xe000e100
 80004ec:	48000800 	.word	0x48000800

080004f0 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void) {
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	if (ADC1->ISR & ADC_ISR_EOC) { // Check if conversion is complete
 80004f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00a      	beq.n	8000518 <ADC1_2_IRQHandler+0x28>
		ADC1->ISR |= ADC_ISR_EOC;  // Clear the interrupt flag
 8000502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6013      	str	r3, [r2, #0]
		adc1_flag = 1;
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <ADC1_2_IRQHandler+0x50>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
	}
	if (ADC2->ISR & ADC_ISR_EOC) { // Check if conversion is complete
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <ADC1_2_IRQHandler+0x54>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	2b00      	cmp	r3, #0
 8000522:	d008      	beq.n	8000536 <ADC1_2_IRQHandler+0x46>
		ADC2->ISR |= ADC_ISR_EOC;  // Clear the interrupt flag
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <ADC1_2_IRQHandler+0x54>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <ADC1_2_IRQHandler+0x54>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6013      	str	r3, [r2, #0]
		adc2_flag = 1;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <ADC1_2_IRQHandler+0x58>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
	}
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	200000b3 	.word	0x200000b3
 8000544:	50000100 	.word	0x50000100
 8000548:	200000b4 	.word	0x200000b4

0800054c <can_init>:
#include "can.h"
//-----------  Can Perephreal Register Setup  ----------------
/*
 * Sets GPIO at alternate function 9 for PTA-11 and PTA-12
 */
void can_init(void){
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <can_init+0x8c>)
 8000552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000554:	4a20      	ldr	r2, [pc, #128]	@ (80005d8 <can_init+0x8c>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	//--- GPIO STUFF -------------------------------------------
	GPIOA->MODER   &= ~(GPIO_MODER_MODE12 | GPIO_MODER_MODE11);
 800055c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000566:	f023 7370 	bic.w	r3, r3, #62914560	@ 0x3c00000
 800056a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  (GPIO_MODER_MODE12_1 | GPIO_MODER_MODE11_1);
 800056c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000576:	f043 7320 	orr.w	r3, r3, #41943040	@ 0x2800000
 800057a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT12 | GPIO_OTYPER_OT11);
 800057c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000586:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800058a:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR   &= ~(GPIO_PUPDR_PUPD12 | GPIO_PUPDR_PUPD11);
 800058c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000596:	f023 7370 	bic.w	r3, r3, #62914560	@ 0x3c00000
 800059a:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED12_Pos) | (3 << GPIO_OSPEEDR_OSPEED11_Pos));
 800059c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005a6:	f043 7370 	orr.w	r3, r3, #62914560	@ 0x3c00000
 80005aa:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[1] &= ~((0xF << GPIO_AFRH_AFSEL12_Pos) | (0xF << GPIO_AFRH_AFSEL11_Pos));
 80005ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005b6:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 80005ba:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  ((0x9 << GPIO_AFRH_AFSEL12_Pos) | (0x9 << GPIO_AFRH_AFSEL11_Pos));
 80005bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005c6:	f443 2319 	orr.w	r3, r3, #626688	@ 0x99000
 80005ca:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <FDCAN1_Init>:
  * Code adapted from HAL code imported from STM32CubeIDE
  * and example credited in header
  */

void FDCAN1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	hfdcan1.Instance = FDCAN1;
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <FDCAN1_Init+0x98>)
 80005e2:	4a25      	ldr	r2, [pc, #148]	@ (8000678 <FDCAN1_Init+0x9c>)
 80005e4:	601a      	str	r2, [r3, #0]
		//FDCAN1 -> CCCR 	&= ~(FDCAN_CCCR_INIT);			//Power Cycle initialization
		//FDCAN1 -> CCCR 	|= 	(FDCAN_CCCR_INIT);
		//while ((FDCAN1->CCCR & FDCAN_CCCR_INIT) == 0U);	//Wait for power cycle
		//FDCAN1 -> CCCR |= FDCAN_CCCR_CCE;	//allows for register change when CCE is high
	  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <FDCAN1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
	  	  //RCC->APB1ENR1 |= (RCC_APB1ENR1_FDCANEN) |(RCC_APB1ENR1_PWREN) ;
	  	  //RCC->CCIPR |= 	(RCC_CCIPR_FDCANSEL_1);
	  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <FDCAN1_Init+0x98>)
 80005ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80005f2:	609a      	str	r2, [r3, #8]
	  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <FDCAN1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	  hfdcan1.Init.AutoRetransmission = ENABLE;		//if message lost retransmit
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <FDCAN1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	741a      	strb	r2, [r3, #16]
	  hfdcan1.Init.TransmitPause = ENABLE;			//
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <FDCAN1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	745a      	strb	r2, [r3, #17]
	  hfdcan1.Init.ProtocolException = DISABLE;		//
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <FDCAN1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	749a      	strb	r2, [r3, #18]
	  hfdcan1.Init.NominalPrescaler = 1;			//FDCAN1 -> CCCR = 0x5103;
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <FDCAN1_Init+0x98>)
 800060e:	2201      	movs	r2, #1
 8000610:	615a      	str	r2, [r3, #20]
	  hfdcan1.Init.NominalSyncJumpWidth = 16;		//FDCAN1 -> NBTP = 0x1e003e0f;
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <FDCAN1_Init+0x98>)
 8000614:	2210      	movs	r2, #16
 8000616:	619a      	str	r2, [r3, #24]
	  hfdcan1.Init.NominalTimeSeg1 =63;				//FDCAN1 -> RXGFC = 0x10000;
 8000618:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <FDCAN1_Init+0x98>)
 800061a:	223f      	movs	r2, #63	@ 0x3f
 800061c:	61da      	str	r2, [r3, #28]
	  hfdcan1.Init.NominalTimeSeg2 = 16;			//FDCAN1->DBTP =  0x00000433;
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <FDCAN1_Init+0x98>)
 8000620:	2210      	movs	r2, #16
 8000622:	621a      	str	r2, [r3, #32]
	  hfdcan1.Init.DataPrescaler = 1;				//FDCAN1 -> PSR = 0x70f;
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <FDCAN1_Init+0x98>)
 8000626:	2201      	movs	r2, #1
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
	  hfdcan1.Init.DataSyncJumpWidth = 4;
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <FDCAN1_Init+0x98>)
 800062c:	2204      	movs	r2, #4
 800062e:	629a      	str	r2, [r3, #40]	@ 0x28
	  hfdcan1.Init.DataTimeSeg1 = 5;
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <FDCAN1_Init+0x98>)
 8000632:	2205      	movs	r2, #5
 8000634:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hfdcan1.Init.DataTimeSeg2 = 4;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <FDCAN1_Init+0x98>)
 8000638:	2204      	movs	r2, #4
 800063a:	631a      	str	r2, [r3, #48]	@ 0x30
	  hfdcan1.Init.StdFiltersNbr = 1;
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <FDCAN1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	635a      	str	r2, [r3, #52]	@ 0x34
	  hfdcan1.Init.ExtFiltersNbr = 0;
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <FDCAN1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	639a      	str	r2, [r3, #56]	@ 0x38
	  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <FDCAN1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	  //Error handlers for sending data to registers
	  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <FDCAN1_Init+0x98>)
 8000650:	f000 fd2c 	bl	80010ac <HAL_FDCAN_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <FDCAN1_Init+0x82>
	  {
	    Error_Handler();
 800065a:	f000 f9cb 	bl	80009f4 <Error_Handler>
	  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <FDCAN1_Init+0x98>)
 8000660:	f000 fe7e 	bl	8001360 <HAL_FDCAN_Start>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <FDCAN1_Init+0x92>
	  	{
		  Error_Handler();
 800066a:	f000 f9c3 	bl	80009f4 <Error_Handler>
	  	}
	  	  //once FDCAN verified, stop initializing transmit
	  	  //FDCAN1 -> CCCR &= ~(FDCAN_CCCR_CCE);
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028
 8000678:	40006400 	.word	0x40006400

0800067c <FDCAN_SendMessage>:

//-----------------  HAL TX Sending Code  ------------------

void FDCAN_SendMessage(uint16_t identifier, uint32_t TxData)
 {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	80fb      	strh	r3, [r7, #6]
	/* 	Code for sending CAN Message and packing message structure
	 * 	Assumes instance of hfdcan is initialized
	 * 	Code adapted from HAL code and example credited in header
	 */
	//FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = identifier;  	// 11-bit identifier (standard CAN frame)
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 800068c:	6013      	str	r3, [r2, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_2; 	// 2 byte data per message
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 800069c:	2202      	movs	r2, #2
 800069e:	60da      	str	r2, [r3, #12]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;		// remove bit reversal for endianess
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;		// structure for CAN2.0 compatibility
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, &TxData);	// add data to RAM FIFO
 80006be:	463b      	mov	r3, r7
 80006c0:	461a      	mov	r2, r3
 80006c2:	4905      	ldr	r1, [pc, #20]	@ (80006d8 <FDCAN_SendMessage+0x5c>)
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <FDCAN_SendMessage+0x60>)
 80006c6:	f000 fe73 	bl	80013b0 <HAL_FDCAN_AddMessageToTxFifoQ>
    delay_us(100);
 80006ca:	2064      	movs	r0, #100	@ 0x64
 80006cc:	f000 f808 	bl	80006e0 <delay_us>
 }
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	20000028 	.word	0x20000028

080006e0 <delay_us>:

// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.
void delay_us(const uint32_t time_us) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <delay_us+0x50>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <delay_us+0x54>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	0c9b      	lsrs	r3, r3, #18
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <delay_us+0x58>)
 80006fc:	3b01      	subs	r3, #1
 80006fe:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <delay_us+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <delay_us+0x58>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <delay_us+0x58>)
 800070c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000710:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 8000712:	bf00      	nop
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <delay_us+0x58>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f9      	beq.n	8000714 <delay_us+0x34>
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000
 8000734:	431bde83 	.word	0x431bde83
 8000738:	e000e010 	.word	0xe000e010

0800073c <main>:
volatile uint8_t tim4flag;
volatile uint8_t adc1_flag;
volatile uint8_t adc2_flag;

int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	//System and heartbeat LED Config
	HAL_Init();
 8000742:	f000 fb5e 	bl	8000e02 <HAL_Init>
	SystemClock_Config();
 8000746:	f000 f909 	bl	800095c <SystemClock_Config>
	Led_Config();
 800074a:	f000 f8d1 	bl	80008f0 <Led_Config>

  	  // CAN Initialization
  	  can_init();
 800074e:	f7ff fefd 	bl	800054c <can_init>
  	  FDCAN1_Init();
 8000752:	f7ff ff43 	bl	80005dc <FDCAN1_Init>

  	  // ADC Initialization
  	  adc1_flag = 0;
 8000756:	4b5f      	ldr	r3, [pc, #380]	@ (80008d4 <main+0x198>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
  	  adc2_flag = 0;
 800075c:	4b5e      	ldr	r3, [pc, #376]	@ (80008d8 <main+0x19c>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
  	  ADC_Init();
 8000762:	f7ff fd59 	bl	8000218 <ADC_Init>


  	  // Timer setup and flag reset
  	  tim2flag = 0;
 8000766:	4b5d      	ldr	r3, [pc, #372]	@ (80008dc <main+0x1a0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
  	  tim3flag = 0;
 800076c:	4b5c      	ldr	r3, [pc, #368]	@ (80008e0 <main+0x1a4>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
  	  tim4flag = 0;
 8000772:	4b5c      	ldr	r3, [pc, #368]	@ (80008e4 <main+0x1a8>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
  	  TIM2_Init();	//500 Hz
 8000778:	f000 fa4a 	bl	8000c10 <TIM2_Init>
  	  TIM3_Init();	//100 Hz
 800077c:	f000 fa74 	bl	8000c68 <TIM3_Init>
  	  TIM4_Init();	//1 Hz
 8000780:	f000 fa9c 	bl	8000cbc <TIM4_Init>


	while (1) {

		if (tim2flag == 1)
 8000784:	4b55      	ldr	r3, [pc, #340]	@ (80008dc <main+0x1a0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b01      	cmp	r3, #1
 800078c:	d16e      	bne.n	800086c <main+0x130>
			/*	500Hz Timer
			 * 		ADC2-CH13
			 * 		ADC2-CH11
			 * 		ADC2-CH4
			 */
			tim2flag = 0;
 800078e:	4b53      	ldr	r3, [pc, #332]	@ (80008dc <main+0x1a0>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
			ADC2->SQR1 &= ~ADC_SQR1_SQ1_Msk; // Clear previous channel
 8000794:	4b54      	ldr	r3, [pc, #336]	@ (80008e8 <main+0x1ac>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a53      	ldr	r2, [pc, #332]	@ (80008e8 <main+0x1ac>)
 800079a:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->SQR1 |= (13 << ADC_SQR1_SQ1_Pos); // Set new channel
 80007a0:	4b51      	ldr	r3, [pc, #324]	@ (80008e8 <main+0x1ac>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	4a50      	ldr	r2, [pc, #320]	@ (80008e8 <main+0x1ac>)
 80007a6:	f443 7350 	orr.w	r3, r3, #832	@ 0x340
 80007aa:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->CR |= ADC_CR_ADSTART; // convert voltage
 80007ac:	4b4e      	ldr	r3, [pc, #312]	@ (80008e8 <main+0x1ac>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	4a4d      	ldr	r2, [pc, #308]	@ (80008e8 <main+0x1ac>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6093      	str	r3, [r2, #8]
			while ((adc2_flag == 0)); // wait for conversion to finish
 80007b8:	bf00      	nop
 80007ba:	4b47      	ldr	r3, [pc, #284]	@ (80008d8 <main+0x19c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0fa      	beq.n	80007ba <main+0x7e>
			adc2_flag = 0;
 80007c4:	4b44      	ldr	r3, [pc, #272]	@ (80008d8 <main+0x19c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
			uint16_t adc2_ch13_value = ADC2->DR;
 80007ca:	4b47      	ldr	r3, [pc, #284]	@ (80008e8 <main+0x1ac>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	80fb      	strh	r3, [r7, #6]
			FDCAN_SendMessage(ADC2CH13ID, adc2_ch13_value);
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	4619      	mov	r1, r3
 80007d4:	f240 7073 	movw	r0, #1907	@ 0x773
 80007d8:	f7ff ff50 	bl	800067c <FDCAN_SendMessage>

			ADC2->SQR1 &= ~ADC_SQR1_SQ1_Msk; // Clear previous channel
 80007dc:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <main+0x1ac>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a41      	ldr	r2, [pc, #260]	@ (80008e8 <main+0x1ac>)
 80007e2:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->SQR1 |= (11 << ADC_SQR1_SQ1_Pos); // Set new channel
 80007e8:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <main+0x1ac>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	4a3e      	ldr	r2, [pc, #248]	@ (80008e8 <main+0x1ac>)
 80007ee:	f443 7330 	orr.w	r3, r3, #704	@ 0x2c0
 80007f2:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->CR |= ADC_CR_ADSTART; // convert voltage
 80007f4:	4b3c      	ldr	r3, [pc, #240]	@ (80008e8 <main+0x1ac>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	4a3b      	ldr	r2, [pc, #236]	@ (80008e8 <main+0x1ac>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6093      	str	r3, [r2, #8]
			while ((adc2_flag == 0)); // wait for conversion to finish
 8000800:	bf00      	nop
 8000802:	4b35      	ldr	r3, [pc, #212]	@ (80008d8 <main+0x19c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0fa      	beq.n	8000802 <main+0xc6>
			adc2_flag = 0;
 800080c:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <main+0x19c>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
			uint16_t adc2_ch11_value = ADC2->DR;
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <main+0x1ac>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	80bb      	strh	r3, [r7, #4]
			FDCAN_SendMessage(ADC2CH11ID, adc2_ch11_value);
 8000818:	88bb      	ldrh	r3, [r7, #4]
 800081a:	4619      	mov	r1, r3
 800081c:	f240 70f2 	movw	r0, #2034	@ 0x7f2
 8000820:	f7ff ff2c 	bl	800067c <FDCAN_SendMessage>

			ADC2->SQR1 &= ~ADC_SQR1_SQ1_Msk; // Clear previous channel
 8000824:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <main+0x1ac>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	4a2f      	ldr	r2, [pc, #188]	@ (80008e8 <main+0x1ac>)
 800082a:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 800082e:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->SQR1 |= (4 << ADC_SQR1_SQ1_Pos); // Set new channel
 8000830:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <main+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000834:	4a2c      	ldr	r2, [pc, #176]	@ (80008e8 <main+0x1ac>)
 8000836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800083a:	6313      	str	r3, [r2, #48]	@ 0x30
			ADC2->CR |= ADC_CR_ADSTART; // convert voltage
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <main+0x1ac>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a29      	ldr	r2, [pc, #164]	@ (80008e8 <main+0x1ac>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6093      	str	r3, [r2, #8]
			while ((adc2_flag == 0)); // wait for conversion to finish
 8000848:	bf00      	nop
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <main+0x19c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0fa      	beq.n	800084a <main+0x10e>
			adc2_flag = 0;
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <main+0x19c>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
			uint16_t adc2_ch4_value = ADC2->DR;
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <main+0x1ac>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	807b      	strh	r3, [r7, #2]
			FDCAN_SendMessage(ADC2CH4ID, adc2_ch4_value);
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	4619      	mov	r1, r3
 8000864:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8000868:	f7ff ff08 	bl	800067c <FDCAN_SendMessage>
		}

		if (tim3flag == 1)
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <main+0x1a4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b01      	cmp	r3, #1
 8000874:	d11d      	bne.n	80008b2 <main+0x176>
		{
			//	100Hz Timer for ADC1-CH4
			tim3flag = 0;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <main+0x1a4>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
			ADC1->CR |= ADC_CR_ADSTART; // convert voltage
 800087c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6093      	str	r3, [r2, #8]
			while ((adc1_flag == 0)); // wait for conversion to finish
 800088c:	bf00      	nop
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <main+0x198>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0fa      	beq.n	800088e <main+0x152>
			adc1_flag = 0;
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <main+0x198>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
			uint16_t adc1_ch4_value = ADC1->DR;
 800089e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	803b      	strh	r3, [r7, #0]
			FDCAN_SendMessage(ADC1CH4ID, adc1_ch4_value);
 80008a6:	883b      	ldrh	r3, [r7, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f240 704b 	movw	r0, #1867	@ 0x74b
 80008ae:	f7ff fee5 	bl	800067c <FDCAN_SendMessage>
		}

		if (tim4flag == 1)
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <main+0x1a8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	f47f af63 	bne.w	8000784 <main+0x48>
		{
			// Heartbeat LED Timer = 1Hz
			tim4flag = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <main+0x1a8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR ^= (GPIO_PIN_0);
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <main+0x1b0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <main+0x1b0>)
 80008ca:	f083 0301 	eor.w	r3, r3, #1
 80008ce:	6153      	str	r3, [r2, #20]
		if (tim2flag == 1)
 80008d0:	e758      	b.n	8000784 <main+0x48>
 80008d2:	bf00      	nop
 80008d4:	200000b3 	.word	0x200000b3
 80008d8:	200000b4 	.word	0x200000b4
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	200000b1 	.word	0x200000b1
 80008e4:	200000b2 	.word	0x200000b2
 80008e8:	50000100 	.word	0x50000100
 80008ec:	48000800 	.word	0x48000800

080008f0 <Led_Config>:
}

//-----------------  Functions  ---------------------------

void Led_Config(void)
{		// configure GPIO pin PB14 for:
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	  	// output mode, push-pull, no pull up or pull down, high speed
  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <Led_Config+0x64>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <Led_Config+0x64>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  LED_PORT->MODER   &= ~(GPIO_MODER_MODE0);
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <Led_Config+0x68>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <Led_Config+0x68>)
 8000906:	f023 0303 	bic.w	r3, r3, #3
 800090a:	6013      	str	r3, [r2, #0]
  LED_PORT->MODER   |=  (GPIO_MODER_MODE0_0);
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <Led_Config+0x68>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a11      	ldr	r2, [pc, #68]	@ (8000958 <Led_Config+0x68>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]
  LED_PORT->OTYPER  &= ~(GPIO_OTYPER_OT0);
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <Led_Config+0x68>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <Led_Config+0x68>)
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6053      	str	r3, [r2, #4]
  LED_PORT->PUPDR   &= ~(GPIO_PUPDR_PUPD0);
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <Led_Config+0x68>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <Led_Config+0x68>)
 800092a:	f023 0303 	bic.w	r3, r3, #3
 800092e:	60d3      	str	r3, [r2, #12]
  LED_PORT->OSPEEDR |=  (3 << GPIO_OSPEEDR_OSPEED0_Pos);
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <Led_Config+0x68>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <Led_Config+0x68>)
 8000936:	f043 0303 	orr.w	r3, r3, #3
 800093a:	6093      	str	r3, [r2, #8]
  LED_PORT->BRR |= (GPIO_PIN_0);
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <Led_Config+0x68>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000940:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <Led_Config+0x68>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800

0800095c <SystemClock_Config>:
//-----------------  HAL and System Code  ------------------
/*
 * Imported from STM32CubeIDE
 */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	@ 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2238      	movs	r2, #56	@ 0x38
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f001 ffc6 	bl	80028fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000982:	f000 ffc3 	bl	800190c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2340      	movs	r3, #64	@ 0x40
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80009a0:	2314      	movs	r3, #20
 80009a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 f85d 	bl	8001a74 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009c0:	f000 f818 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2303      	movs	r3, #3
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2102      	movs	r1, #2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fb5b 	bl	8002098 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009e8:	f000 f804 	bl	80009f4 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	@ 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <Error_Handler>:

void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a36:	f001 f80d 	bl	8001a54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09e      	sub	sp, #120	@ 0x78
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2254      	movs	r2, #84	@ 0x54
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 ff47 	bl	80028fc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a20      	ldr	r2, [pc, #128]	@ (8000af4 <HAL_FDCAN_MspInit+0xac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d139      	bne.n	8000aec <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a82:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fce9 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a94:	f7ff ffae 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <HAL_FDCAN_MspInit+0xb0>)
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <HAL_FDCAN_MspInit+0xb0>)
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_FDCAN_MspInit+0xb0>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_FDCAN_MspInit+0xb0>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab4:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <HAL_FDCAN_MspInit+0xb0>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_FDCAN_MspInit+0xb0>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ac8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000acc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ada:	2309      	movs	r3, #9
 8000adc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f000 fd8e 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000aec:	bf00      	nop
 8000aee:	3778      	adds	r7, #120	@ 0x78
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40006400 	.word	0x40006400
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f9a9 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	@ (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	@ (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	@ (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <TIM2_Init>:
* -------------------------------------------------------------------------- */

#include "timer.h"


void TIM2_Init(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	// Enable TIM2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <TIM2_Init+0x54>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c18:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <TIM2_Init+0x54>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set prescaler and auto-reload for 500 Hz
	TIM2->PSC = (170000000 / 1000000) - 1; // Prescaler for 500 kHz
 8000c20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c24:	22a9      	movs	r2, #169	@ 0xa9
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 999;                      // Auto-reload for 500 Hz
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c30:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER |= TIM_DIER_UIE;           // Enable update interrupt
 8000c32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;             // Start timer
 8000c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6013      	str	r3, [r2, #0]

	// Enable TIM2 interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000c52:	201c      	movs	r0, #28
 8000c54:	f7ff ff94 	bl	8000b80 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201c      	movs	r0, #28
 8000c5c:	f7ff ffae 	bl	8000bbc <__NVIC_SetPriority>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000

08000c68 <TIM3_Init>:

void TIM3_Init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	// Enable TIM3 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <TIM3_Init+0x4c>)
 8000c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <TIM3_Init+0x4c>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set prescaler and auto-reload for 100 Hz
	TIM3->PSC = (170000000 / 200000) - 1; // Prescaler for 100 kHz
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <TIM3_Init+0x50>)
 8000c7a:	f240 3251 	movw	r2, #849	@ 0x351
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 999;                      // Auto-reload for 100 Hz
 8000c80:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <TIM3_Init+0x50>)
 8000c82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c86:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->DIER |= TIM_DIER_UIE;           // Enable update interrupt
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <TIM3_Init+0x50>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <TIM3_Init+0x50>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= TIM_CR1_CEN;             // Start timer
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <TIM3_Init+0x50>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <TIM3_Init+0x50>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

	// Enable TIM3 interrupt in NVIC
	NVIC_EnableIRQ(TIM3_IRQn);
 8000ca0:	201d      	movs	r0, #29
 8000ca2:	f7ff ff6d 	bl	8000b80 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	201d      	movs	r0, #29
 8000caa:	f7ff ff87 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40000400 	.word	0x40000400

08000cbc <TIM4_Init>:
void TIM4_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	// Enable TIM4 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <TIM4_Init+0x48>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <TIM4_Init+0x48>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set prescaler and auto-reload for 1 Hz
	TIM4->PSC = (170000000 / 1000) - 1; // Prescaler for 1 kHz
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <TIM4_Init+0x4c>)
 8000cce:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <TIM4_Init+0x50>)
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 999;                      // Auto-reload for 1 Hz
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <TIM4_Init+0x4c>)
 8000cd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->DIER |= TIM_DIER_UIE;           // Enable update interrupt
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <TIM4_Init+0x4c>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <TIM4_Init+0x4c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= TIM_CR1_CEN;             // Start timer
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <TIM4_Init+0x4c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <TIM4_Init+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6013      	str	r3, [r2, #0]

	// Enable TIM4 interrupt in NVIC
	NVIC_EnableIRQ(TIM4_IRQn);
 8000cf2:	201e      	movs	r0, #30
 8000cf4:	f7ff ff44 	bl	8000b80 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn, 1);
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	201e      	movs	r0, #30
 8000cfc:	f7ff ff5e 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40000800 	.word	0x40000800
 8000d0c:	0002980f 	.word	0x0002980f

08000d10 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) { // Check update interrupt flag
 8000d14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00a      	beq.n	8000d38 <TIM2_IRQHandler+0x28>
		TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8000d22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	6113      	str	r3, [r2, #16]

		tim2flag = 1;
 8000d32:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <TIM2_IRQHandler+0x34>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]

	}
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000b0 	.word	0x200000b0

08000d48 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) { // Check update interrupt flag
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <TIM3_IRQHandler+0x2c>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <TIM3_IRQHandler+0x2c>)
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <TIM3_IRQHandler+0x2c>)
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6113      	str	r3, [r2, #16]

		tim3flag = 1;
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <TIM3_IRQHandler+0x30>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]

	}
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40000400 	.word	0x40000400
 8000d78:	200000b1 	.word	0x200000b1

08000d7c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) { // Check update interrupt flag
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <TIM4_IRQHandler+0x2c>)
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <TIM4_IRQHandler+0x2c>)
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <TIM4_IRQHandler+0x2c>)
 8000d92:	f023 0301 	bic.w	r3, r3, #1
 8000d96:	6113      	str	r3, [r2, #16]

		tim4flag = 1;
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <TIM4_IRQHandler+0x30>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]

	}
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40000800 	.word	0x40000800
 8000dac:	200000b2 	.word	0x200000b2

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff fed2 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f001 fd95 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fcab 	bl	800073c <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df4:	08002994 	.word	0x08002994
  ldr r2, =_sbss
 8000df8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dfc:	200000bc 	.word	0x200000bc

08000e00 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC3_IRQHandler>

08000e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f91b 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f80e 	bl	8000e34 <HAL_InitTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	e001      	b.n	8000e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e24:	f7ff fdec 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e28:	79fb      	ldrb	r3, [r7, #7]

}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_InitTick+0x68>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d022      	beq.n	8000e8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_InitTick+0x68>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f918 	bl	8001092 <HAL_SYSTICK_Config>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10f      	bne.n	8000e88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b0f      	cmp	r3, #15
 8000e6c:	d809      	bhi.n	8000e82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	f04f 30ff 	mov.w	r0, #4294967295
 8000e76:	f000 f8f2 	bl	800105e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_InitTick+0x70>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e004      	b.n	8000e92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e001      	b.n	8000e92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_IncTick+0x1c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_IncTick+0x20>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a03      	ldr	r2, [pc, #12]	@ (8000ec4 <HAL_IncTick+0x1c>)
 8000eb8:	6013      	str	r3, [r2, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	200000b8 	.word	0x200000b8
 8000ec8:	20000008 	.word	0x20000008

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200000b8 	.word	0x200000b8

08000ee4 <__NVIC_SetPriorityGrouping>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff47 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff5e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff90 	bl	8000f9c <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5f 	bl	8000f48 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffb2 	bl	8001004 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e147      	b.n	800134e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d106      	bne.n	80010d8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fcb8 	bl	8000a48 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0210 	bic.w	r2, r2, #16
 80010e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e8:	f7ff fef0 	bl	8000ecc <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ee:	e012      	b.n	8001116 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010f0:	f7ff feec 	bl	8000ecc <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	d90b      	bls.n	8001116 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2203      	movs	r2, #3
 800110e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e11b      	b.n	800134e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b08      	cmp	r3, #8
 8001122:	d0e5      	beq.n	80010f0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001134:	f7ff feca 	bl	8000ecc <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800113a:	e012      	b.n	8001162 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800113c:	f7ff fec6 	bl	8000ecc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90b      	bls.n	8001162 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0f5      	b.n	800134e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0e5      	beq.n	800113c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0202 	orr.w	r2, r2, #2
 800117e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a74      	ldr	r2, [pc, #464]	@ (8001358 <HAL_FDCAN_Init+0x2ac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d103      	bne.n	8001192 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800118a:	4a74      	ldr	r2, [pc, #464]	@ (800135c <HAL_FDCAN_Init+0x2b0>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7c1b      	ldrb	r3, [r3, #16]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d108      	bne.n	80011ac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011a8:	619a      	str	r2, [r3, #24]
 80011aa:	e007      	b.n	80011bc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7c5b      	ldrb	r3, [r3, #17]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	e007      	b.n	80011e6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7c9b      	ldrb	r3, [r3, #18]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011fc:	619a      	str	r2, [r3, #24]
 80011fe:	e007      	b.n	8001210 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800120e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001234:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0210 	bic.w	r2, r2, #16
 8001244:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0204 	orr.w	r2, r2, #4
 800125c:	619a      	str	r2, [r3, #24]
 800125e:	e02c      	b.n	80012ba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d028      	beq.n	80012ba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d01c      	beq.n	80012aa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800127e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0210 	orr.w	r2, r2, #16
 800128e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d110      	bne.n	80012ba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0220 	orr.w	r2, r2, #32
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	e007      	b.n	80012ba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0220 	orr.w	r2, r2, #32
 80012b8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	3b01      	subs	r3, #1
 80012c0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012d2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	3b01      	subs	r3, #1
 80012dc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012e2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012e4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012ee:	d115      	bne.n	800131c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	3b01      	subs	r3, #1
 80012fc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012fe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	3b01      	subs	r3, #1
 8001306:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001308:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001310:	3b01      	subs	r3, #1
 8001312:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001318:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800131a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f880 	bl	8001438 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40006400 	.word	0x40006400
 800135c:	40006500 	.word	0x40006500

08001360 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e006      	b.n	80013a4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139a:	f043 0204 	orr.w	r2, r3, #4
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d12c      	bne.n	8001422 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e023      	b.n	8001430 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f886 	bl	8001510 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001414:	2201      	movs	r2, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	409a      	lsls	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e006      	b.n	8001430 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001426:	f043 0208 	orr.w	r2, r3, #8
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001440:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001442:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2f      	ldr	r2, [pc, #188]	@ (8001508 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d103      	bne.n	8001456 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001454:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a2c      	ldr	r2, [pc, #176]	@ (800150c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d103      	bne.n	8001468 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001466:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001476:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a4:	061a      	lsls	r2, r3, #24
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e005      	b.n	80014ea <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3304      	adds	r3, #4
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3f3      	bcc.n	80014de <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	4000a400 	.word	0x4000a400
 8001508:	40006800 	.word	0x40006800
 800150c:	40006c00 	.word	0x40006c00

08001510 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800152e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001536:	4313      	orrs	r3, r2
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e00a      	b.n	8001552 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001544:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800154a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800154c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001550:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800155c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001562:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001568:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3304      	adds	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3304      	adds	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e020      	b.n	80015e6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3303      	adds	r3, #3
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3302      	adds	r3, #2
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	440b      	add	r3, r1
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015bc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	440b      	add	r3, r1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80015ca:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80015d4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	3304      	adds	r3, #4
 80015de:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3304      	adds	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <FDCAN_CopyMessageToRAM+0xf4>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	461a      	mov	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d3d6      	bcc.n	80015a4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	@ 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	0800297c 	.word	0x0800297c

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001616:	e15a      	b.n	80018ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 814c 	beq.w	80018c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d005      	beq.n	8001648 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001644:	2b02      	cmp	r3, #2
 8001646:	d130      	bne.n	80016aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167e:	2201      	movs	r2, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 0201 	and.w	r2, r3, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d017      	beq.n	80016e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d123      	bne.n	800173a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	6939      	ldr	r1, [r7, #16]
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0203 	and.w	r2, r3, #3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a6 	beq.w	80018c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177c:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001780:	4a5a      	ldr	r2, [pc, #360]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6613      	str	r3, [r2, #96]	@ 0x60
 8001788:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 800178a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001794:	4a56      	ldr	r2, [pc, #344]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017be:	d01f      	beq.n	8001800 <HAL_GPIO_Init+0x1f8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4c      	ldr	r2, [pc, #304]	@ (80018f4 <HAL_GPIO_Init+0x2ec>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d019      	beq.n	80017fc <HAL_GPIO_Init+0x1f4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4b      	ldr	r2, [pc, #300]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4a      	ldr	r2, [pc, #296]	@ (80018fc <HAL_GPIO_Init+0x2f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1ec>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a49      	ldr	r2, [pc, #292]	@ (8001900 <HAL_GPIO_Init+0x2f8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a48      	ldr	r2, [pc, #288]	@ (8001904 <HAL_GPIO_Init+0x2fc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1e4>
 80017e8:	2305      	movs	r3, #5
 80017ea:	e00a      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017ec:	2306      	movs	r3, #6
 80017ee:	e008      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 8001800:	2300      	movs	r3, #0
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001812:	4937      	ldr	r1, [pc, #220]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001820:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001844:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184a:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <HAL_GPIO_Init+0x300>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800186e:	4a26      	ldr	r2, [pc, #152]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001898:	4a1b      	ldr	r2, [pc, #108]	@ (8001908 <HAL_GPIO_Init+0x300>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_GPIO_Init+0x300>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c2:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_GPIO_Init+0x300>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f ae9d 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000800 	.word	0x48000800
 80018fc:	48000c00 	.word	0x48000c00
 8001900:	48001000 	.word	0x48001000
 8001904:	48001400 	.word	0x48001400
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d141      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800191a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001926:	d131      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001928:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800192e:	4a46      	ldr	r2, [pc, #280]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001940:	4a41      	ldr	r2, [pc, #260]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001946:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001948:	4b40      	ldr	r3, [pc, #256]	@ (8001a4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2232      	movs	r2, #50	@ 0x32
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a3f      	ldr	r2, [pc, #252]	@ (8001a50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195e:	e002      	b.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3b01      	subs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001966:	4b38      	ldr	r3, [pc, #224]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001972:	d102      	bne.n	800197a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f2      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197a:	4b33      	ldr	r3, [pc, #204]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001986:	d158      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e057      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001992:	4a2d      	ldr	r2, [pc, #180]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001998:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800199c:	e04d      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a4:	d141      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b2:	d131      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b4:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ba:	4a23      	ldr	r2, [pc, #140]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2232      	movs	r2, #50	@ 0x32
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ea:	e002      	b.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fe:	d102      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f2      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a12:	d112      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e011      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a28:	e007      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e2fe      	b.n	8002084 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d075      	beq.n	8001b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4b97      	ldr	r3, [pc, #604]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4b94      	ldr	r3, [pc, #592]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b8d      	ldr	r3, [pc, #564]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2d9      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x74>
 8001ada:	4b85      	ldr	r3, [pc, #532]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a84      	ldr	r2, [pc, #528]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	4b78      	ldr	r3, [pc, #480]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a77      	ldr	r2, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b75      	ldr	r3, [pc, #468]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a74      	ldr	r2, [pc, #464]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f9ce 	bl	8000ecc <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f9ca 	bl	8000ecc <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	@ 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e29e      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f9ba 	bl	8000ecc <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f9b6 	bl	8000ecc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e28a      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	4b60      	ldr	r3, [pc, #384]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b94:	4b56      	ldr	r3, [pc, #344]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x136>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x13c>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11f      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x154>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e25d      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b49      	ldr	r3, [pc, #292]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	4946      	ldr	r1, [pc, #280]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bdc:	4b45      	ldr	r3, [pc, #276]	@ (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f927 	bl	8000e34 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d043      	beq.n	8001c74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e249      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f962 	bl	8000ecc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f95e 	bl	8000ecc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e232      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1e:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	492d      	ldr	r1, [pc, #180]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e01a      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f93e 	bl	8000ecc <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f93a 	bl	8000ecc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e20e      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c66:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e0>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d041      	beq.n	8001d06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c90:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f917 	bl	8000ecc <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f913 	bl	8000ecc <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1e7      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ef      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
 8001cc2:	e020      	b.n	8001d06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cca:	4a09      	ldr	r2, [pc, #36]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f8fa 	bl	8000ecc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cda:	e00d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f8f6 	bl	8000ecc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d906      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1ca      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ea      	bne.n	8001cdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a6 	beq.w	8001e60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d18:	4b84      	ldr	r3, [pc, #528]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x2b6>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	4a7e      	ldr	r2, [pc, #504]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4b79      	ldr	r3, [pc, #484]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d56:	4b76      	ldr	r3, [pc, #472]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff f8b3 	bl	8000ecc <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff f8af 	bl	8000ecc <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e183      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_RCC_OscConfig+0x32e>
 8001d90:	4b66      	ldr	r3, [pc, #408]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da0:	e024      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d110      	bne.n	8001dcc <HAL_RCC_OscConfig+0x358>
 8001daa:	4b60      	ldr	r3, [pc, #384]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db0:	4a5e      	ldr	r2, [pc, #376]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dba:	4b5c      	ldr	r3, [pc, #368]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001dcc:	4b57      	ldr	r3, [pc, #348]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd2:	4a56      	ldr	r2, [pc, #344]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff f86a 	bl	8000ecc <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f866 	bl	8000ecc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e138      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	4b46      	ldr	r3, [pc, #280]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ed      	beq.n	8001dfc <HAL_RCC_OscConfig+0x388>
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff f853 	bl	8000ecc <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff f84f 	bl	8000ecc <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e121      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	4b3a      	ldr	r3, [pc, #232]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ed      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	4a34      	ldr	r2, [pc, #208]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01c      	beq.n	8001eae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e74:	4b2d      	ldr	r3, [pc, #180]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff f822 	bl	8000ecc <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8c:	f7ff f81e 	bl	8000ecc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0f2      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e9e:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ef      	beq.n	8001e8c <HAL_RCC_OscConfig+0x418>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f805 	bl	8000ecc <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec6:	f7ff f801 	bl	8000ecc <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0d5      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80c9 	beq.w	8002082 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	f000 8083 	beq.w	8002004 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d15e      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe ffdb 	bl	8000ecc <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e00c      	b.n	8001f34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe ffd7 	bl	8000ecc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d905      	bls.n	8001f34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0ab      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	4b55      	ldr	r3, [pc, #340]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ec      	bne.n	8001f1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	4b52      	ldr	r3, [pc, #328]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b52      	ldr	r3, [pc, #328]	@ (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6a11      	ldr	r1, [r2, #32]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f50:	3a01      	subs	r2, #1
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001f5a:	0212      	lsls	r2, r2, #8
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f62:	0852      	lsrs	r2, r2, #1
 8001f64:	3a01      	subs	r2, #1
 8001f66:	0552      	lsls	r2, r2, #21
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f6e:	0852      	lsrs	r2, r2, #1
 8001f70:	3a01      	subs	r2, #1
 8001f72:	0652      	lsls	r2, r2, #25
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f7a:	06d2      	lsls	r2, r2, #27
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	4943      	ldr	r1, [pc, #268]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b41      	ldr	r3, [pc, #260]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a40      	ldr	r2, [pc, #256]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f90:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff96 	bl	8000ecc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe ff92 	bl	8000ecc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e066      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x530>
 8001fc2:	e05e      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b31      	ldr	r3, [pc, #196]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a30      	ldr	r2, [pc, #192]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff7c 	bl	8000ecc <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe ff78 	bl	8000ecc <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04c      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4924      	ldr	r1, [pc, #144]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <HAL_RCC_OscConfig+0x620>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60cb      	str	r3, [r1, #12]
 8002002:	e03e      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e039      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002010:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	429a      	cmp	r2, r3
 8002022:	d12c      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	3b01      	subs	r3, #1
 8002030:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d123      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d11b      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d113      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d109      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	019f800c 	.word	0x019f800c
 8002094:	feeefffc 	.word	0xfeeefffc

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e11e      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b91      	ldr	r3, [pc, #580]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b8e      	ldr	r3, [pc, #568]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	498c      	ldr	r1, [pc, #560]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b8a      	ldr	r3, [pc, #552]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e106      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d073      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d129      	bne.n	8002148 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f4:	4b81      	ldr	r3, [pc, #516]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0f4      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002104:	f000 f966 	bl	80023d4 <RCC_GetSysClockFreqFromPLLSource>
 8002108:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4a7c      	ldr	r2, [pc, #496]	@ (8002300 <HAL_RCC_ClockConfig+0x268>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d93f      	bls.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002112:	4b7a      	ldr	r3, [pc, #488]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	d033      	beq.n	8002192 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12f      	bne.n	8002192 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002132:	4b72      	ldr	r3, [pc, #456]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800213a:	4a70      	ldr	r2, [pc, #448]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002140:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e024      	b.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0c6      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b66      	ldr	r3, [pc, #408]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0be      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002170:	f000 f8ce 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8002174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4a61      	ldr	r2, [pc, #388]	@ (8002300 <HAL_RCC_ClockConfig+0x268>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d909      	bls.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800217e:	4b5f      	ldr	r3, [pc, #380]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002186:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800218c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b5a      	ldr	r3, [pc, #360]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4957      	ldr	r1, [pc, #348]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7fe fe92 	bl	8000ecc <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fe8e 	bl	8000ecc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e095      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b4e      	ldr	r3, [pc, #312]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d023      	beq.n	8002228 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a42      	ldr	r2, [pc, #264]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002204:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800220c:	4a3b      	ldr	r2, [pc, #236]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002212:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4936      	ldr	r1, [pc, #216]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
 8002226:	e008      	b.n	800223a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b80      	cmp	r3, #128	@ 0x80
 800222c:	d105      	bne.n	800223a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800222e:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4a32      	ldr	r2, [pc, #200]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002238:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223a:	4b2f      	ldr	r3, [pc, #188]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d21d      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002248:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 020f 	bic.w	r2, r3, #15
 8002250:	4929      	ldr	r1, [pc, #164]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002258:	f7fe fe38 	bl	8000ecc <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7fe fe34 	bl	8000ecc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e03b      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ed      	bne.n	8002260 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4917      	ldr	r1, [pc, #92]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490f      	ldr	r1, [pc, #60]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c2:	f000 f825 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490c      	ldr	r1, [pc, #48]	@ (8002304 <HAL_RCC_ClockConfig+0x26c>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_RCC_ClockConfig+0x270>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_RCC_ClockConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fda4 	bl	8000e34 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	04c4b400 	.word	0x04c4b400
 8002304:	0800296c 	.word	0x0800296c
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002316:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d102      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002322:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e047      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002334:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e03e      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800233a:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d136      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3301      	adds	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d10c      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	68d2      	ldr	r2, [r2, #12]
 8002370:	0a12      	lsrs	r2, r2, #8
 8002372:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
      break;
 800237c:	e00c      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800237e:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4a10      	ldr	r2, [pc, #64]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	0a12      	lsrs	r2, r2, #8
 800238c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
      break;
 8002396:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0e5b      	lsrs	r3, r3, #25
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e001      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	007a1200 	.word	0x007a1200

080023d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3301      	adds	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d10c      	bne.n	8002412 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f8:	4a17      	ldr	r2, [pc, #92]	@ (8002458 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002402:	68d2      	ldr	r2, [r2, #12]
 8002404:	0a12      	lsrs	r2, r2, #8
 8002406:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
    break;
 8002410:	e00c      	b.n	800242c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	0a12      	lsrs	r2, r2, #8
 8002420:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    break;
 800242a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0e5b      	lsrs	r3, r3, #25
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000
 8002458:	007a1200 	.word	0x007a1200
 800245c:	00f42400 	.word	0x00f42400

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002468:	2300      	movs	r3, #0
 800246a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800246c:	2300      	movs	r3, #0
 800246e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8098 	beq.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a3f      	ldr	r2, [pc, #252]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a39      	ldr	r2, [pc, #228]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b6:	f7fe fd09 	bl	8000ecc <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024bc:	e009      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe fd05 	bl	8000ecc <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	74fb      	strb	r3, [r7, #19]
        break;
 80024d0:	e005      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d2:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ef      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d159      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01e      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d019      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800250a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800250c:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800251c:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe fcc5 	bl	8000ecc <HAL_GetTick>
 8002542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002544:	e00b      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fcc1 	bl	8000ecc <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d902      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	74fb      	strb	r3, [r7, #19]
            break;
 800255c:	e006      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ec      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002580:	4903      	ldr	r1, [pc, #12]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	74bb      	strb	r3, [r7, #18]
 800258e:	e005      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259c:	7c7b      	ldrb	r3, [r7, #17]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4ba7      	ldr	r3, [pc, #668]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	4aa6      	ldr	r2, [pc, #664]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f023 0203 	bic.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	499d      	ldr	r1, [pc, #628]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025dc:	4b98      	ldr	r3, [pc, #608]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f023 020c 	bic.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4995      	ldr	r1, [pc, #596]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fe:	4b90      	ldr	r3, [pc, #576]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	498c      	ldr	r1, [pc, #560]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002620:	4b87      	ldr	r3, [pc, #540]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	4984      	ldr	r1, [pc, #528]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002642:	4b7f      	ldr	r3, [pc, #508]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	497b      	ldr	r1, [pc, #492]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002664:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4973      	ldr	r1, [pc, #460]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	4b6e      	ldr	r3, [pc, #440]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	496a      	ldr	r1, [pc, #424]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4962      	ldr	r1, [pc, #392]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	4959      	ldr	r1, [pc, #356]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ec:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	4951      	ldr	r1, [pc, #324]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270e:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002714:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	4948      	ldr	r1, [pc, #288]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002730:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4940      	ldr	r1, [pc, #256]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a3a      	ldr	r2, [pc, #232]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002768:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	4932      	ldr	r1, [pc, #200]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002792:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027a0:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	4924      	ldr	r1, [pc, #144]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e6:	4916      	ldr	r1, [pc, #88]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d019      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282e:	d109      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a02      	ldr	r2, [pc, #8]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
 800283c:	e002      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002850:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4926      	ldr	r1, [pc, #152]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a20      	ldr	r2, [pc, #128]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002896:	4918      	ldr	r1, [pc, #96]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	490a      	ldr	r1, [pc, #40]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <memset>:
 80028fc:	4402      	add	r2, r0
 80028fe:	4603      	mov	r3, r0
 8002900:	4293      	cmp	r3, r2
 8002902:	d100      	bne.n	8002906 <memset+0xa>
 8002904:	4770      	bx	lr
 8002906:	f803 1b01 	strb.w	r1, [r3], #1
 800290a:	e7f9      	b.n	8002900 <memset+0x4>

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4d0d      	ldr	r5, [pc, #52]	@ (8002944 <__libc_init_array+0x38>)
 8002910:	4c0d      	ldr	r4, [pc, #52]	@ (8002948 <__libc_init_array+0x3c>)
 8002912:	1b64      	subs	r4, r4, r5
 8002914:	10a4      	asrs	r4, r4, #2
 8002916:	2600      	movs	r6, #0
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	4d0b      	ldr	r5, [pc, #44]	@ (800294c <__libc_init_array+0x40>)
 800291e:	4c0c      	ldr	r4, [pc, #48]	@ (8002950 <__libc_init_array+0x44>)
 8002920:	f000 f818 	bl	8002954 <_init>
 8002924:	1b64      	subs	r4, r4, r5
 8002926:	10a4      	asrs	r4, r4, #2
 8002928:	2600      	movs	r6, #0
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	f855 3b04 	ldr.w	r3, [r5], #4
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	f855 3b04 	ldr.w	r3, [r5], #4
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	0800298c 	.word	0x0800298c
 8002948:	0800298c 	.word	0x0800298c
 800294c:	0800298c 	.word	0x0800298c
 8002950:	08002990 	.word	0x08002990

08002954 <_init>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr

08002960 <_fini>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr
